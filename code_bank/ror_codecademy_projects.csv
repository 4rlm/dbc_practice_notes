Topic,Concept,Usage,Examples,Topic,,"Methods, Methods, Everywhere",1. What You'll Be Building,This project will help you create a small program that will read a user's input and correct his or her capitalization. ,"print "What's your first name?"first_name = gets.chompfirst_name.capitalize!print "What's your last name?"last_name = gets.chomplast_name.capitalize!print "What city are you from?"city = gets.chompcity.capitalize!print "What state or province are you from?"state = gets.chompstate.upcase!puts "Your name is #{first_name} #{last_name} and you're from #{city}, #{state}!"""rint "What's your first name?"first_name = gets.chompfirst_name.capitalize!print "What's your last name?"last_name = gets.chomplast_name.capitalize!print "What city are you from?"city = gets.chompcity.capitalize!print "What state or province are you from?"state = gets.chompstate.upcase!puts "Your name is #{first_name} #{last_name} and you're from #{city}, #{st""int "What's your first name?"first_name = gets.chompfirst_name.capitalize!print "What's your last name?"last_name = gets.chomplast_name.capitalize!print "What city are you from?"city = gets.chompcity.capitalize!print "What state or province are you from?"state = gets.chompstate.upcase!puts "Your name is #{first_name} #{last_name} and you're from #{city},""nt "What's your first name?"first_name = gets.chompfirst_name.capitalize!print "What's your last name?"last_name = gets.chomplast_name.capitalize!print "What city are you from?"city = gets.chompcity.capitalize!print "What state or province are you from?"state = gets.chompstate.upcase!puts "Your name is #{first_name} #{last_name} and you're from #{ci""t "What's your first name?"first_name = gets.chompfirst_name.capitalize!print "What's your last name?"last_name = gets.chomplast_name.capitalize!print "What city are you from?"city = gets.chompcity.capitalize!print "What state or province are you from?"state = gets.chompstate.upcase!puts "Your name is #{first_name} #{last_name} and you're from #"" "What's your first name?"first_name = gets.chompfirst_name.capitalize!print "What's your last name?"last_name = gets.chomplast_name.capitalize!print "What city are you from?"city = gets.chompcity.capitalize!print "What state or province are you from?"state = gets.chompstate.upcase!puts "Your name is #{first_name} #{last_name} and you're from"""What's your first name?"first_name = gets.chompfirst_name.capitalize!print "What's your last name?"last_name = gets.chomplast_name.capitalize!print "What city are you from?"city = gets.chompcity.capitalize!print "What state or province are you from?"state = gets.chompstate.upcase!puts "Your name is #{first_name} #{last_name} and you're fro""What's your first name?"first_name = gets.chompfirst_name.capitalize!print "What's your last name?"last_name = gets.chomplast_name.capitalize!print "What city are you from?"city = gets.chompcity.capitalize!print "What state or province are you from?"state = gets.chompstate.upcase!puts "Your name is #{first_name} #{last_name} and you're fro""hat's your first name?"first_name = gets.chompfirst_name.capitalize!print "What's your last name?"last_name = gets.chomplast_name.capitalize!print "What city are you from?"city = gets.chompcity.capitalize!print "What state or province are you from?"state = gets.chompstate.upcase!puts "Your name is #{first_name} #{la""at's your first name?"first_name = gets.chompfirst_name.capitalize!print "What's your last name?"last_name = gets.chomplast_name.capitalize!print "What city are you from?"city = gets.chompcity.capitalize!print "What state or province are you from?"state = gets.chompstate.upcase!puts "Your name""t's your first name?"first_name = gets.chompfirst_name.capitalize!print "What's your last name?"last_name = gets.chomplast_name.capitalize!print "What city are you from?"city = gets.chompcity.capitalize!print "What state or province are you from?"state = gets.chompstate.upc""'s your first name?"first_name = gets.chompfirst_name.capitalize!print "What's your last name?"last_name = gets.chomplast_name.capitalize!print "What city are you from?"city = gets.chompcity.capitalize!print "What state or province are you from?"state = ""s your first name?"first_name = gets.chompfirst_name.capitalize!print "What's your last name?"last_name = gets.chomplast_name.capitalize!print "What city are you from?"city = gets.chompcity.capitalize!print "What state or province are "" your first name?"first_name = gets.chompfirst_name.capitalize!print "What's your last name?"last_name = gets.chomplast_name.capitalize!print "What city are you from?"city = gets.chompcity.capitalize!print "What stat""your first name?"first_name = gets.chompfirst_name.capitalize!print "What's your last name?"last_name = gets.chomplast_name.capitalize!print "What city are you from?"city = gets.chompcity.capitalize!""our first name?"first_name = gets.chompfirst_name.capitalize!print "What's your last name?"last_name = gets.chomplast_name.capitalize!print "What city are you from?"city = gets.chompc""ur first name?"first_name = gets.chompfirst_name.capitalize!print "What's your last name?"last_name = gets.chomplast_name.capitalize!print "What city are you from?"city""r first name?"first_name = gets.chompfirst_name.capitalize!print "What's your last name?"last_name = gets.chomplast_name.capitalize!print "What city are y"" first name?"first_name = gets.chompfirst_name.capitalize!print "What's your last name?"last_name = gets.chomplast_name.capitalize!print "Wh""first name?"first_name = gets.chompfirst_name.capitalize!print "What's your last name?"last_name = gets.chomplast_name.capitalize""irst name?"first_name = gets.chompfirst_name.capitalize!print "What's your last name?"last_name = gets.chomplast_name""rst name?"first_name = gets.chompfirst_name.capitalize!print "What's your last name?"last_name = gets.chomp""st name?"first_name = gets.chompfirst_name.capitalize!print "What's your last name?"last_name = g""t name?"first_name = gets.chompfirst_name.capitalize!print "What's your last name?"last_"" name?"first_name = gets.chompfirst_name.capitalize!print "What's your last name?""name?"first_name = gets.chompfirst_name.capitalize!print "What's your last""ame?"first_name = gets.chompfirst_name.capitalize!print "What's your""me?"first_name = gets.chompfirst_name.capitalize!print "What's ""e?"first_name = gets.chompfirst_name.capitalize!print "What""?"first_name = gets.chompfirst_name.capitalize!print "Wh"""first_name = gets.chompfirst_name.capitalize!print "W""first_name = gets.chompfirst_name.capitalize!print "W""f",,,Introduction to Control Flow,1. How it Works,"Control flow gives us the flexibility we're looking for. We can select different outcomes depending on information the user types, the result of a computation, or the value returned by another part of the program."," =beginprint "Integer please: "user_num = Integer(gets.chomp)if user_num < 0  puts "You picked a negative integer!"elsif user_num > 0  puts "You picked a positive integer!"else  puts "You picked zero!"end =endprint "Integer please: "user_num = Integer(gets.chomp)if user_num < 0    puts "You picked a negative number!"    elsif user_num > 0puts "You picked a positive integer!"else    puts "You picked zero!"end""=beginprint "Integer please: "user_num = Integer(gets.chomp)if user_num < 0  puts "You picked a negative integer!"elsif user_num > 0  puts "You picked a positive integer!"else  puts "You picked zero!"end =endprint "Integer please: "user_num = Integer(gets.chomp)if user_num < 0    puts "You picked a negative number!"    elsif user_num > 0puts "You picked a positive integer!"else    puts "You pic""beginprint "Integer please: "user_num = Integer(gets.chomp)if user_num < 0  puts "You picked a negative integer!"elsif user_num > 0  puts "You picked a positive integer!"else  puts "You picked zero!"end =endprint "Integer please: "user_num = Integer(gets.chomp)if user_num < 0    puts "You picked a negative number!"    elsif user_num > 0puts "You picked a positive integer!"else    ""eginprint "Integer please: "user_num = Integer(gets.chomp)if user_num < 0  puts "You picked a negative integer!"elsif user_num > 0  puts "You picked a positive integer!"else  puts "You picked zero!"end =endprint "Integer please: "user_num = Integer(gets.chomp)if user_num < 0    puts "You picked a negative number!"    elsif user_num > 0puts "You picked a positive integer!""ginprint "Integer please: "user_num = Integer(gets.chomp)if user_num < 0  puts "You picked a negative integer!"elsif user_num > 0  puts "You picked a positive integer!"else  puts "You picked zero!"end =endprint "Integer please: "user_num = Integer(gets.chomp)if user_num < 0    puts "You picked a negative number!"    elsif user_num > 0puts "You picked a positi""inprint "Integer please: "user_num = Integer(gets.chomp)if user_num < 0  puts "You picked a negative integer!"elsif user_num > 0  puts "You picked a positive integer!"else  puts "You picked zero!"end =endprint "Integer please: "user_num = Integer(gets.chomp)if user_num < 0    puts "You picked a negative number!"    elsif user_num > 0puts "You picke""nprint "Integer please: "user_num = Integer(gets.chomp)if user_num < 0  puts "You picked a negative integer!"elsif user_num > 0  puts "You picked a positive integer!"else  puts "You picked zero!"end =endprint "Integer please: "user_num = Integer(gets.chomp)if user_num < 0    puts "You picked a negative number!"    elsif user_num > 0puts """print "Integer please: "user_num = Integer(gets.chomp)if user_num < 0  puts "You picked a negative integer!"elsif user_num > 0  puts "You picked a positive integer!"else  puts "You picked zero!"end =endprint "Integer please: "user_num = Integer(gets.chomp)if user_num < 0    puts "You picked a negative number!"    elsif user_num > ""print "Integer please: "user_num = Integer(gets.chomp)if user_num < 0  puts "You picked a negative integer!"elsif user_num > 0  puts "You picked a positive integer!"else  puts "You picked zero!"end =endprint "Integer please: "user_num = Integer(gets.chomp)if user_num < 0    puts "You picked a negative number!"    elsif user""rint "Integer please: "user_num = Integer(gets.chomp)if user_num < 0  puts "You picked a negative integer!"elsif user_num > 0  puts "You picked a positive integer!"else  puts "You picked zero!"end =endprint "Integer please: "user_num = Integer(gets.chomp)if user_num < 0    puts "You picked a negative number!"    elsi""int "Integer please: "user_num = Integer(gets.chomp)if user_num < 0  puts "You picked a negative integer!"elsif user_num > 0  puts "You picked a positive integer!"else  puts "You picked zero!"end =endprint "Integer please: "user_num = Integer(gets.chomp)if user_num < 0    puts "You picked a negative number!"    ""nt "Integer please: "user_num = Integer(gets.chomp)if user_num < 0  puts "You picked a negative integer!"elsif user_num > 0  puts "You picked a positive integer!"else  puts "You picked zero!"end =endprint "Integer please: "user_num = Integer(gets.chomp)if user_num < 0    puts "You picked a negative number!"""t "Integer please: "user_num = Integer(gets.chomp)if user_num < 0  puts "You picked a negative integer!"elsif user_num > 0  puts "You picked a positive integer!"else  puts "You picked zero!"end =endprint "Integer please: "user_num = Integer(gets.chomp)if user_num < 0    puts "You picked a negative number"" "Integer please: "user_num = Integer(gets.chomp)if user_num < 0  puts "You picked a negative integer!"elsif user_num > 0  puts "You picked a positive integer!"else  puts "You picked zero!"end =endprint "Integer please: "user_num = Integer(gets.chomp)if user_num < 0    puts "You picked a negative numb"""Integer please: "user_num = Integer(gets.chomp)if user_num < 0  puts "You picked a negative integer!"elsif user_num > 0  puts "You picked a positive integer!"else  puts "You picked zero!"end =endprint "Integer please: "user_num = Integer(gets.chomp)if user_num < 0    puts "You picked a negative num""Integer please: "user_num = Integer(gets.chomp)if user_num < 0  puts "You picked a negative integer!"elsif user_num > 0  puts "You picked a positive integer!"else  puts "You picked zero!"end =endprint "Integer please: "user_num = Integer(gets.chomp)if user_num < 0    puts "You picked a negative num""nteger please: "user_num = Integer(gets.chomp)if user_num < 0  puts "You picked a negative integer!"elsif user_num > 0  puts "You picked a positive integer!"else  puts "You picked zero!"end =endprint "Integer please: "user_num = Integer(gets.chomp)if user_num < 0    puts "You picke""teger please: "user_num = Integer(gets.chomp)if user_num < 0  puts "You picked a negative integer!"elsif user_num > 0  puts "You picked a positive integer!"else  puts "You picked zero!"end =endprint "Integer please: "user_num = Integer(gets.chomp)if user_num < 0    ""eger please: "user_num = Integer(gets.chomp)if user_num < 0  puts "You picked a negative integer!"elsif user_num > 0  puts "You picked a positive integer!"else  puts "You picked zero!"end =endprint "Integer please: "user_num = Integer(gets.chomp)if use""ger please: "user_num = Integer(gets.chomp)if user_num < 0  puts "You picked a negative integer!"elsif user_num > 0  puts "You picked a positive integer!"else  puts "You picked zero!"end =endprint "Integer please: "user_num = Integer(gets.c""er please: "user_num = Integer(gets.chomp)if user_num < 0  puts "You picked a negative integer!"elsif user_num > 0  puts "You picked a positive integer!"else  puts "You picked zero!"end =endprint "Integer please: "user_num = In""r please: "user_num = Integer(gets.chomp)if user_num < 0  puts "You picked a negative integer!"elsif user_num > 0  puts "You picked a positive integer!"else  puts "You picked zero!"end =endprint "Integer please: "us"" please: "user_num = Integer(gets.chomp)if user_num < 0  puts "You picked a negative integer!"elsif user_num > 0  puts "You picked a positive integer!"else  puts "You picked zero!"end =endprint "Integer pl""please: "user_num = Integer(gets.chomp)if user_num < 0  puts "You picked a negative integer!"elsif user_num > 0  puts "You picked a positive integer!"else  puts "You picked zero!"end =endprint "I""lease: "user_num = Integer(gets.chomp)if user_num < 0  puts "You picked a negative integer!"elsif user_num > 0  puts "You picked a positive integer!"else  puts "You picked zero!"end =end""ease: "user_num = Integer(gets.chomp)if user_num < 0  puts "You picked a negative integer!"elsif user_num > 0  puts "You picked a positive integer!"else  puts "You picked zero!"end""ase: "user_num = Integer(gets.chomp)if user_num < 0  puts "You picked a negative integer!"elsif user_num > 0  puts "You picked a positive integer!"else  puts "You picked zero!""se: "user_num = Integer(gets.chomp)if user_num < 0  puts "You picked a negative integer!"elsif user_num > 0  puts "You picked a positive integer!"else  puts "You picked ""e: "user_num = Integer(gets.chomp)if user_num < 0  puts "You picked a negative integer!"elsif user_num > 0  puts "You picked a positive integer!"else  puts "You pic"": "user_num = Integer(gets.chomp)if user_num < 0  puts "You picked a negative integer!"elsif user_num > 0  puts "You picked a positive integer!"else  puts "You "" "user_num = Integer(gets.chomp)if user_num < 0  puts "You picked a negative integer!"elsif user_num > 0  puts "You picked a positive integer!"else  puts "Yo"""user_num = Integer(gets.chomp)if user_num < 0  puts "You picked a negative integer!"elsif user_num > 0  puts "You picked a positive integer!"else  puts "Y""user_num = Integer(gets.chomp)if user_num < 0  puts "You picked a negative integer!"elsif user_num > 0  puts "You picked a positive integer!"else  puts "Y""user_num = Integer(gets.chomp)if user_num < 0  puts "You picked a negative integer!"elsif user_num > ""ser_num = Integer(gets.chomp)if user_num < 0  ",,,Introduction to Control Flow,4. elsif,,"age = 23if age < 18    print "Sorry, you are too young."elsif age > 18    print "Welcome to the site!"else    print "Please tell us your age."end""ge = 23if age < 18    print "Sorry, you are too young."elsif age > 18    print "Welcome to the site!"else    prin""e = 23if age < 18    print "Sorry, you are too young."elsif age > 18    print "Welc"" = 23if age < 18    print "Sorry, you are too young."""= 23if age < 18    print",,,Introduction to Control Flow,5. unless,,"hungry = falseunless hungry  puts "I'm writing Ruby programs!"else  puts "Time to eat!"end""ungry = falseunless hungry  puts "I'm writing Ruby prog""ngry = falseunless ",,,Review,15. unless,"Ex.problem = falseprint "Good to go!" unless problem""x.problem = falseprint "G"".","cherries = falseprint "We have strawberries!" unless cherries""herries = falseprint "We have strawb""erries = false",,,Thtrings and Things,1. What You'll be Building,,"print "Thtring, pleathe!: "user_input = gets.chompuser_input.downcase!if user_input.include? "s"  user_input.gsub!(/s/, "th")else  puts "Nothing to do here!"end  puts "Your string is: #{user_input}"""rint "Thtring, pleathe!: "user_input = gets.chompuser_input.downcase!if user_input.include? "s"  user_input.gsub!(/s/, "th")else  puts "Nothing to do here!"end  puts "Your string is: #{user_i""int "Thtring, pleathe!: "user_input = gets.chompuser_input.downcase!if user_input.include? "s"  user_input.gsub!(/s/, "th")else  puts "Nothing to do here!"end  puts "Your string is: #{u""nt "Thtring, pleathe!: "user_input = gets.chompuser_input.downcase!if user_input.include? "s"  user_input.gsub!(/s/, "th")else  puts "Nothing to do here!"end  puts "Your string is:""t "Thtring, pleathe!: "user_input = gets.chompuser_input.downcase!if user_input.include? "s"  user_input.gsub!(/s/, "th")else  puts "Nothing to do here!"end  puts "Your string "" "Thtring, pleathe!: "user_input = gets.chompuser_input.downcase!if user_input.include? "s"  user_input.gsub!(/s/, "th")else  puts "Nothing to do here!"end  puts "Your strin"""Thtring, pleathe!: "user_input = gets.chompuser_input.downcase!if user_input.include? "s"  user_input.gsub!(/s/, "th")else  puts "Nothing to do here!"end  puts "Your stri""Thtring, pleathe!: "user_input = gets.chompuser_input.downcase!if user_input.include? "s"  user_input.gsub!(/s/, "th")else  puts "Nothing to do here!"end  puts "Your stri""htring, pleathe!: "user_input = gets.chompuser_input.downcase!if user_input.include? "s"  user_input.gsub!(/s/, "th")else  puts "Nothing to do here!"end""tring, pleathe!: "user_input = gets.chompuser_input.downcase!if user_input.include? "s"  user_input.gsub!(/s/, "th")else  puts "Nothin""ring, pleathe!: "user_input = gets.chompuser_input.downcase!if user_input.include? "s"  user_input.gsub!(/s/, "th")el""ing, pleathe!: "user_input = gets.chompuser_input.downcase!if user_input.include? "s"  user_input.gsu""ng, pleathe!: "user_input = gets.chompuser_input.downcase!if user_input.include? "s" ""g, pleathe!: "user_input = gets.chompuser_input.downcase!if user_input."", pleathe!: "user_input = gets.chompuser_input.downcase!i"" pleathe!: "user_input = gets.chompuser_input.""pleathe!: "user_input = gets.chomp""leathe!: "user_input = g""eathe!: "user_""athe!:",,,Thtrings and Things,2. Getting User Input,variable = gets.chomp,"print "What country are you from?"user_input = gets.chompprint "Wow!  I heard #{user_input} is very beautiful!"""rint "What country are you from?"user_input = gets.chompprint "Wow!  I heard #{user_input} is very beaut""int "What country are you from?"user_input = gets.chompprint "Wow!  I heard #{user_input} is very ""nt "What country are you from?"user_input = gets.chompprint "Wow!  I heard #{user_input} is v""t "What country are you from?"user_input = gets.chompprint "Wow!  I heard #{user_input} i"" "What country are you from?"user_input = gets.chompprint "Wow!  I heard #{user_input}"""What country are you from?"user_input = gets.chompprint "Wow!  I heard #{user_input""What country are you from?"user_input = gets.chompprint "Wow!  I heard #{user_input""hat country are you from?"user_input = gets.chompprint """at country are you from?"user_in""t country",,,Thtrings and Things,3. Downcase!,variable.downcase!,"print "What country are you from?"user_input = gets.chompuser_input.downcase!print "Wow!  I heard #{user_input} is very beautiful!"""rint "What country are you from?"user_input = gets.chompuser_input.downcase!print "Wow!  I heard #{user_input} is very beaut""int "What country are you from?"user_input = gets.chompuser_input.downcase!print "Wow!  I heard #{user_input} is very ""nt "What country are you from?"user_input = gets.chompuser_input.downcase!print "Wow!  I heard #{user_input} is v""t "What country are you from?"user_input = gets.chompuser_input.downcase!print "Wow!  I heard #{user_input} i"" "What country are you from?"user_input = gets.chompuser_input.downcase!print "Wow!  I heard #{user_input}"""What country are you from?"user_input = gets.chompuser_input.downcase!print "Wow!  I heard #{user_input""What country are you from?"user_input = gets.chompuser_input.downcase!print "Wow!  I heard #{user_input""hat country are you from?"user_input = gets.chompuser_input.downcase!print """at country are you from?"user_input = gets.chompuser""t country are you from?"user"" count",,,‘while’ and ‘until’ Loops,3. The ‘until’ Loop,,"i = 0until i == 6  i += 1endputs i",,,Iterators and Blocks,8. The Loop Method,"Ex.1loop { print "Hello, world!" }Ex.2i = 0loop do  i += 1  print "#{i}"  break if i > 5end""x.1loop { print "Hello, world!" }Ex.2i = 0loop do  i += 1  print "#{i}"  "".1loop { print "Hello, world!" }Ex.2i = 0loop do  i += 1""1loop { print "Hello, world!" }Ex.2i = 0l""loop { print "Hello, world!" ""loop { print "H""o","i = 20loop do  i -= 1  print "#{i}"  break if i == 0end"" = 20loop do  i -= 1  pr",,,Iterators and Blocks,9. Next!,"for i in 1..5  next if i % 2 == 0  print iend","i = 20loop do  i -= 1  next if i % 2 == 1  print "#{i}"  break if i == 0end"" = 20loop do  i -= 1  ne",,,Iterators and Blocks,10. Saving Multiple Values,,"my_array = [1,2,3,4,5]",,,Review,15. Looping with ‘Until’,"Ex.1i = 3while i > 0 do  print i  i -= 1endEx.2j = 3until j == 0 do  print j  j -= 1end","j = 1until j > 50 do    print j    j += 1end",,,Review,17. Loop the Loop with Loop,"m= 0loop do    m += 1    print m    break if m == 10end","m = 0loop do    m += 1    print "Ruby!"    break if m ==30end"" = 0loop do    m += 1    pr",,,Iteration & Obfuscation,1. What You'll Be Building,,"puts "Text to search through: "text = gets.chompputs "Word to redact: "redact = gets.chompwords = text.split(" ")words.each do |word|  if word != redact    print word + " "  else    print "REDACTED "  endend""uts "Text to search through: "text = gets.chompputs "Word to redact: "redact = gets.chompwords = text.split(" ")words.each do |word|  if word != redact    print word + " "  else    print "REDACTED "  en""ts "Text to search through: "text = gets.chompputs "Word to redact: "redact = gets.chompwords = text.split(" ")words.each do |word|  if word != redact    print word + " "  else    print "REDACTED """s "Text to search through: "text = gets.chompputs "Word to redact: "redact = gets.chompwords = text.split(" ")words.each do |word|  if word != redact    print word + " "  else    print "REDACTED"" "Text to search through: "text = gets.chompputs "Word to redact: "redact = gets.chompwords = text.split(" ")words.each do |word|  if word != redact    print word + " "  else    print "REDACT"""Text to search through: "text = gets.chompputs "Word to redact: "redact = gets.chompwords = text.split(" ")words.each do |word|  if word != redact    print word + " "  else    print "REDAC""Text to search through: "text = gets.chompputs "Word to redact: "redact = gets.chompwords = text.split(" ")words.each do |word|  if word != redact    print word + " "  else    print "REDAC""ext to search through: "text = gets.chompputs "Word to redact: "redact = gets.chompwords = text.split(" ")words.each do |word|  if word != redact    print word + " """xt to search through: "text = gets.chompputs "Word to redact: "redact = gets.chompwords = text.split(" ")words.each do |word|  if word != reda""t to search through: "text = gets.chompputs "Word to redact: "redact = gets.chompwords = text.split(" ")words.each do |w"" to search through: "text = gets.chompputs "Word to redact: "redact = gets.chompwords = text.split("""to search through: "text = gets.chompputs "Word to redact: "redact = gets.chomp""o search through: "text = gets.chompputs "Word to redact: "re"" search through: "text = gets.chompputs "Wo""search through: "text = ge""earch thro",,,More With Arrays,4. Arrays of Arrays,multidimensional arrays,"multi_d_array = [[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0]]multi_d_array.each { |x| puts "#{x}\n" }multi_d_array.each do |x|     print "#{x}\n"end""ulti_d_array = [[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0]]mu",,,Hashes,9. Accessing Hash Values,"pets = {  "Stevie" => "cat",  "Bowser" => "hamster",  "Kevin Sorbo" => "fish"}puts pets["Stevie"]# will print "cat"""ets = {  "Stevie" => "cat",  "Bowser" => "hamster",  "Kevin Sorbo" => "fish"}puts pets["Stevie"]# will ""ts = {  "Stevie" => "cat",  "Bowser" => "hamster",  "Kevin Sorbo" => "fish"}puts pets["Stevie""s = {  "Stevie" => "cat",  "Bowser" => "hamster",  "Kevin Sorbo" => "fish"}puts pet"" = {  "Stevie" => "cat",  "Bowser" => "hamster",  "Kevin Sorbo" => "fish"}""= {  "Stevie" => "cat",  "Bowser" => "hamster",  "Kevin Sorbo" => "fi"" {  "Stevie" => "cat",  "Bowser" => "hamster",  "Kevin Sorbo" ""{  "Stevie" => "cat",  "Bowser" => "hamster",  "Kevin So""  "Stevie" => "cat",  "Bowser" => "hamster",  "Kevi""  "Stevie" => "cat",  "Bowser" => "hamster",  "K"" "Stevie" => "cat",  "Bowser" => "hamster",  """Stevie" => "cat",  "Bowser" => "hamster", ""Stevie" => "cat",  "Bowser" => "hamster", ""tevie" => "cat",  "Bowser" => "hamst""evie" => "cat",  "Bowser" => """vie" => "cat",  "Bowser" ""ie" => "cat",  "Bowse""e" => "cat",  "Bow""" => "cat",  "Bo"" => "cat",  "Bo""=> "cat", ""> "cat""" "ca"""c""c","pets = Hash.newpets["quincy"] = "dog"puts pets["quincy"]""ets = Hash.newpets["quincy"] = "dog""ts = Hash.new",,,Iterating over Arrays and Hashes,10. (Re)Introduction to Iteration,,"friends = ["Milhouse", "Ralph", "Nelson", "Otto"]family = { "Homer" => "dad",  "Marge" => "mom",  "Lisa" => "sister",  "Maggie" => "sister",  "Abe" => "grandpa",  "Santa's Little Helper" => "dog"}friends.each { |x| puts "#{x}" }family.each { |x, y| puts "#{x}: #{y}" }""riends = ["Milhouse", "Ralph", "Nelson", "Otto"]family = { "Homer" => "dad",  "Marge" => "mom",  "Lisa" => "sister",  "Maggie" => "sister",  "Abe" => "grandpa",  "Santa's Little Helper" => "dog"}friends.each { |x| puts "#{x}" }family.each { |x, y| puts "#{""iends = ["Milhouse", "Ralph", "Nelson", "Otto"]family = { "Homer" => "dad",  "Marge" => "mom",  "Lisa" => "sister",  "Maggie" => "sister",  "Abe" => "grandpa",  "Santa's Little Helper" => "dog"}friends.each { |x| puts "#{x}" }family.each { |x, y""ends = ["Milhouse", "Ralph", "Nelson", "Otto"]family = { "Homer" => "dad",  "Marge" => "mom",  "Lisa" => "sister",  "Maggie" => "sister",  "Abe" => "grandpa",  "Santa's Little Helper" => "dog"}friends.each { |x| puts "#{x}" }family.eac""nds = ["Milhouse", "Ralph", "Nelson", "Otto"]family = { "Homer" => "dad",  "Marge" => "mom",  "Lisa" => "sister",  "Maggie" => "sister",  "Abe" => "grandpa",  "Santa's Little Helper" => "dog"}friends.each { |x| puts "#{x}" }fa""ds = ["Milhouse", "Ralph", "Nelson", "Otto"]family = { "Homer" => "dad",  "Marge" => "mom",  "Lisa" => "sister",  "Maggie" => "sister",  "Abe" => "grandpa",  "Santa's Little Helper" => "dog"}friends.each { |x| puts "#{x""s = ["Milhouse", "Ralph", "Nelson", "Otto"]family = { "Homer" => "dad",  "Marge" => "mom",  "Lisa" => "sister",  "Maggie" => "sister",  "Abe" => "grandpa",  "Santa's Little Helper" => "dog"}friends.each { |x| put"" = ["Milhouse", "Ralph", "Nelson", "Otto"]family = { "Homer" => "dad",  "Marge" => "mom",  "Lisa" => "sister",  "Maggie" => "sister",  "Abe" => "grandpa",  "Santa's Little Helper" => "dog"}friends.each { |x""= ["Milhouse", "Ralph", "Nelson", "Otto"]family = { "Homer" => "dad",  "Marge" => "mom",  "Lisa" => "sister",  "Maggie" => "sister",  "Abe" => "grandpa",  "Santa's Little Helper" => "dog"}friends.each "" ["Milhouse", "Ralph", "Nelson", "Otto"]family = { "Homer" => "dad",  "Marge" => "mom",  "Lisa" => "sister",  "Maggie" => "sister",  "Abe" => "grandpa",  "Santa's Little Helper" => "dog"}friends.ea""["Milhouse", "Ralph", "Nelson", "Otto"]family = { "Homer" => "dad",  "Marge" => "mom",  "Lisa" => "sister",  "Maggie" => "sister",  "Abe" => "grandpa",  "Santa's Little Helper" => "dog"}friends."""Milhouse", "Ralph", "Nelson", "Otto"]family = { "Homer" => "dad",  "Marge" => "mom",  "Lisa" => "sister",  "Maggie" => "sister",  "Abe" => "grandpa",  "Santa's Little Helper" => "dog"}friends""Milhouse", "Ralph", "Nelson", "Otto"]family = { "Homer" => "dad",  "Marge" => "mom",  "Lisa" => "sister",  "Maggie" => "sister",  "Abe" => "grandpa",  "Santa's Little Helper" => "dog"}friends""ilhouse", "Ralph", "Nelson", "Otto"]family = { "Homer" => "dad",  "Marge" => "mom",  "Lisa" => "sister",  "Maggie" => "sister",  "Abe" => "grandpa",  "Santa's Little Helper" => "dog"}""lhouse", "Ralph", "Nelson", "Otto"]family = { "Homer" => "dad",  "Marge" => "mom",  "Lisa" => "sister",  "Maggie" => "sister",  "Abe" => "grandpa",  "Santa's Little Helper" => """house", "Ralph", "Nelson", "Otto"]family = { "Homer" => "dad",  "Marge" => "mom",  "Lisa" => "sister",  "Maggie" => "sister",  "Abe" => "grandpa",  "Santa's Little Helper""ouse", "Ralph", "Nelson", "Otto"]family = { "Homer" => "dad",  "Marge" => "mom",  "Lisa" => "sister",  "Maggie" => "sister",  "Abe" => "grandpa",  "Santa's Little H""use", "Ralph", "Nelson", "Otto"]family = { "Homer" => "dad",  "Marge" => "mom",  "Lisa" => "sister",  "Maggie" => "sister",  "Abe" => "grandpa",  "Santa's Litt""se", "Ralph", "Nelson", "Otto"]family = { "Homer" => "dad",  "Marge" => "mom",  "Lisa" => "sister",  "Maggie" => "sister",  "Abe" => "grandpa",  "Santa's L""e", "Ralph", "Nelson", "Otto"]family = { "Homer" => "dad",  "Marge" => "mom",  "Lisa" => "sister",  "Maggie" => "sister",  "Abe" => "grandpa",  "Santa's""", "Ralph", "Nelson", "Otto"]family = { "Homer" => "dad",  "Marge" => "mom",  "Lisa" => "sister",  "Maggie" => "sister",  "Abe" => "grandpa",  "Santa'"", "Ralph", "Nelson", "Otto"]family = { "Homer" => "dad",  "Marge" => "mom",  "Lisa" => "sister",  "Maggie" => "sister",  "Abe" => "grandpa",  "Santa'"" "Ralph", "Nelson", "Otto"]family = { "Homer" => "dad",  "Marge" => "mom",  "Lisa" => "sister",  "Maggie" => "sister",  "Abe" => "grandpa",  "Sant"""Ralph", "Nelson", "Otto"]family = { "Homer" => "dad",  "Marge" => "mom",  "Lisa" => "sister",  "Maggie" => "sister",  "Abe" => "grandpa",  "San""Ralph", "Nelson", "Otto"]family = { "Homer" => "dad",  "Marge" => "mom",  "Lisa" => "sister",  "Maggie" => "sister",  "Abe" => "grandpa",  "San""alph", "Nelson", "Otto"]family = { "Homer" => "dad",  "Marge" => "mom",  "Lisa" => "sister",  "Maggie" => "sister",  "Abe" => "grandpa", ""lph", "Nelson", "Otto"]family = { "Homer" => "dad",  "Marge" => "mom",  "Lisa" => "sister",  "Maggie" => "sister",  "Abe" => "grandpa""ph", "Nelson", "Otto"]family = { "Homer" => "dad",  "Marge" => "mom",  "Lisa" => "sister",  "Maggie" => "sister",  "Abe" => "gran""h", "Nelson", "Otto"]family = { "Homer" => "dad",  "Marge" => "mom",  "Lisa" => "sister",  "Maggie" => "sister",  "Abe" => "gr""", "Nelson", "Otto"]family = { "Homer" => "dad",  "Marge" => "mom",  "Lisa" => "sister",  "Maggie" => "sister",  "Abe" => "g"", "Nelson", "Otto"]family = { "Homer" => "dad",  "Marge" => "mom",  "Lisa" => "sister",  "Maggie" => "sister",  "Abe" => "g"" "Nelson", "Otto"]family = { "Homer" => "dad",  "Marge" => "mom",  "Lisa" => "sister",  "Maggie" => "sister",  "Abe" => """Nelson", "Otto"]family = { "Homer" => "dad",  "Marge" => "mom",  "Lisa" => "sister",  "Maggie" => "sister",  "Abe" =>""Nelson", "Otto"]family = { "Homer" => "dad",  "Marge" => "mom",  "Lisa" => "sister",  "Maggie" => "sister",  "Abe" =>""elson", "Otto"]family = { "Homer" => "dad",  "Marge" => "mom",  "Lisa" => "sister",  "Maggie" => "sister",  "A""lson", "Otto"]family = { "Homer" => "dad",  "Marge" => "mom",  "Lisa" => "sister",  "Maggie" => "sister",""son", "Otto"]family = { "Homer" => "dad",  "Marge" => "mom",  "Lisa" => "sister",  "Maggie" => "sist""on", "Otto"]family = { "Homer" => "dad",  "Marge" => "mom",  "Lisa" => "sister",  "Maggie" => "s""n", "Otto"]family = { "Homer" => "dad",  "Marge" => "mom",  "Lisa" => "sister",  "Maggie" => """, "Otto"]family = { "Homer" => "dad",  "Marge" => "mom",  "Lisa" => "sister",  "Maggie" =>"", "Otto"]family = { "Homer" => "dad",  "Marge" => "mom",  "Lisa" => "sister",  "Maggie" =>"" "Otto"]family = { "Homer" => "dad",  "Marge" => "mom",  "Lisa" => "sister",  "Maggie" """Otto"]family = { "Homer" => "dad",  "Marge" => "mom",  "Lisa" => "sister",  "Maggie"""Otto"]family = { "Homer" => "dad",  "Marge" => "mom",  "Lisa" => "sister",  "Maggie"""tto"]family = { "Homer" => "dad",  "Marge" => "mom",  "Lisa" => "sister",  "Mag""to"]family = { "Homer" => "dad",  "Marge" => "mom",  "Lisa" => "sister",  """o"]family = { "Homer" => "dad",  "Marge" => "mom",  "Lisa" => "sister", """]family = { "Homer" => "dad",  "Marge" => "mom",  "Lisa" => "sister",""]family = { "Homer" => "dad",  "Marge" => "mom",  "Lisa" => "sister",""family = { "Homer" => "dad",  "Marge" => "mom",  "Lisa"""family = { "Homer" => "dad",  "Marge" => "m""family = { "Homer" => "dad",  """amily = { "Homer" =>""mily = { ",,,Iterating over Arrays and Hashes,12. Iterating Over Multidimensional Arrays,"s[0][1]array.each { |element| action }","s = [["ham", "swiss"], ["turkey", "cheddar"], ["roast beef", "gruyere"]]s.each do |sub_array|ends.each do |sub_array|    sub_array.each do |item|        puts item    endend"" = [["ham", "swiss"], ["turkey", "cheddar"], ["roast beef", "gruyere"]]s.each do |sub_array|ends.each do |sub_array|    sub_array.each do |item|        puts item    e""= [["ham", "swiss"], ["turkey", "cheddar"], ["roast beef", "gruyere"]]s.each do |sub_array|ends.each do |sub_array|    sub_array.each do |item|        puts item"" [["ham", "swiss"], ["turkey", "cheddar"], ["roast beef", "gruyere"]]s.each do |sub_array|ends.each do |sub_array|    sub_array.each do |item|        puts i""[["ham", "swiss"], ["turkey", "cheddar"], ["roast beef", "gruyere"]]s.each do |sub_array|ends.each do |sub_array|    sub_array.each do |item|        put""["ham", "swiss"], ["turkey", "cheddar"], ["roast beef", "gruyere"]]s.each do |sub_array|ends.each do |sub_array|    sub_array.each do |item|        p"""ham", "swiss"], ["turkey", "cheddar"], ["roast beef", "gruyere"]]s.each do |sub_array|ends.each do |sub_array|    sub_array.each do |item|        ""ham", "swiss"], ["turkey", "cheddar"], ["roast beef", "gruyere"]]s.each do |sub_array|ends.each do |sub_array|    sub_array.each do |item|        ""am", "swiss"], ["turkey", "cheddar"], ["roast beef", "gruyere"]]s.each do |sub_array|ends.each do |sub_array|    sub_array.each do |item|     ""m", "swiss"], ["turkey", "cheddar"], ["roast beef", "gruyere"]]s.each do |sub_array|ends.each do |sub_array|    sub_array.each do |item|   """, "swiss"], ["turkey", "cheddar"], ["roast beef", "gruyere"]]s.each do |sub_array|ends.each do |sub_array|    sub_array.each do |item|  "", "swiss"], ["turkey", "cheddar"], ["roast beef", "gruyere"]]s.each do |sub_array|ends.each do |sub_array|    sub_array.each do |item|  "" "swiss"], ["turkey", "cheddar"], ["roast beef", "gruyere"]]s.each do |sub_array|ends.each do |sub_array|    sub_array.each do |item|"""swiss"], ["turkey", "cheddar"], ["roast beef", "gruyere"]]s.each do |sub_array|ends.each do |sub_array|    sub_array.each do |item|""swiss"], ["turkey", "cheddar"], ["roast beef", "gruyere"]]s.each do |sub_array|ends.each do |sub_array|    sub_array.each do |item|""wiss"], ["turkey", "cheddar"], ["roast beef", "gruyere"]]s.each do |sub_array|ends.each do |sub_array|    sub_array.each do |""iss"], ["turkey", "cheddar"], ["roast beef", "gruyere"]]s.each do |sub_array|ends.each do |sub_array|    sub_array.each ""ss"], ["turkey", "cheddar"], ["roast beef", "gruyere"]]s.each do |sub_array|ends.each do |sub_array|    sub_array.ea""s"], ["turkey", "cheddar"], ["roast beef", "gruyere"]]s.each do |sub_array|ends.each do |sub_array|    sub_array."""], ["turkey", "cheddar"], ["roast beef", "gruyere"]]s.each do |sub_array|ends.each do |sub_array|    sub_array""], ["turkey", "cheddar"], ["roast beef", "gruyere"]]s.each do |sub_array|ends.each do |sub_array|    sub_array"", ["turkey", "cheddar"], ["roast beef", "gruyere"]]s.each do |sub_array|ends.each do |sub_array|    sub_a"" ["turkey", "cheddar"], ["roast beef", "gruyere"]]s.each do |sub_array|ends.each do |sub_array|    su""["turkey", "cheddar"], ["roast beef", "gruyere"]]s.each do |sub_array|ends.each do |sub_array|    """turkey", "cheddar"], ["roast beef", "gruyere"]]s.each do |sub_array|ends.each do |sub_array|   ""turkey", "cheddar"], ["roast beef", "gruyere"]]s.each do |sub_array|ends.each do |sub_array|   ""urkey", "cheddar"], ["roast beef", "gruyere"]]s.each do |sub_array|ends.each do |sub_arra""rkey", "cheddar"], ["roast beef", "gruyere"]]s.each do |sub_array|ends.each do |sub""key", "cheddar"], ["roast beef", "gruyere"]]s.each do |sub_array|ends.each do ""ey", "cheddar"], ["roast beef", "gruyere"]]s.each do |sub_array|ends.each ""y", "cheddar"], ["roast beef", "gruyere"]]s.each do |sub_array|ends.eac""", "cheddar"], ["roast beef", "gruyere"]]s.each do |sub_array|ends.ea"", "cheddar"], ["roast beef", "gruyere"]]s.each do |sub_array|ends.ea"" "cheddar"], ["roast beef", "gruyere"]]s.each do |sub_array|ends."""cheddar"], ["roast beef", "gruyere"]]s.each do |sub_array|ends""cheddar"], ["roast beef", "gruyere"]]s.each do |sub_array|ends""heddar"], ["roast beef", "gruyere"]]s.each do |sub_array|""eddar"], ["roast beef", "gruyere"]]s.each do |sub_""ddar"], ["roast beef", "gruyere"]]s.each do ""dar"], ["roast beef", "gruyere"]]s.each""ar"], ["roast beef", "gruyere"]]s.e""r"], ["roast beef", "gruyere"]]s"""], ["roast beef", "gruyere"]]""], ["roast beef", "gruyere"]]"", ["roast beef", "gruyere"" ["roast beef", "gruy""["roast beef", "gr"""roast beef", "g""roast beef", "g""oast",,,Review,15. Hashes,"prices = {   "apple" => 0.52,  "banana" => 0.23,  "kiwi" => 1.42}sounds = Hash.newsounds["dog"] = "woof"sounds["cat"] = "meow"""rices = {   "apple" => 0.52,  "banana" => 0.23,  "kiwi" => 1.42}sounds = Hash.newsounds["dog"] = "woof"sounds["""ices = {   "apple" => 0.52,  "banana" => 0.23,  "kiwi" => 1.42}sounds = Hash.newsounds["dog"] = "w""ces = {   "apple" => 0.52,  "banana" => 0.23,  "kiwi" => 1.42}sounds = Hash.newsounds""es = {   "apple" => 0.52,  "banana" => 0.23,  "kiwi" => 1.42}sounds = Hash""s = {   "apple" => 0.52,  "banana" => 0.23,  "kiwi" => 1.42}sou"" = {   "apple" => 0.52,  "banana" => 0.23,  "kiwi" => 1.""= {   "apple" => 0.52,  "banana" => 0.23,  "kiw"" {   "apple" => 0.52,  "banana" => 0.23,""{   "apple" => 0.52,  "banana" =>""   "apple" => 0.52,  "banan""  "apple" => 0.52,  "b""  "apple" => 0.52, "" "apple" => 0.52,"""apple" => 0.52""apple" => 0.52""pple" =>""ple","my_hash = Hash.newmy_hash["dog"] = "yellow"my_hash["cat"] = "black"my_hash["fish"] = "gold"my_hash.each do |key, value|    puts "#{key}: #{value}"end""y_hash = Hash.newmy_hash["dog"] = "yellow"my_hash["cat"] = "black"my_hash["fish"] = "gold"my_hash.each do |key, value|   ""_hash = Hash.newmy_hash["dog"] = "yellow"my_hash["cat"] = "black"my_hash["fish"] = "gold"my_ha""hash = Hash.newmy_hash["dog"] = "yellow"my_hash["cat"] = "black"my_ha""ash = Hash.newmy_hash["dog"] = "yellow"my_ha""sh = Hash.newmy_hash",,,"Data Structures, Meet Iteration",1. What You'll Be Building,"the 2falls 1on 1mainly 1in 1rain 1plain 1Spain 1","puts "Text please: "text = gets.chompwords = text.split(" ")frequencies = Hash.new(0)words.each { |word| frequencies[word] += 1 }frequencies = frequencies.sort_by {|a, b| b }frequencies.reverse!frequencies.each { |word, frequency| puts word + " " + frequency.to_s }""uts "Text please: "text = gets.chompwords = text.split(" ")frequencies = Hash.new(0)words.each { |word| frequencies[word] += 1 }frequencies = frequencies.sort_by {|a, b| b }frequencies.reverse!frequencies.each { |word, frequency| puts word + " " + frequency.t""ts "Text please: "text = gets.chompwords = text.split(" ")frequencies = Hash.new(0)words.each { |word| frequencies[word] += 1 }frequencies = frequencies.sort_by {|a, b| b }frequencies.reverse!frequencies.each { |word, frequency| puts word + " " + frequen""s "Text please: "text = gets.chompwords = text.split(" ")frequencies = Hash.new(0)words.each { |word| frequencies[word] += 1 }frequencies = frequencies.sort_by {|a, b| b }frequencies.reverse!frequencies.each { |word, frequency| puts word + " " + freq"" "Text please: "text = gets.chompwords = text.split(" ")frequencies = Hash.new(0)words.each { |word| frequencies[word] += 1 }frequencies = frequencies.sort_by {|a, b| b }frequencies.reverse!frequencies.each { |word, frequency| puts word + " " + fr"""Text please: "text = gets.chompwords = text.split(" ")frequencies = Hash.new(0)words.each { |word| frequencies[word] += 1 }frequencies = frequencies.sort_by {|a, b| b }frequencies.reverse!frequencies.each { |word, frequency| puts word + " " + f""Text please: "text = gets.chompwords = text.split(" ")frequencies = Hash.new(0)words.each { |word| frequencies[word] += 1 }frequencies = frequencies.sort_by {|a, b| b }frequencies.reverse!frequencies.each { |word, frequency| puts word + " " + f""ext please: "text = gets.chompwords = text.split(" ")frequencies = Hash.new(0)words.each { |word| frequencies[word] += 1 }frequencies = frequencies.sort_by {|a, b| b }frequencies.reverse!frequencies.each { |word, frequency| puts w""xt please: "text = gets.chompwords = text.split(" ")frequencies = Hash.new(0)words.each { |word| frequencies[word] += 1 }frequencies = frequencies.sort_by {|a, b| b }frequencies.reverse!frequencies.each { |word, frequ""t please: "text = gets.chompwords = text.split(" ")frequencies = Hash.new(0)words.each { |word| frequencies[word] += 1 }frequencies = frequencies.sort_by {|a, b| b }frequencies.reverse!frequencies.each { |"" please: "text = gets.chompwords = text.split(" ")frequencies = Hash.new(0)words.each { |word| frequencies[word] += 1 }frequencies = frequencies.sort_by {|a, b| b }frequencies.reverse!frequencie""please: "text = gets.chompwords = text.split(" ")frequencies = Hash.new(0)words.each { |word| frequencies[word] += 1 }frequencies = frequencies.sort_by {|a, b| b }frequencies.reverse!f""lease: "text = gets.chompwords = text.split(" ")frequencies = Hash.new(0)words.each { |word| frequencies[word] += 1 }frequencies = frequencies.sort_by {|a, b| b }frequencies.re""ease: "text = gets.chompwords = text.split(" ")frequencies = Hash.new(0)words.each { |word| frequencies[word] += 1 }frequencies = frequencies.sort_by {|a, b| b }frequen""ase: "text = gets.chompwords = text.split(" ")frequencies = Hash.new(0)words.each { |word| frequencies[word] += 1 }frequencies = frequencies.sort_by {|a, b| b }f""se: "text = gets.chompwords = text.split(" ")frequencies = Hash.new(0)words.each { |word| frequencies[word] += 1 }frequencies = frequencies.sort_by {|a, b| ""e: "text = gets.chompwords = text.split(" ")frequencies = Hash.new(0)words.each { |word| frequencies[word] += 1 }frequencies = frequencies.sort_by {|a,"": "text = gets.chompwords = text.split(" ")frequencies = Hash.new(0)words.each { |word| frequencies[word] += 1 }frequencies = frequencies.sort_by {"" "text = gets.chompwords = text.split(" ")frequencies = Hash.new(0)words.each { |word| frequencies[word] += 1 }frequencies = frequencies.sort_by"""text = gets.chompwords = text.split(" ")frequencies = Hash.new(0)words.each { |word| frequencies[word] += 1 }frequencies = frequencies.sort_b""text = gets.chompwords = text.split(" ")frequencies = Hash.new(0)words.each { |word| frequencies[word] += 1 }frequencies = frequencies.sort_b""text = gets.chompwords = text.split(" ")frequencies = Hash.new(0)words.each { |word| frequencies[word] ""ext = gets.chompwords = text.split(" ")frequencies = Hash.new(0)""xt = gets.chompwords = text.",,,"Data Structures, Meet Iteration",7. Iterating Over the Hash,"fruit = {  "apple" => 2,  "banana" => 3,  "cherry" => 5}fruit.each do |name, count|  puts name + " " + count.to_send""ruit = {  "apple" => 2,  "banana" => 3,  "cherry" => 5}fruit.each do |name, count|  puts name + " " + co""uit = {  "apple" => 2,  "banana" => 3,  "cherry" => 5}fruit.each do |name, count|  puts name""it = {  "apple" => 2,  "banana" => 3,  "cherry" => 5}fruit.each do |name, count| ""t = {  "apple" => 2,  "banana" => 3,  "cherry" => 5}fruit.each do |name,"" = {  "apple" => 2,  "banana" => 3,  "cherry" => 5}fruit.each d""= {  "apple" => 2,  "banana" => 3,  "cherry" => 5}fruit"" {  "apple" => 2,  "banana" => 3,  "cherry" => 5}""{  "apple" => 2,  "banana" => 3,  "cherry" =>""  "apple" => 2,  "banana" => 3,  "cherry""  "apple" => 2,  "banana" => 3,  "che"" "apple" => 2,  "banana" => 3,  "c"""apple" => 2,  "banana" => 3,  """apple" => 2,  "banana" => 3,  """pple" => 2,  "banana" => 3""ple" => 2,  "banana" ""le" => 2,  "banan""e" => 2,  "ban""" => 2,  "ba"" => 2,  "ba""=>","puts "Please type a short sentence or few."text = gets.chompwords = text.split(" ")frequencies = Hash.new(0)words.each do |word| frequencies[word] += 1endfrequencies = frequencies.sort_by do |key, value|    valueendfrequencies.reverse!frequencies.each do |key, value|    puts "#{key} #{value}"end""uts "Please type a short sentence or few."text = gets.chompwords = text.split(" ")frequencies = Hash.new(0)words.each do |word| frequencies[word] += 1endfrequencies = frequencies.sort_by do |key, value|    valueendfrequencies.reverse!frequencies.each do |key, value|    puts "#{key} #{value}""ts "Please type a short sentence or few."text = gets.chompwords = text.split(" ")frequencies = Hash.new(0)words.each do |word| frequencies[word] += 1endfrequencies = frequencies.sort_by do |key, value|    valueendfrequencies.reverse!frequencies.each do |key, value|    puts "#{key} #{va""s "Please type a short sentence or few."text = gets.chompwords = text.split(" ")frequencies = Hash.new(0)words.each do |word| frequencies[word] += 1endfrequencies = frequencies.sort_by do |key, value|    valueendfrequencies.reverse!frequencies.each do |key, value|    puts "#{key} #"" "Please type a short sentence or few."text = gets.chompwords = text.split(" ")frequencies = Hash.new(0)words.each do |word| frequencies[word] += 1endfrequencies = frequencies.sort_by do |key, value|    valueendfrequencies.reverse!frequencies.each do |key, value|    puts "#{key}"""Please type a short sentence or few."text = gets.chompwords = text.split(" ")frequencies = Hash.new(0)words.each do |word| frequencies[word] += 1endfrequencies = frequencies.sort_by do |key, value|    valueendfrequencies.reverse!frequencies.each do |key, value|    puts "#{key""Please type a short sentence or few."text = gets.chompwords = text.split(" ")frequencies = Hash.new(0)words.each do |word| frequencies[word] += 1endfrequencies = frequencies.sort_by do |key, value|    valueendfrequencies.reverse!frequencies.each do |key, value|    puts "#{key""lease type a short sentence or few."text = gets.chompwords = text.split(" ")frequencies = Hash.new(0)words.each do |word| frequencies[word] += 1endfrequencies = frequencies.sort_by do |key, value|    valueendfrequencies.reverse!frequencies.""ease type a short sentence or few."text = gets.chompwords = text.split(" ")frequencies = Hash.new(0)words.each do |word| frequencies[word] += 1endfrequencies = frequencies.sort_by do |key, value|    valueend""ase type a short sentence or few."text = gets.chompwords = text.split(" ")frequencies = Hash.new(0)words.each do |word| frequencies[word] += 1endfrequencies = frequencies.sort""se type a short sentence or few."text = gets.chompwords = text.split(" ")frequencies = Hash.new(0)words.each do |word| frequencies[word] += 1en""e type a short sentence or few."text = gets.chompwords = text.split(" ")frequencies = Hash.new(0)words.each do "" type a short sentence or few."text = gets.chompwords = text.split(" ")frequencie""type a short sentence or few."text = gets.chompwords""ype a short sentence or f",,,A Method to the Madness,1. Why Methods?,assigning specific tasks to separate methods = separation of concerns,"def prime(n)  puts "That's not an integer." unless n.is_a? Integer  is_prime = true  for i in 2..n-1    if n % i == 0      is_prime = false    end  end  if is_prime    puts "#{n} is prime!"  else    puts "#{n} is not prime."  endendprime(2)prime(9)prime(11)prime(51)prime(97)""ef prime(n)  puts "That's not an integer." unless n.is_a? Integer  is_prime = true  for i in 2..n-1    if n % i == 0      is_prime = false    end  end  if is_prime    puts "#{n} is prime!"  else    puts "#{n} is not prime."  endendprime(2)prime(9)prime(11)""f prime(n)  puts "That's not an integer." unless n.is_a? Integer  is_prime = true  for i in 2..n-1    if n % i == 0      is_prime = false    end  end  if is_prime    puts "#{n} is prime!"  else    puts "#{n} is not prime."  endendprime(2)"" prime(n)  puts "That's not an integer." unless n.is_a? Integer  is_prime = true  for i in 2..n-1    if n % i == 0      is_prime = false    end  end  if is_prime    puts "#{n} is prime!"  else    puts "#{n} is not prime." ""prime(n)  puts "That's not an integer." unless n.is_a? Integer  is_prime = true  for i in 2..n-1    if n % i == 0      is_prime = false    end  end  if is_prime    puts "#{n} is prime!"  else    puts "#{n}""rime(n)  puts "That's not an integer." unless n.is_a? Integer  is_prime = true  for i in 2..n-1    if n % i == 0      is_prime = false    end  end  if is_prime    puts "#{n} is prime!"  els""ime(n)  puts "That's not an integer." unless n.is_a? Integer  is_prime = true  for i in 2..n-1    if n % i == 0      is_prime = false    end  end  if is_prime    puts "#{n} i""me(n)  puts "That's not an integer." unless n.is_a? Integer  is_prime = true  for i in 2..n-1    if n % i == 0      is_prime = false    end  end  if is_prime  ""e(n)  puts "That's not an integer." unless n.is_a? Integer  is_prime = true  for i in 2..n-1    if n % i == 0      is_prime = false    end  end  i""(n)  puts "That's not an integer." unless n.is_a? Integer  is_prime = true  for i in 2..n-1    if n % i == 0      is_prime = false    e""n)  puts "That's not an integer." unless n.is_a? Integer  is_prime = true  for i in 2..n-1    if n % i == 0      is_prime = "")  puts "That's not an integer." unless n.is_a? Integer  is_prime = true  for i in 2..n-1    if n % i == 0      i""  puts "That's not an integer." unless n.is_a? Integer  is_prime = true  for i in 2..n-1    if n % i == ""  puts "That's not an integer." unless n.is_a? Integer  is_prime = true  for i in 2..n-1    if n"" puts "That's not an integer." unless n.is_a? Integer  is_prime = true  for i in 2..n-1 ""puts "That's not an integer." unless n.is_a? Integer  is_prime = true  for i in 2.""uts "That's not an integer." unless n.is_a? Integer  is_prime = true  for i ""ts "That's not an integer." unless n.is_a? Integer  is_prime = true  fo""s "That's not an integer." unless n.is_a? Integer  is_prime = true "" "That's not an integer." unless n.is_a? Integer  is_prime = true"""That's not an integer." unless n.is_a? Integer  is_prime = tru""That's not an integer." unless n.is_a? Integer  is_prime = tru""hat's not an integer." unless n.is_a? In""at's not an intege",,,A Method to the Madness,2. Method Syntax,"pass parameterstake argumentsbody = actionex.def welcome  puts "Welcome to Ruby!"end""ass parameterstake a","def puts_1_to_10  (1..10).each { |i| puts i }endputs_1_to_10 # Ignore this for now. We'll explain it soon!",,,A Method to the Madness,3. Create Your Own,"def method_name  # Do something!end","def greeting    puts "Welcome, to the site!"end""ef greeting    puts "Welc""f gr",,,A Method to the Madness,4. Call It!,,"def array_of_10  puts (1..10).to_aendarray_of_10",,,More Complex Methods,5. Parameters and Arguments,"If a method takes arguments, we say it accepts or expects those arguments.  The argument is the piece of code you actually put between the method's parentheses when you call it, and the parameter is the name you put between the method's parentheses when you define it. def square(n)  puts n ** 2endsquare(12)# ==> prints "144"""f a ","def cubertino n  puts n ** 3endcubertino 8",,,More Complex Methods,6. Splat!,"def friend(name):  puts "My friend is " + name + "."endThe solution: splat arguments. Splat arguments are arguments preceded by a *, which signals to Ruby: "Hey Ruby, I don't know how many arguments there are about to be, but it could be more than one."""ef friend(name):  puts "My friend is " + name + "."endThe solution: splat arguments. Splat arguments are arguments preceded by a *, which signals to Ruby: "Hey Ruby, I don't know how many arguments there are about to be, but it""f friend(name):  puts "My friend is " + name + "."endThe solution: splat arguments. Splat arguments are arguments preceded by a *, which signals to Ruby: "Hey Ruby, I don't know how many arguments there"" friend(name):  puts "My friend is " + name + "."endThe solution: splat arguments. Splat arguments are arguments preceded by a *, which signals to Ruby: "Hey Ruby, I don't know h""friend(name):  puts "My friend is " + name + "."endThe solution: splat arguments. Splat arguments are arguments preceded by a *, which signals to Ruby: "He""riend(name):  puts "My friend is " + name + "."endThe solution: splat arguments. Splat arguments are arguments preceded by a *, which""iend(name):  puts "My friend is " + name + "."endThe solution: splat arguments. Splat arguments are arguments pr""end(name):  puts "My friend is " + name + "."endThe solution: splat arguments. Splat argumen""nd(name):  puts "My friend is " + name + "."endThe solution: splat argume""d(name):  puts "My friend is " + name + "."endThe solut""(name):  puts "My friend is " + name + ".""name):  puts "My friend i""ame):  put","def what_up(greeting, *bros)  bros.each { |bro| puts "#{greeting}, #{bro}!" }end what_up("What up", "Justin", "Ben", "Kevin Sorbo")""ef what_up(greeting, *bros)  bros.each { |bro| puts "#{greeting}, #{bro}!" }en""f what_up(greeting, *bros)",,,More Complex Methods,7. Let’s Learn Return,"def double(n)  return n * 2endoutput = double(6)output += 2puts output","def add(n1, n2)    return n1 + n2endoutput = add(5, 5)puts output",,,More Complex Methods,8. Practice Makes Perfect,"def by_five?(n)  return n % 5 == 0end","def greeter(name)    puts nameendgreeter("adam")def by_three?(number)    if number % 3 == 0        return true    else        return false    endendby_three?(25)""ef greeter(name)    puts nameendgreeter("adam")def by_three?(number)    if number % 3 == 0        return true    else   ""f greeter(name)    puts nameendgreeter("adam")def by_three?(number)    if numb"" greeter(name)    puts nameendgreeter(",,,The Return of Blocks,9. Blocks Are Like Nameless Methods,"i.e. [array].sort(), "string".downcase(), and so onBlocks can be defined with either the keywords do and end or with curly braces ({})."".e. [array].sort(), "string".downcase(), and so onBlocks can be defined with either the keywords do and end or wi""e. [array].sort(), "string".downcase(), and so onBlocks can be defined with either the keywo"". [array].sort(), "string".downcase(), and so onBlocks can be defined wi"" [array].sort(), "string".downcase(), and so onBlocks""[array].sort(), "string".downcase(), ""array].sort(), "stri""rray","1.times do  puts "I'm a code block!"end1.times { puts "As am I!" }"".times do  puts "I'm a code block!"end1.times {""times do  puts "I'm a code block""imes do  puts """",,,The Return of Blocks,10. How Blocks Differ From Methods,,"# method that capitalizes a worddef capitalize(string)   puts "#{string[0].upcase}#{string[1..-1]}"endcapitalize("ryan") # prints "Ryan"capitalize("jane") # prints "Jane"# block that capitalizes each string in the array["ryan", "jane"].each {|string| puts "#{string[0].upcase}#{string[1..-1]}"} # prints "Ryan", then "Jane""" method that capitalizes a worddef capitalize(string)   puts "#{string[0].upcase}#{string[1..-1]}"endcapitalize("ryan") # prints "Ryan"capitalize("jane") # prints "Jane"# block that capitalizes each string in the array["ryan", "jane"].each {|string| puts "#{""method that capitalizes a worddef capitalize(string)   puts "#{string[0].upcase}#{string[1..-1]}"endcapitalize("ryan") # prints "Ryan"capitalize("jane") # prints "Jane"# block that capitalizes ea""ethod that capitalizes a worddef capitalize(string)   puts "#{string[0].upcase}#{string[1..-1]}"endcapitalize("ryan") # prints "Ryan"c""thod that capitalizes a worddef capitalize(string)   puts "#{string[0].upcas""hod that capitali",,,The Return of Blocks,11. Using Code Blocks,"Passing a block to a method is a great way of abstracting certain tasks from the method and defining those tasks when we call the method. Abstraction is an important idea in computer science, and you can think of it as meaning "making something simpler.""assing a block to a metho","# The block, {|i| puts i}, is passed the current# array item each time it is evaluated. This block# prints the item. [1, 2, 3, 4, 5].each { |i| puts i }# This block prints the number 5 for each item.# (It chooses to ignore the passed item, which is allowed.)[1, 2, 3, 4, 5].each { |i| puts i * 5 }",,,Sorting With Blocks,12. Introduction to Sorting,,"my_array = [3, 4, 8, 7, 1, 6, 5, 9, 2]# Call the sort! method on my_array below.# my_array should then equal [1, 2, 3, 4, 5, 6, 7, 8, 9].my_array.sort!print my_array",,,Sorting With Blocks,13. Foundations,,"# library sorting codebooks = ["Charlie and the Chocolate Factory", "War and Peace", "Utopia", "A Brief History of Time", "A Wrinkle in Time"]# How might we sort! the books in alphabetical order? (Hint, hint)books.sort!print books"" library sorting codebooks = ["Charlie and the Chocolate Factory", "War and Peace", "Utopia", "A Brief History of Time", "A Wrinkle in Time"]# How might we sort! the books in alphabetical order? (Hint,""library sorting codebooks = ["Charlie and the Chocolate Factory", "War and Peace", "Utopia", "A Brief History of Time", "A Wrinkle in Time"]# How might we sort! the book""ibrary sorting codebooks = ["Charlie and the Chocolate Factory", "War and Peace", "Utopia", "A Brief History of Time", "A Wrinkle in Time"]""brary sorting codebooks = ["Charlie and the Chocolate Factory", "War and Peace", "Utopia", "A Brief History of""rary sorting codebooks = ["Charlie and the Chocolate Factory", "War and Peace", """ary sorting codebooks = ["Charlie and the Chocolate F""ry sorting codebooks = ["C""y",,,Sorting With Blocks,14. The Combined Comparison Operator,"combined comparison operator to compare two Ruby objects. The combined comparison operator looks like this: <=>. It returns 0 if the first operand (item to be compared) equals the second, 1 if first operand is greater than the second, and -1 if the first operand is less than the second.","book_1 = "A Wrinkle in Time"book_2 = "A Brief History of Time"book_1 <=> book_2""ook_1 = "A Wrinkle in Time"book_2 = "A Brief History of Time"book_1 <""ok_1 = "A Wrinkle in Time"book_2 = "A Brief History of Time"""k_1 = "A Wrinkle in Time"book_2 = "A Brief History of ""_1 = "A Wrinkle in Time"book_2 = "A Brief Histo""1 = "A Wrinkle in Time"book_2 = "A Brief "" = "A Wrinkle in Time"book_2 = "A Br""= "A Wrinkle in Time"book_2 = "A"" "A Wrinkle in Time"book_2 = """A Wrinkle in Time"book_2 =""A Wrinkle in Time"book_2 ="" Wrinkle i",,,Sorting With Blocks,15. Getting Technical,descending order? ,"books = ["Charlie and the Chocolate Factory", "War and Peace", "Utopia", "A Brief History of Time", "A Wrinkle in Time"]# To sort our books in ascending order, in-placebooks.sort! { |firstBook, secondBook| firstBook <=> secondBook }# Sort your books in descending order, in-place belowbooks.sort! { |firstBook, secondBook| secondBook <=> firstBook }""ooks = ["Charlie and the Chocolate Factory", "War and Peace", "Utopia", "A Brief History of Time", "A Wrinkle in Time"]# To sort our books in ascending order, in-placebooks.sort! { |firstBook, secondBook| firstBook <=> secondBook }# Sort your books in descending order, in-place belowbooks.sort! { |firstBook, secondBook| secondBook <=> fi""oks = ["Charlie and the Chocolate Factory", "War and Peace", "Utopia", "A Brief History of Time", "A Wrinkle in Time"]# To sort our books in ascending order, in-placebooks.sort! { |firstBook, secondBook| firstBook <=> secondBook }# Sort your books in descending order, in-place belowbooks.sort! { |firstBook, secondBook| secondBoo""ks = ["Charlie and the Chocolate Factory", "War and Peace", "Utopia", "A Brief History of Time", "A Wrinkle in Time"]# To sort our books in ascending order, in-placebooks.sort! { |firstBook, secondBook| firstBook <=> secondBook }# Sort your books in descending order, in-place belowbooks.sort! { |firstBook, secondBook| se""s = ["Charlie and the Chocolate Factory", "War and Peace", "Utopia", "A Brief History of Time", "A Wrinkle in Time"]# To sort our books in ascending order, in-placebooks.sort! { |firstBook, secondBook| firstBook <=> secondBook }# Sort your books in descending order, in-place belowbooks.sort! { |firstBook, secondBo"" = ["Charlie and the Chocolate Factory", "War and Peace", "Utopia", "A Brief History of Time", "A Wrinkle in Time"]# To sort our books in ascending order, in-placebooks.sort! { |firstBook, secondBook| firstBook <=> secondBook }# Sort your books in descending order, in-place belowbooks.sort! { |firstBook, sec""= ["Charlie and the Chocolate Factory", "War and Peace", "Utopia", "A Brief History of Time", "A Wrinkle in Time"]# To sort our books in ascending order, in-placebooks.sort! { |firstBook, secondBook| firstBook <=> secondBook }# Sort your books in descending order, in-place belowbooks.sort! { |firstBook,"" ["Charlie and the Chocolate Factory", "War and Peace", "Utopia", "A Brief History of Time", "A Wrinkle in Time"]# To sort our books in ascending order, in-placebooks.sort! { |firstBook, secondBook| firstBook <=> secondBook }# Sort your books in descending order, in-place belowbooks.sort! { |firstBo""["Charlie and the Chocolate Factory", "War and Peace", "Utopia", "A Brief History of Time", "A Wrinkle in Time"]# To sort our books in ascending order, in-placebooks.sort! { |firstBook, secondBook| firstBook <=> secondBook }# Sort your books in descending order, in-place belowbooks.sort! { |first"""Charlie and the Chocolate Factory", "War and Peace", "Utopia", "A Brief History of Time", "A Wrinkle in Time"]# To sort our books in ascending order, in-placebooks.sort! { |firstBook, secondBook| firstBook <=> secondBook }# Sort your books in descending order, in-place belowbooks.sort! { |firs""Charlie and the Chocolate Factory", "War and Peace", "Utopia", "A Brief History of Time", "A Wrinkle in Time"]# To sort our books in ascending order, in-placebooks.sort! { |firstBook, secondBook| firstBook <=> secondBook }# Sort your books in descending order, in-place belowbooks.sort! { |firs""harlie and the Chocolate Factory", "War and Peace", "Utopia", "A Brief History of Time", "A Wrinkle in Time"]# To sort our books in ascending order, in-placebooks.sort! { |firstBook, secondBook| firstBook <=> secondBook }# Sort your books in descending order, i""arlie and the Chocolate Factory", "War and Peace", "Utopia", "A Brief History of Time", "A Wrinkle in Time"]# To sort our books in ascending order, in-placebooks.sort! { |firstBook, secondBook| firstBook <=> secondBook }# Sort y""rlie and the Chocolate Factory", "War and Peace", "Utopia", "A Brief History of Time", "A Wrinkle in Time"]# To sort our books in ascending order, in-placebooks.sort! { |firstBook, secondBook| first""lie and the Chocolate Factory", "War and Peace", "Utopia", "A Brief History of Time", "A Wrinkle in Time"]# To sort our books in ascending order, in-placebooks.sort! {""ie and the Chocolate Factory", "War and Peace", "Utopia", "A Brief History of Time", "A Wrinkle in Time"]# To sort our books in ascending ""e and the Chocolate Factory", "War and Peace", "Utopia", "A Brief History of Time", "A Wrinkle in Time"]# To "" and the Chocolate Factory", "War and Peace", "Utopia", "A Brief History of Time", ""and the Chocolate Factory", "War and Peace", "Utopia", """nd the Chocolate Factory", "Wa""d the",,,Review,16. Basic Methods,"def double(n)  return n * 2end","def welcome(msg)    puts msgendwelcome("Hello, Everyone!")""ef welcome(msg)  ",,,Review,17. Methods With Arguments,"def double(n)  return n * 2end","def welcome(name)    return "Hello, #{name}"endwelcome("Adam")""ef welcome(name)    return "Hello, ""f welco",,,Review,18. Blocks,"numbers = [5, 2, 8]sum = 0numbers.each do |n|  sum += nendputs sum","my_array = [1, 2, 3, 4, 5]my_array.each do |n|    puts n * nend",,,Review,19. Sorting,"books.sort! do |firstBook, secondBook|  firstBook <=> secondBookend","fruits = ["orange", "apple", "banana", "pear", "grapes"]fruits.sort! do |fruit1, fruit2|    fruit2 <=> fruit1end""ruits = ["orange", "apple", "banana", "pear", "grapes"]fruits.sort! do |fruit1, fruit2|    fruit2 <=> ""uits = ["orange", "apple", "banana", "pear", "grapes"]fruits.sort! do |fruit1, fruit2|    fr""its = ["orange", "apple", "banana", "pear", "grapes"]fruits.sort! do |fruit1, fruit2""ts = ["orange", "apple", "banana", "pear", "grapes"]fruits.sort! do |fruit1,""s = ["orange", "apple", "banana", "pear", "grapes"]fruits.sort! do |f"" = ["orange", "apple", "banana", "pear", "grapes"]fruits.sort! ""= ["orange", "apple", "banana", "pear", "grapes"]fruits.so"" ["orange", "apple", "banana", "pear", "grapes"]fruits""["orange", "apple", "banana", "pear", "grapes"]frui"""orange", "apple", "banana", "pear", "grapes"]fru""orange", "apple", "banana", "pear", "grapes"]fru""range", "apple", "banana", "pear", "grapes"""ange", "apple", "banana", "pear", "gr""nge", "apple", "banana", "pear",""ge", "apple", "banana", "pea""e", "apple", "banana", "p""", "apple", "banana", """, "apple", "banana", """ "apple", "banana","""apple", "banana"""apple", "banana"""pple", "ba""ple",""l",,,Methodical Sorting,1. What You'll Be Building,,"def alphabetize(arr, rev=false)  if rev    arr.sort { |item1, item2| item2 <=> item1 }  else    arr.sort { |item1, item2| item1 <=> item2 }  endendbooks = ["Heart of Darkness", "Code Complete", "The Lorax", "The Prophet", "Absalom, Absalom!"]puts "A-Z: #{alphabetize(books)}"puts "Z-A: #{alphabetize(books, true)}"""ef alphabetize(arr, rev=false)  if rev    arr.sort { |item1, item2| item2 <=> item1 }  else    arr.sort { |item1, item2| item1 <=> item2 }  endendbooks ",,,Methodical Sorting,2. Defining Our Method,"First, we'll need to define our alphabetize method.","def alphabetize(x)    #endalphabetize()",,,Methodical Sorting,3. Default Parameters ,"def alphabetize(arr, rev=false)alphabetize(books)","def alphabetize(arr, rev=false)    #endalphabetize()",,,Methodical Sorting,4. Sorting,"numbers = [5, 1, 3, 8]numbers.sort!puts numbers","def alphabetize(arr, rev=false)    arr.sort! endnumbers = [1,5,2,8,4,9,3,6,7]puts "#{alphabetize(numbers)}"""ef alphabetize(arr, rev=",,,Methodical Sorting,5. Sorting With Control Flow,"numbers = [1, 2, 3, 4, 5]numbers.reverse!puts numbers","def alphabetize(arr, rev=false)    if rev        arr.reverse!    else        arr.sort!    endendnumbers = [1,5,2,8,4,9,3,6,7]puts "#{alphabetize(numbers)}"""ef alphabetize(arr, rev=",,,A Box Office Hash,1. What You'll Be Building,"movies = {  Memento: 3,  Primer: 4,  Ishtar: 1}puts "What would you like to do?"puts "-- Type 'add' to add a movie."puts "-- Type 'update' to update a movie."puts "-- Type 'display' to display all movies."puts "-- Type 'delete' to delete a movie."choice = gets.chomp.downcasecase choicewhen 'add'  puts "What movie do you want to add?"  title = gets.chomp  if movies[title.to_sym].nil?    puts "What's the rating? (Type a number 0 to 4.)"    rating = gets.chomp    movies[title.to_sym] = rating.to_i    puts "#{title} has been added with a rating of #{rating}."  else    puts "That movie already exists! Its rating is #{movies[title.to_sym]}."  endwhen 'update'  puts "What movie do you want to update?"  title = gets.chomp  if movies[title.to_sym].nil?    puts "Movie not found!"  else    puts "What's the new rating? (Type a number 0 to 4.)"    rating = gets.chomp    movies[title.to_sym] = rating.to_i    puts "#{title} has been updated with new rating of #{rating}."  endwhen 'display'  movies.each do |movie, rating|    puts "#{movie}: #{rating}"  endwhen 'delete'  puts "What movie do you want to delete?"  title = gets.chomp  if movies[title.to_sym].nil?    puts "Movie not found!"  else    movies.delete(title.to_sym)    puts "#{title} has been removed."  endelse  puts "Sorry, I didn't understand you."end""ovies = {  Memento: 3,  Primer: 4,  Ishtar: 1}puts "What would you like to do?"puts "-- Type 'add' to add a movie."puts "-- Type 'update' to update a movie."puts "-- Type 'display' to display all movies."puts "-- Type 'delete' to delete a movie."choice = gets.chomp.downcasecase choicewhen 'add'  puts "What movie do you want to add?"  title = gets.chomp  if movies[title.to_sym].nil?    puts "What's the rating? (Type a number 0 to 4.)"    rating = gets.chomp    movies[title.to_sym] = rating.to_i    puts "#{title} has been added with a rating of #{rating}."  else    puts "That movie already exists! Its rating is #{movies[title.to_sym]}."  endwhen 'update'  puts "What movie do you want to update?"  title = gets.chomp  if movies[title.to_sym].nil?    puts "Movie not found!"  else    puts "What's the new rating? (Type a number 0 to 4.)"    rating = gets.chomp    movies[title.to_sym] = rating.to_i    puts "#{title} has been updated with new rating of #{rating}."  endwhen 'display'  movies.each do |movie, rating|    puts "#{movie}: #{rating}"  endwhen 'delete'  puts "What movie do you want to delete?"  title = gets.chomp  if movies[title.to_sym].nil?    puts "Movie not found!"  else    movies.delete(title.to_sym)    puts "#{title} has been removed""vies = {  Memento: 3,  Primer: 4,  Ishtar: 1}puts "What would you like to do?"puts "-- Type 'add' to add a movie."puts "-- Type 'update' to update a movie."puts "-- Type 'display' to display all movies."puts "-- Type 'delete' to delete a movie."choice = gets.chomp.downcasecase choicewhen 'add'  puts "What movie do you want to add?"  title = gets.chomp  if movies[title.to_sym].nil?    puts "What's the rating? (Type a number 0 to 4.)"    rating = gets.chomp    movies[title.to_sym] = rating.to_i    puts "#{title} has been added with a rating of #{rating}."  else    puts "That movie already exists! Its rating is #{movies[title.to_sym]}."  endwhen 'update'  puts "What movie do you want to update?"  title = gets.chomp  if movies[title.to_sym].nil?    puts "Movie not found!"  else    puts "What's the new rating? (Type a number 0 to 4.)"    rating = gets.chomp    movies[title.to_sym] = rating.to_i    puts "#{title} has been updated with new rating of #{rating}."  endwhen 'display'  movies.each do |movie, rating|    puts "#{movie}: #{rating}"  endwhen 'delete'  puts "What movie do you want to delete?"  title = gets.chomp  if movies[title.to_sym].nil?    puts "Movie not found!"  else    movies""ies = {  Memento: 3,  Primer: 4,  Ishtar: 1}puts "What would you like to do?"puts "-- Type 'add' to add a movie."puts "-- Type 'update' to update a movie."puts "-- Type 'display' to display all movies."puts "-- Type 'delete' to delete a movie."choice = gets.chomp.downcasecase choicewhen 'add'  puts "What movie do you want to add?"  title = gets.chomp  if movies[title.to_sym].nil?    puts "What's the rating? (Type a number 0 to 4.)"    rating = gets.chomp    movies[title.to_sym] = rating.to_i    puts "#{title} has been added with a rating of #{rating}."  else    puts "That movie already exists! Its rating is #{movies[title.to_sym]}."  endwhen 'update'  puts "What movie do you want to update?"  title = gets.chomp  if movies[title.to_sym].nil?    puts "Movie not found!"  else    puts "What's the new rating? (Type a number 0 to 4.)"    rating = gets.chomp    movies[title.to_sym] = rating.to_i    puts "#{title} has been updated with new rating of #{rating}."  endwhen 'display'  movies.each do |movie, rating|    puts "#{movie}: #{rating}"  endwhen 'delete'  puts "What movie do you want to delete?"  title = gets.chomp  if movies[title.to""es = {  Memento: 3,  Primer: 4,  Ishtar: 1}puts "What would you like to do?"puts "-- Type 'add' to add a movie."puts "-- Type 'update' to update a movie."puts "-- Type 'display' to display all movies."puts "-- Type 'delete' to delete a movie."choice = gets.chomp.downcasecase choicewhen 'add'  puts "What movie do you want to add?"  title = gets.chomp  if movies[title.to_sym].nil?    puts "What's the rating? (Type a number 0 to 4.)"    rating = gets.chomp    movies[title.to_sym] = rating.to_i    puts "#{title} has been added with a rating of #{rating}."  else    puts "That movie already exists! Its rating is #{movies[title.to_sym]}."  endwhen 'update'  puts "What movie do you want to update?"  title = gets.chomp  if movies[title.to_sym].nil?    puts "Movie not found!"  else    puts "What's the new rating? (Type a number 0 to 4.)"    rating = gets.chomp    movies[title.to_sym] = rating.to_i    puts "#{title} has been updated with new rating of #{rating}."  endwhen 'display'  movies.each do |movie, rating|    puts "#{movie}: #{rating}"  endwhen 'delete'  puts "What movie do you wan""s = {  Memento: 3,  Primer: 4,  Ishtar: 1}puts "What would you like to do?"puts "-- Type 'add' to add a movie."puts "-- Type 'update' to update a movie."puts "-- Type 'display' to display all movies."puts "-- Type 'delete' to delete a movie."choice = gets.chomp.downcasecase choicewhen 'add'  puts "What movie do you want to add?"  title = gets.chomp  if movies[title.to_sym].nil?    puts "What's the rating? (Type a number 0 to 4.)"    rating = gets.chomp    movies[title.to_sym] = rating.to_i    puts "#{title} has been added with a rating of #{rating}."  else    puts "That movie already exists! Its rating is #{movies[title.to_sym]}."  endwhen 'update'  puts "What movie do you want to update?"  title = gets.chomp  if movies[title.to_sym].nil?    puts "Movie not found!"  else    puts "What's the new rating? (Type a number 0 to 4.)"    rating = gets.chomp    movies[title.to_sym] = rating.to_i    puts "#{title} has been updated with new rating of #{rating}."  endwhen 'display'  movies.each do |movie, rating|    puts "#{movie}: #{rati"" = {  Memento: 3,  Primer: 4,  Ishtar: 1}puts "What would you like to do?"puts "-- Type 'add' to add a movie."puts "-- Type 'update' to update a movie."puts "-- Type 'display' to display all movies."puts "-- Type 'delete' to delete a movie."choice = gets.chomp.downcasecase choicewhen 'add'  puts "What movie do you want to add?"  title = gets.chomp  if movies[title.to_sym].nil?    puts "What's the rating? (Type a number 0 to 4.)"    rating = gets.chomp    movies[title.to_sym] = rating.to_i    puts "#{title} has been added with a rating of #{rating}."  else    puts "That movie already exists! Its rating is #{movies[title.to_sym]}."  endwhen 'update'  puts "What movie do you want to update?"  title = gets.chomp  if movies[title.to_sym].nil?    puts "Movie not found!"  else    puts "What's the new rating? (Type a number 0 to 4.)"    rating = gets.chomp    movies[title.to_sym] = rating.to_i    puts "#{title} has been updated with new rating of #{rating}."  endwhen 'display'  movi""= {  Memento: 3,  Primer: 4,  Ishtar: 1}puts "What would you like to do?"puts "-- Type 'add' to add a movie."puts "-- Type 'update' to update a movie."puts "-- Type 'display' to display all movies."puts "-- Type 'delete' to delete a movie."choice = gets.chomp.downcasecase choicewhen 'add'  puts "What movie do you want to add?"  title = gets.chomp  if movies[title.to_sym].nil?    puts "What's the rating? (Type a number 0 to 4.)"    rating = gets.chomp    movies[title.to_sym] = rating.to_i    puts "#{title} has been added with a rating of #{rating}."  else    puts "That movie already exists! Its rating is #{movies[title.to_sym]}."  endwhen 'update'  puts "What movie do you want to update?"  title = gets.chomp  if movies[title.to_sym].nil?    puts "Movie not found!"  else    puts "What's the new rating? (Type a number 0 to 4.)"    rating = gets.chomp    movies[title.to_sym] = rating.to_i    puts "#{title} has been updated with n"" {  Memento: 3,  Primer: 4,  Ishtar: 1}puts "What would you like to do?"puts "-- Type 'add' to add a movie."puts "-- Type 'update' to update a movie."puts "-- Type 'display' to display all movies."puts "-- Type 'delete' to delete a movie."choice = gets.chomp.downcasecase choicewhen 'add'  puts "What movie do you want to add?"  title = gets.chomp  if movies[title.to_sym].nil?    puts "What's the rating? (Type a number 0 to 4.)"    rating = gets.chomp    movies[title.to_sym] = rating.to_i    puts "#{title} has been added with a rating of #{rating}."  else    puts "That movie already exists! Its rating is #{movies[title.to_sym]}."  endwhen 'update'  puts "What movie do you want to update?"  title = gets.chomp  if movies[title.to_sym].nil?    puts "Movie not found!"  else    puts "What's the new rating? (Type a number 0 to 4.)"    rating = gets.chomp    movies[title.to_sym] = rat""{  Memento: 3,  Primer: 4,  Ishtar: 1}puts "What would you like to do?"puts "-- Type 'add' to add a movie."puts "-- Type 'update' to update a movie."puts "-- Type 'display' to display all movies."puts "-- Type 'delete' to delete a movie."choice = gets.chomp.downcasecase choicewhen 'add'  puts "What movie do you want to add?"  title = gets.chomp  if movies[title.to_sym].nil?    puts "What's the rating? (Type a number 0 to 4.)"    rating = gets.chomp    movies[title.to_sym] = rating.to_i    puts "#{title} has been added with a rating of #{rating}."  else    puts "That movie already exists! Its rating is #{movies[title.to_sym]}."  endwhen 'update'  puts "What movie do you want to update?"  title = gets.chomp  if movies[title.to_sym].nil?    puts "Movie not found!"  else    puts "What's the new rating? (Type a number 0 to 4.)"    ""  Memento: 3,  Primer: 4,  Ishtar: 1}puts "What would you like to do?"puts "-- Type 'add' to add a movie."puts "-- Type 'update' to update a movie."puts "-- Type 'display' to display all movies."puts "-- Type 'delete' to delete a movie."choice = gets.chomp.downcasecase choicewhen 'add'  puts "What movie do you want to add?"  title = gets.chomp  if movies[title.to_sym].nil?    puts "What's the rating? (Type a number 0 to 4.)"    rating = gets.chomp    movies[title.to_sym] = rating.to_i    puts "#{title} has been added with a rating of #{rating}."  else    puts "That movie already exists! Its rating is #{movies[title.to_sym]}."  endwhen 'update'  puts "What movie do you want to update?"  title = gets.chomp  if movies[title.to_sym].nil?    puts "Movie not found!"  else    puts "Wha""  Memento: 3,  Primer: 4,  Ishtar: 1}puts "What would you like to do?"puts "-- Type 'add' to add a movie."puts "-- Type 'update' to update a movie."puts "-- Type 'display' to display all movies."puts "-- Type 'delete' to delete a movie."choice = gets.chomp.downcasecase choicewhen 'add'  puts "What movie do you want to add?"  title = gets.chomp  if movies[title.to_sym].nil?    puts "What's the rating? (Type a number 0 to 4.)"    rating = gets.chomp    movies[title.to_sym] = rating.to_i    puts "#{title} has been added with a rating of #{rating}."  else    puts "That movie already exists! Its rating is #{movies[title.to_sym]}."  endwhen 'update'  puts "What movie do you want to update?"  title = gets.chomp  if movies[title.to_sym].nil?"" Memento: 3,  Primer: 4,  Ishtar: 1}puts "What would you like to do?"puts "-- Type 'add' to add a movie."puts "-- Type 'update' to update a movie."puts "-- Type 'display' to display all movies."puts "-- Type 'delete' to delete a movie."choice = gets.chomp.downcasecase choicewhen 'add'  puts "What movie do you want to add?"  title = gets.chomp  if movies[title.to_sym].nil?    puts "What's the rating? (Type a number 0 to 4.)"    rating = gets.chomp    movies[title.to_sym] = rating.to_i    puts "#{title} has been added with a rating of #{rating}."  else    puts "That movie already exists! Its rating is #{movies[title.to_sym]}."  endwhen 'update'  puts "What movie do you want to update?"  tit""Memento: 3,  Primer: 4,  Ishtar: 1}puts "What would you like to do?"puts "-- Type 'add' to add a movie."puts "-- Type 'update' to update a movie."puts "-- Type 'display' to display all movies."puts "-- Type 'delete' to delete a movie."choice = gets.chomp.downcasecase choicewhen 'add'  puts "What movie do you want to add?"  title = gets.chomp  if movies[title.to_sym].nil?    puts "What's the rating? (Type a number 0 to 4.)"    rating = gets.chomp    movies[title.to_sym] = rating.to_i    puts "#{title} has been added with a rating of #{rating}."  else    puts "That movie already exists! Its rating is #{movies[title.to_sym]}."  endwhen 'update'  ""emento: 3,  Primer: 4,  Ishtar: 1}puts "What would you like to do?"puts "-- Type 'add' to add a movie."puts "-- Type 'update' to update a movie."puts "-- Type 'display' to display all movies."puts "-- Type 'delete' to delete a movie."choice = gets.chomp.downcasecase choicewhen 'add'  puts "What movie do you want to add?"  title = gets.chomp  if movies[title.to_sym].nil?    puts "What's the rating? (Type a number 0 to 4.)"    rating = gets.chomp    movies[title.to_sym] = rating.to_i    puts "#{title} has been added with a rating of #{rating}."  else    puts "That movie already exists! Its rating is #{m""mento: 3,  Primer: 4,  Ishtar: 1}puts "What would you like to do?"puts "-- Type 'add' to add a movie."puts "-- Type 'update' to update a movie."puts "-- Type 'display' to display all movies."puts "-- Type 'delete' to delete a movie."choice = gets.chomp.downcasecase choicewhen 'add'  puts "What movie do you want to add?"  title = gets.chomp  if movies[title.to_sym].nil?    puts "What's the rating? (Type a number 0 to 4.)"    rating = gets.chomp    movies[title.to_sym] = rating.to_i    puts "#{title} has been added with a rating of #{rating}."  else    puts """ento: 3,  Primer: 4,  Ishtar: 1}puts "What would you like to do?"puts "-- Type 'add' to add a movie."puts "-- Type 'update' to update a movie."puts "-- Type 'display' to display all movies."puts "-- Type 'delete' to delete a movie."choice = gets.chomp.downcasecase choicewhen 'add'  puts "What movie do you want to add?"  title = gets.chomp  if movies[title.to_sym].nil?    puts "What's the rating? (Type a number 0 to 4.)"    rating = gets.chomp    movies[title.to_sym] = rating.to_i    puts "#{title} has been added wit""nto: 3,  Primer: 4,  Ishtar: 1}puts "What would you like to do?"puts "-- Type 'add' to add a movie."puts "-- Type 'update' to update a movie."puts "-- Type 'display' to display all movies."puts "-- Type 'delete' to delete a movie."choice = gets.chomp.downcasecase choicewhen 'add'  puts "What movie do you want to add?"  title = gets.chomp  if movies[title.to_sym].nil?    puts "What's the rating? (Type a number 0 to 4.)"    rating = gets.chomp    movies[title.to_sym] = rating.""to: 3,  Primer: 4,  Ishtar: 1}puts "What would you like to do?"puts "-- Type 'add' to add a movie."puts "-- Type 'update' to update a movie."puts "-- Type 'display' to display all movies."puts "-- Type 'delete' to delete a movie."choice = gets.chomp.downcasecase choicewhen 'add'  puts "What movie do you want to add?"  title = gets.chomp  if movies[title.to_sym].nil?    puts "What's the rating? (Type a number 0 to 4.)"    rating = gets""o: 3,  Primer: 4,  Ishtar: 1}puts "What would you like to do?"puts "-- Type 'add' to add a movie."puts "-- Type 'update' to update a movie."puts "-- Type 'display' to display all movies."puts "-- Type 'delete' to delete a movie."choice = gets.chomp.downcasecase choicewhen 'add'  puts "What movie do you want to add?"  title = gets.chomp  if movies[title.to_sym].nil?    puts "What's the rating? (T"": 3,  Primer: 4,  Ishtar: 1}puts "What would you like to do?"puts "-- Type 'add' to add a movie."puts "-- Type 'update' to update a movie."puts "-- Type 'display' to display all movies."puts "-- Type 'delete' to delete a movie."choice = gets.chomp.downcasecase choicewhen 'add'  puts "What movie do you want to add?"  title = gets.chomp  if movies[title.to_sy"" 3,  Primer: 4,  Ishtar: 1}puts "What would you like to do?"puts "-- Type 'add' to add a movie."puts "-- Type 'update' to update a movie."puts "-- Type 'display' to display all movies."puts "-- Type 'delete' to delete a movie."choice = gets.chomp.downcasecase choicewhen 'add'  puts "What movie do you want to add?"  titl""3,  Primer: 4,  Ishtar: 1}puts "What would you like to do?"puts "-- Type 'add' to add a movie."puts "-- Type 'update' to update a movie."puts "-- Type 'display' to display all movies."puts "-- Type 'delete' to delete a movie."choice = gets.chomp.downcasecase choicewhen 'add'  puts "W"",  Primer: 4,  Ishtar: 1}puts "What would you like to do?"puts "-- Type 'add' to add a movie."puts "-- Type 'update' to update a movie."puts "-- Type 'display' to display all movies."puts "-- Type 'delete' to delete a movie."choice = gets.chomp.downc""  Primer: 4,  Ishtar: 1}puts "What would you like to do?"puts "-- Type 'add' to add a movie."puts "-- Type 'update' to update a movie."puts "-- Type 'display' to display all movies."puts "-- Type 'delete' to delete a""  Primer: 4,  Ishtar: 1}puts "What would you like to do?"puts "-- Type 'add' to add a movie."puts "-- Type 'update' to update a movie."puts "-- Type 'display' to display all movies.""" Primer: 4,  Ishtar: 1}puts "What would you like to do?"puts "-- Type 'add' to add a movie."puts "-- Type 'update' to update a movie."puts "-- Type '""Primer: 4,  Ishtar: 1}puts "What would you like to do?"puts "-- Type 'add' to add a movie."puts "-- Type 'update' to ""rimer: 4,  Ishtar: 1}puts "What would you like to do?"puts "-- Type 'add' to add a mov""imer: 4,  Ishtar: 1}puts "What would you like to do?"pu""mer: 4,  Ishtar: 1}puts "W""e",,,,A Box Office Hash,2. Setting Up - Creating Hash,"favorite_foods = {    'vegetable' => 'brocolli'}puts "Do you like coding in Ruby?"answer = gets.chomp""avorite_foods = {    'vegetable' => 'brocolli'",,,,A Box Office Hash,3. The Case Statement,"case languagewhen "JS"  puts "Websites!"when "Python"  puts "Science!"when "Ruby"  puts "Web apps!"else  puts "I don't know!"end""ase languagewhen "JS"  puts "Websites!"when "Python"  puts "Science!"when "Ruby"  puts "Web apps!"else  puts ""se languagewhen "JS"  puts "Websites!"when "Python"  puts "Science!"when "Ruby"  puts "Web a""e languagewhen "JS"  puts "Websites!"when "Python"  puts "Science!"when "Ru"" languagewhen "JS"  puts "Websites!"when "Python"  puts "Sc""languagewhen "JS"  puts "Websites!"when "Pyt""anguagewhen "JS"  puts "Websit""nguagewhen "JS" ""guage",,,,You’re in Control!,1. Ruby is a Delight,"ruby_is_eloquent = trueruby_is_ugly = falseputs "Ruby is eloquent!" if ruby_is_eloquentputs "Ruby's not ugly!" unless ruby_is_ugly""uby_is_eloquent = trueruby_is_ugly = falseputs "Ruby is eloquent!" if ruby_is_e""by_is_eloquent = trueruby_is_u",,,,You’re in Control!,2. A Simpler ‘If' ,"if condition  # Do something!endto: expression if booleanputs "It's true!" if true""f condition  # Do ","puts "Hello, World" if true""uts "Hello, World" if""ts "Hello, World""s "Hello, Wo"" "Hello, """Hello,""Hello,",,,You’re in Control!,3. The One-Line Unless,"puts "Hello!" unless falseorunless false  puts "Hello!"end""uts "Hello!" unless falseorunless false  puts "Hello!""ts "Hello!" unless falseorunless false  puts "He""s "Hello!" unless falseorunless false  puts "" "Hello!" unless falseorunless false  put"""Hello!" unless falseorunless false  pu""Hello!" unless falseorunless false  pu""ello!" unless falseorunless fals""llo!" unless falseorunless""lo!" unless falseorun""o!" unless falseor""!" unless falseo""" unless false"" unless false","puts "Hello, World" unless false""uts "Hello, World" unless ""ts "Hello, World" unl""s "Hello, World" "" "Hello, World"""Hello, Worl""Hello, Worl",,,You’re in Control!,4. One Good Turn Deserves a Ternary,"boolean ? Do this if true: Do this if falseex.puts 3 < 4 ? "3 is less than 4!" : "3 is not less than 4."""oolean ? Do this if true: Do this if false","puts 9 < 8 ? "9 is less than 8." : "9 is not less than 8."""uts 9 < 8 ? "9 is less than 8." : "9 is not ""ts 9 < 8 ? "9 is less than 8." ""s 9 < 8 ? "9 is les"" 9 < 8 ?",,,You’re in Control!,5. When and Then: The Case Statement,"case languagewhen "JS"  puts "Websites!"when "Python"  puts "Science!"when "Ruby"  puts "Web apps!"else  puts "I don't know!"endto:case language  when "JS" then puts "Websites!"  when "Python" then puts "Science!"  when "Ruby" then puts "Web apps!"  else puts "I don't know!"end""ase languagewhen "JS"  puts "Websites!"when "Python"  puts "Science!"when "Ruby"  puts "Web apps!"else  puts "I don't know!"endto:case language  when "JS" then puts "Websites!"  when "Python" then puts "Science!"  when "Ruby" then puts "Web apps!"  else puts ""se languagewhen "JS"  puts "Websites!"when "Python"  puts "Science!"when "Ruby"  puts "Web apps!"else  puts "I don't know!"endto:case language  when "JS" then puts "Websites!"  when "Python" then puts "Science!"  when "Ruby" then puts "Web a""e languagewhen "JS"  puts "Websites!"when "Python"  puts "Science!"when "Ruby"  puts "Web apps!"else  puts "I don't know!"endto:case language  when "JS" then puts "Websites!"  when "Python" then puts "Science!"  when "Ruby""" languagewhen "JS"  puts "Websites!"when "Python"  puts "Science!"when "Ruby"  puts "Web apps!"else  puts "I don't know!"endto:case language  when "JS" then puts "Websites!"  when "Python" then puts "Science""languagewhen "JS"  puts "Websites!"when "Python"  puts "Science!"when "Ruby"  puts "Web apps!"else  puts "I don't know!"endto:case language  when "JS" then puts "Websites!"  when "Python" the""anguagewhen "JS"  puts "Websites!"when "Python"  puts "Science!"when "Ruby"  puts "Web apps!"else  puts "I don't know!"endto:case language  when "JS" then puts "Websites!"  whe""nguagewhen "JS"  puts "Websites!"when "Python"  puts "Science!"when "Ruby"  puts "Web apps!"else  puts "I don't know!"endto:case language  when "JS" then puts "Web""guagewhen "JS"  puts "Websites!"when "Python"  puts "Science!"when "Ruby"  puts "Web apps!"else  puts "I don't know!"endto:case language  when "JS" th""uagewhen "JS"  puts "Websites!"when "Python"  puts "Science!"when "Ruby"  puts "Web apps!"else  puts "I don't know!"endto:case language  w""agewhen "JS"  puts "Websites!"when "Python"  puts "Science!"when "Ruby"  puts "Web apps!"else  puts "I don't know!"endto:case la""gewhen "JS"  puts "Websites!"when "Python"  puts "Science!"when "Ruby"  puts "Web apps!"else  puts "I don't know!"endto:""ewhen "JS"  puts "Websites!"when "Python"  puts "Science!"when "Ruby"  puts "Web apps!"else  puts "I don't know!"""when "JS"  puts "Websites!"when "Python"  puts "Science!"when "Ruby"  puts "Web apps!"else  puts "I don't ""when "JS"  puts "Websites!"when "Python"  puts "Science!"when "Ruby"  puts "Web apps!"else  puts "I ""hen "JS"  puts "Websites!"when "Python"  puts "Science!"when "Ruby"  puts "Web apps!"else  put""en "JS"  puts "Websites!"when "Python"  puts "Science!"when "Ruby"  puts "Web apps!"else ""n "JS"  puts "Websites!"when "Python"  puts "Science!"when "Ruby"  puts "Web apps!"els"" "JS"  puts "Websites!"when "Python"  puts "Science!"when "Ruby"  puts "Web apps!"e"""JS"  puts "Websites!"when "Python"  puts "Science!"when "Ruby"  puts "Web apps!"""JS"  puts "Websites!"when "Python"  puts "Science!"when "Ruby"  puts "Web apps!"""S"  puts "Websites!"when "Python"  puts "Science!"when "Ruby"  puts "Web apps!"""  puts "Websites!"when "Python"  puts "Science!"when "Ruby"  puts "Web apps""  puts "Websites!"when "Python"  puts "Science!"when "Ruby"  puts "Web apps""  puts "Websites!"when "Python"  puts "Science!"when "Ruby"  puts """ puts "Websites!"when "Python"  puts "Science!"when "Ruby" ""puts "Websites!"when "Python"  puts "Science!"when "R""uts "Websites!"when "Python"  puts "Science!"wh""ts "Websites!"when "Python"  puts "Science!""s "Websites!"when "Python"  puts "Scien"" "Websites!"when "Python"  puts "Sci"""Websites!"when "Python"  puts "Sc""Websites!"when "Python"  puts "Sc""ebsites!"when "Python" ""bsites!"when "P""sites!"""i","puts "What language do you speak?"greeting = gets.chompcase greetingwhen "English" then puts "Hello!"when "French" then puts "Bonjour!"when "German" then puts "Guten Tag!"when "Finnish" then puts "Haloo!"else puts "I don't know that language!"end""uts "What language do you speak?"greeting = gets.chompcase greetingwhen "English" then puts "Hello!"when "French" then puts "Bonjour!"when "German" then puts "Guten Tag!"when "Finnish" then puts "Haloo!"else puts "I don't know that language!""ts "What language do you speak?"greeting = gets.chompcase greetingwhen "English" then puts "Hello!"when "French" then puts "Bonjour!"when "German" then puts "Guten Tag!"when "Finnish" then puts "Haloo!"else puts "I don't know that langu""s "What language do you speak?"greeting = gets.chompcase greetingwhen "English" then puts "Hello!"when "French" then puts "Bonjour!"when "German" then puts "Guten Tag!"when "Finnish" then puts "Haloo!"else puts "I don't know that la"" "What language do you speak?"greeting = gets.chompcase greetingwhen "English" then puts "Hello!"when "French" then puts "Bonjour!"when "German" then puts "Guten Tag!"when "Finnish" then puts "Haloo!"else puts "I don't know that """What language do you speak?"greeting = gets.chompcase greetingwhen "English" then puts "Hello!"when "French" then puts "Bonjour!"when "German" then puts "Guten Tag!"when "Finnish" then puts "Haloo!"else puts "I don't know that""What language do you speak?"greeting = gets.chompcase greetingwhen "English" then puts "Hello!"when "French" then puts "Bonjour!"when "German" then puts "Guten Tag!"when "Finnish" then puts "Haloo!"else puts "I don't know that""hat language do you speak?"greeting = gets.chompcase greetingwhen "English" then puts "Hello!"when "French" then puts "Bonjour!"when "German" then puts "Guten Tag!"when "Finnish" then puts "Haloo!"e""at language do you speak?"greeting = gets.chompcase greetingwhen "English" then puts "Hello!"when "French" then puts "Bonjour!"when "German" then puts "Guten Tag!"when "Fin""t language do you speak?"greeting = gets.chompcase greetingwhen "English" then puts "Hello!"when "French" then puts "Bonjour!"when "German" then pu"" language do you speak?"greeting = gets.chompcase greetingwhen "English" then puts "Hello!"when "French" then puts "Bonjour""language do you speak?"greeting = gets.chompcase greetingwhen "English" then puts "Hello!"when "Fre""anguage do you speak?"greeting = gets.chompcase greetingwhen "English" then p""nguage do you speak?"greeting = gets.chompcase greeting""guage do you speak?"greeting = gets.ch""uage do you speak?"""",,,Tips & Tricks,6. Conditional Assignment,conditional assignment operator: ||=. It's made up of the or (||) logical operator and the normal = assignment operator.,"favorite_book = nilputs favorite_bookfavorite_book ||= "Cat's Cradle"puts favorite_bookfavorite_book ||= "Why's (Poignant) Guide to Ruby"puts favorite_bookfavorite_book = "Why's (Poignant) Guide to Ruby"puts favorite_book""avorite_book = nilputs favorite_bookfavorite_book ||= "Cat's Cradle"puts favorite_bookfavorite_book ||= "Why's (Poignant) Guide to Ruby"puts favorite_bookfavorite_""vorite_book = nilputs favorite_bookfavorite_book ||= "Cat's Cradle"puts favorite_bookfavorite_book ||= "Why'""orite_book = nilputs favorite_bookfavorite_book ||= "C""r",,,Tips & Tricks,7. Now You Try!,Create Variable,"favorite_language = nilputs favorite_languagefavorite_language ||= "ruby"puts favorite_language""avorite_language = nilputs ",,,Tips & Tricks,8. Implicit Return,"def add(a,b)  return a + bendto:def add(a,b)  a + bend","def multiple_of_three(n)  n % 3 == 0 ? "True" : "False"end""ef multiple_of_thre",,,Tips & Tricks,9. Short-Circuit Evaluation,That means that Ruby doesn't look at both expressions unless it has to.,"def a  puts "A was evaluated!"  return trueenddef b  puts "B was also evaluated!"  return trueendputs a || bputs "------"puts a && b""ef a  puts "A was evaluated!"  return trueenddef b  puts "B was also evaluated!"  return trueendputs a || bputs "------""f a  puts "A was evaluated!"  return trueenddef b  puts "B was also evaluated!"  return trueendputs a || b"" a  puts "A was evaluated!"  return trueenddef b  puts "B was also evaluated!"  return trueendp""a  puts "A was evaluated!"  return trueenddef b  puts "B was also evaluated!"  return t""  puts "A was evaluated!"  return trueenddef b  puts "B was also evaluated!" ""  puts "A was evaluated!"  return trueenddef b  puts "B was also evalu"" puts "A was evaluated!"  return trueenddef b  puts "B was als""puts "A was evaluated!"  return trueenddef b  puts "B w""uts "A was evaluated!"  return trueenddef b  puts""ts "A was evaluated!"  return trueenddef b  ""s "A was evaluated!"  return trueenddef b"" "A was evaluated!"  return trueenddef"""A was evaluated!"  return trueendde""A was evaluated!"  return trueendde"" was evaluated!"  ret""was ev",,,Knowing What to Use,10. The Right Tool for the Job,"Ex.15.times { puts "Odelay!" }# Prints 5 "Odelay!"s on separate linesEx.2[1, 2, 3].each { |x| puts x * 10 }# Prints 10, 20, 30 on separate lines""x.15.times { puts "Odelay!" }# Prints 5 "Odelay!"s on separate linesEx.2[1, 2, 3].each { |x| puts x * 10 }# Prints 10, 20, "".15.times { puts "Odelay!" }# Prints 5 "Odelay!"s on separate linesEx.2[1, 2, 3].each { |x| puts x * 10 ""15.times { puts "Odelay!" }# Prints 5 "Odelay!"s on separate linesEx.2[1, 2, 3].each ""5.times { puts "Odelay!" }# Prints 5 "Odelay!"s on separate linesEx.""5.times { puts "Odelay!" }# Prints 5 "Odelay!"s on sep"".times { puts "Odelay!" }# Prints 5 "O""times { puts "Odelay!" }""imes { put","my_array = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]my_array.each { |x| puts x if x.even? }",,,Knowing What to Use,11. Up the Down Staircase,"If we know the range of numbers we'd like to include, we can use .upto and .downto. This is a much more Rubyist solution than trying to use a for loop that stops when a counter variable hits a certain value.Ex.195.upto(100) { |num| print num, " " }# Prints 95 96 97 98 99 100Ex.2"A".upto("Z") { |letter| puts letter }""f we know the range of numbers we'd like to include, we can use .upto and .do",""A".upto("P") { |x| puts x }""A".upto("P") { |x| puts x }""".upto("P") { |x| puts x "".upto("P") { |x| puts x ""upto("P") { |x| p""pto("P") { ""to("P"""o(",,,Knowing What to Use,12. Call and Response,".respond_to? takes a symbol and returns true if an object can receive that method and false otherwise. Ex.1[1, 2, 3].respond_to?(:push)Ex.2[1, 2, 3].respond_to?(:to_sym)*Remember, you'll need to pass .respond_to? a symbol. This means it will take :next as an argument, not next.","age = 26age.respond_to?(:next)",,,Knowing What to Use,13. Being Pushy,"Instead of typing out the .push method name, you can simply use <<, the concatenation operator (also known as "the shovel") to add an element to the end of an array.Ex.1[1, 2, 3] << 4# ==> [1, 2, 3, 4]Ex.2"Yukihiro " << "Matsumoto"# ==> "Yukihiro Matsumoto"""nstead of typing out the .push method name, you can simply use <<, the concatenation operator (also known as "the shovel") to add an element to the end of""stead of typing out the .push method name, y","alphabet = ["a", "b", "c"] << "d"caption = "A giraffe surrounded by " << "weezards!"""lphabet = ["a", "b", "c"] << "d"caption = "A giraffe surrounded by " <<""phabet = ["a", "b", "c"] << "d"caption = "A giraffe surroun""habet = ["a", "b", "c"] << "d"caption = "A giraf""abet = ["a", "b", "c"] << "d"caption =""bet = ["a", "b", "c"] << "d"c""et = ["a", "b", "c"] <<""t = ["a", "b", """ = ["a", """= ["a"" ",,,Knowing What to Use,14. String Interpolation,"You can always use plain old + or << to add a variable value into a string.Ex.1drink = "espresso""I love " + drink# ==> I love espresso"I love " << drink# ==> I love espressoEx.2 #For non-string values, you have to use .to_s to make it a string:age = 26"I am " + age.to_s + " years old."# ==> "I am 26 years old.""I am " << age.to_s << " years old."# ==> "I am 26 years old.”Ex.3 #Ex.2 is complicated.  Better to use: string interpolation"I love #{drink}."# ==> I love espresso."I am #{age} years old."# ==> I am 26 years old.""ou can always use plain old + or << to add a variable value into a string.Ex.1drink = "espresso""I love " + drink# ==> I love espresso"I love " << drink# ==> I love espressoEx.2 #For non-string values, you have to use .to_s to make it a string:age = 26"I am " + age.to_s + " years old."# ==> "I am 26 years old.""I am " << age.to_s << " years old."# ==> "I am 26 years old.”Ex.3 #Ex.2 is complicated.  Better to use: string interpolation"""u can always use plain old + or << to add a variable value into a string.Ex.1drink = "espresso""I love " + drink# ==> I love espresso"I love " << drink# ==> I love espressoEx.2 #For non-string values, you have to use .to_s to make it a string:age = 26"I am " + age.to_s + " years old."# ==> "I am 26 years old.""I am " << age.to_s << " years old."# =="" can always use plain old + or << to add a variable value into a string.Ex.1drink = "espresso""I love " + drink# ==> I love espresso"I love " << drink# ==> I love espressoEx.2 #For non-string values, you have to use .to_s to make it a string:age = 26"I am " + age.t""can always use plain old + or << to add a variable value into a string.Ex.1drink = "espresso""I love " + drink# ==> I love espresso"I love " << drink# ==> I love espressoEx.2 #For""an always use plain old + or << to add a variable value into a string.Ex.1drink = "espresso""I lo""n always use pl","favorite_things = ["Ruby", "espresso", "candy"]puts "A few of my favorite things:"favorite_things.each do |thing|  puts "I love #{thing}!"end""avorite_things = ["Ruby", "espresso", "candy"]puts "A few of my favorite things:"favorite_things.each do |thing|  puts "I ""vorite_things = ["Ruby", "espresso", "candy"]puts "A few of my favorite things:"favorite_things.each do ""orite_things = ["Ruby", "espresso", "candy"]puts "A few of my favorite things:"favorit""rite_things = ["Ruby", "espresso", "candy"]puts "A few of my favorite t""ite_things = ["Ruby", "espresso", "candy"]puts "A few o""te_things = ["Ruby", "espresso", "candy"]""e_things = ["Ruby", "espress""_things = ["Rub""thi",,,Review by Refactoring,15. One-Liners,"action if booleanWhere action is a the action to perform if the boolean expression evaluates to true.","1 < 2 if puts "One is less than two!""" < 2 if puts "One is l""< 2 if p",,,Review by Refactoring,16. The Ternary Operator,"three = 3puts three == 3 ? "Of course." : "What?"# ==> puts "Of course.”*Refactor the if statement in the editor to use a ternary operator to puts the correct sentence.""hree = 3puts three == 3 ? "Of course." : "What?"# ==> puts "Of course.”*Refactor the if statement in the editor to use a ternary operator t""ree = 3puts three == 3 ? "Of course." : "What?"# ==> puts "Of course.”*Refactor the if statement in the editor ""ee = 3puts three == 3 ? "Of course." : "What?"# ==> puts "Of course.”*Refactor the i""e = 3puts three == 3 ? "Of course." : "What?"# ==> puts "Of "" = 3puts three == 3 ? "Of course." :""= 3puts thre","puts 1 < 2 ? "One is less than two!" : "One is not less than two!"""uts 1 < 2 ? "One is less than two!" : "One is not le""ts 1 < 2 ? "One is less than two!" : "O""s 1 < 2 ? "One is less than"" 1 < 2 ? "One is""1 < 2 ",,,Review by Refactoring,17. In Case of Many Options,*Refactor the if/elsif/else statement in the editor into a tidy case statement.,"puts "What's your favorite language?"language = gets.chompcase languagewhen "Ruby" then puts "Ruby is great for web apps!" when "Python" then puts "Python is great for science."when "JavaScript" then puts "JavaScript makes websites awesome."when "HTML" then puts "HTML is what websites are made of!"when "CSS" then puts "CSS makes websites pretty."else puts "I don't know that language!"end""uts "What's your favorite language?"language = gets.chompcase languagewhen "Ruby" then puts "Ruby is great for web apps!" when "Python" then puts "Python is great for science."when "JavaScript" then puts "JavaScript makes websites awesome."when "HTML" then puts "HTML is what websites are made of!"when "CSS" then puts "CSS makes websites pretty."else puts "I don't know that language!""ts "What's your favorite language?"language = gets.chompcase languagewhen "Ruby" then puts "Ruby is great for web apps!" when "Python" then puts "Python is great for science."when "JavaScript" then puts "JavaScript makes websites awesome."when "HTML" then puts "HTML is what websites are made of!"when "CSS" then puts "CSS makes websites pretty."else puts "I don't know that langu""s "What's your favorite language?"language = gets.chompcase languagewhen "Ruby" then puts "Ruby is great for web apps!" when "Python" then puts "Python is great for science."when "JavaScript" then puts "JavaScript makes websites awesome."when "HTML" then puts "HTML is what websites are made of!"when "CSS" then puts "CSS makes websites pretty."else puts "I don't know that la"" "What's your favorite language?"language = gets.chompcase languagewhen "Ruby" then puts "Ruby is great for web apps!" when "Python" then puts "Python is great for science."when "JavaScript" then puts "JavaScript makes websites awesome."when "HTML" then puts "HTML is what websites are made of!"when "CSS" then puts "CSS makes websites pretty."else puts "I don't know that """What's your favorite language?"language = gets.chompcase languagewhen "Ruby" then puts "Ruby is great for web apps!" when "Python" then puts "Python is great for science."when "JavaScript" then puts "JavaScript makes websites awesome."when "HTML" then puts "HTML is what websites are made of!"when "CSS" then puts "CSS makes websites pretty."else puts "I don't know that""What's your favorite language?"language = gets.chompcase languagewhen "Ruby" then puts "Ruby is great for web apps!" when "Python" then puts "Python is great for science."when "JavaScript" then puts "JavaScript makes websites awesome."when "HTML" then puts "HTML is what websites are made of!"when "CSS" then puts "CSS makes websites pretty."else puts "I don't know that""hat's your favorite language?"language = gets.chompcase languagewhen "Ruby" then puts "Ruby is great for web apps!" when "Python" then puts "Python is great for science."when "JavaScript" then puts "JavaScript makes websites awesome."when "HTML" then puts "HTML is what websites are made of!"when "CSS" then puts "CSS makes websites pretty.""at's your favorite language?"language = gets.chompcase languagewhen "Ruby" then puts "Ruby is great for web apps!" when "Python" then puts "Python is great for science."when "JavaScript" then puts "JavaScript makes websites awesome."when "HTML" then puts "HTML is what websites are made of!"when "CSS" then put""t's your favorite language?"language = gets.chompcase languagewhen "Ruby" then puts "Ruby is great for web apps!" when "Python" then puts "Python is great for science."when "JavaScript" then puts "JavaScript makes websites awesome."when "HTML" then puts "HTML is what websites are m""'s your favorite language?"language = gets.chompcase languagewhen "Ruby" then puts "Ruby is great for web apps!" when "Python" then puts "Python is great for science."when "JavaScript" then puts "JavaScript makes websites awesome."when "HTML" then puts """s your favorite language?"language = gets.chompcase languagewhen "Ruby" then puts "Ruby is great for web apps!" when "Python" then puts "Python is great for science."when "JavaScript" then puts "JavaScript makes websites awesome"" your favorite language?"language = gets.chompcase languagewhen "Ruby" then puts "Ruby is great for web apps!" when "Python" then puts "Python is great for science."when "JavaScript" then puts "JavaScri""your favorite language?"language = gets.chompcase languagewhen "Ruby" then puts "Ruby is great for web apps!" when "Python" then puts "Python is great for science."when "JavaScr""our favorite language?"language = gets.chompcase languagewhen "Ruby" then puts "Ruby is great for web apps!" when "Python" then puts "Python is great for ""ur favorite language?"language = gets.chompcase languagewhen "Ruby" then puts "Ruby is great for web apps!" when "Python" then puts""r favorite language?"language = gets.chompcase languagewhen "Ruby" then puts "Ruby is great for web apps!" wh"" favorite language?"language = gets.chompcase languagewhen "Ruby" then puts "Ruby is grea""favorite language?"language = gets.chompcase languagewhen "Ruby" then""avorite language?"language = gets.chompcase languag""vorite language?"language = gets.ch""orite language?"la""rit",,,Review by Refactoring,18. Conditional Assignment,*Create a variable called favorite_animal and conditionally assign it to a string containing the name of your favorite animal.,"favorite_animal = nilfavorite_animal ||= "dog"""avor",,,Review by Refactoring,19. Implicit Return,"Write a method, square, that takes a number as an argument and implicitly returns the square of that number.","def square(n)     n * nend",,,Review by Refactoring,20. 'For' Shame!,"10.times do  puts "Knock knock."  puts "Who's there?"end*Let's finish up by refactoring the for loop on the right to use .times instead.""0.times do  puts "Knock knock."  puts "Who's there?"end*Let's finish up by refactoring the for loop on the right to "".times do  puts "Knock knock."  puts "Who's there?"end*Let's finish up by refactoring the for loo""times do  puts "Knock knock."  puts "Who's there?"end*Let's finish up by refact""imes do  puts "Knock knock."  puts "Who's there?"end*Let's fin""mes do  puts "Knock knock."  puts "Who's there?"""es do  puts "Knock knock."  puts """s do  puts "Knock kno"" do  put","3.times do    puts "I'm a refactoring master!"end"".times do    puts "I'm a refa""times do ",,,Room for Improvement,1. What You'll Be Fixing,"$VERBOSE = nil    # We'll explain this at the end of the lesson.require 'prime'   # This is a module. We'll cover these soon!def first_n_primes(n)  unless n.is_a? Integer    return "n must be an integer."  end  if n <= 0    return "n must be greater than 0."  end    prime_array = [] if prime_array.nil?    prime = Prime.new  for num in (1..n)    prime_array.push(prime.next)  end  return prime_arrayendfirst_n_primes(10)""VERBOSE = nil    # We'll explain this at the end of the lesson.require 'prime'   # This is a module. We'll cover these soon!def first_n_primes(n)  unless n.is_a? Integer    return "n must be an integer."  end  if n <= 0    return "n must be grea""ERBOSE = nil    # We'll explain this at the end of the lesson.requi",,,,Room for Improvement,2. To Be or Not to Be,"Ex.def my_method(optional_param)  optional_param ||= 3  puts optional_paramendmy_method(5)# puts 5my_method(nil)# puts 3*Refactor the code on line 14 to use conditional assignment to set prime_array to [] instead of using an if statement: prime_array = [] if prime_array.nil?*Remember, the conditional assignment operator works like this:variable ||= value","prime_array = [] if prime_array.nil?to:  prime_array ||= []",,,Room for Improvement,3. Omit Needless Words,"There are two control structures to change here:The unless on line 6The if on line 10Refactor the code in the editor to use single-line if s and unless s.Your if and unless statements should be of the form:action if booleanaction unless boolean*Remember, you don't need an end with a single-line if or unless!","Line 6unless n.is_a? Integer  return "n must be an integer."endtoreturn "n must be an integer." unless n.is_a? IntegerLine 10if n <= 0  return "n must be greater than 0.”endto  return "n must be greater than 0." if n <= 0""ine 6unless n.is_a? Integer  return "n must be an integer."endtoreturn "n must be an integer." unless n.is_a? IntegerLine 10if n <= 0  return "n must be greater than 0.”endto  retur""ne 6unless n.is_a? Integer  return "n must be an integer."endtoreturn "n must be an integer." unless n.is_a? IntegerLine 10if n <= 0  return "n mu""e 6unless n.is_a? Integer  return "n must be an integer."endtoreturn "n must be an integer." unless n.is_a? Inte"" 6unless n.is_a? Integer  return "n must be an integer."endtoreturn "n must""6unless n.is_a? Integer  return "n must be ""unless n.",,,Room for Improvement,4. Less is More,"There's one return statement in this code that we can change from explicit to implicit!  Find the unnecessary return keyword and remove it.","Line 16return prime_array",,,Room for Improvement,5. The Rubyist's Loop,Replace the for loop with a call to .times.,"Line 13for num in (1..n)  prime_array.push(prime.next)endton.times {prime_array.push(prime.next)}",,,Room for Improvement,6. Final Push,Replace the call to .push with the << operator.,"Line 13n.times {prime_array.push(prime.next)}ton.times {prime_array << (prime.next)}",,,Room for Improvement,7. Nice work!,"Example (Advanced, not required):require 'prime'def first_n_primes(n)  # Check for correct input!  "n must be an integer" unless n.is_a? Integer  "n must be greater than 0" if n <= 0  # The Ruby 1.9 Prime class makes the array automatically!  prime = Prime.instance  prime.first nendfirst_n_primes(10)""xample (Advanced, not required):require 'prime'def first_n_primes(n)  # Check for correct input!  "n must be an integer" unless n.is_a? Integer  "n must be greater than 0" if n <= 0  # The Ruby 1.9 Pri""ample (Advanced, not required):require 'prime'def first_n_primes(n)  # Check for correct input!  "n ""mp","Final Work:$VERBOSE = nil    # We'll explain this at the end of the lesson.require 'prime'   # This is a module. We'll cover these soon!def first_n_primes(n)    return "n must be an integer." unless n.is_a? Integer  return "n must be greater than 0." if n <= 0    prime_array ||= []    prime = Prime.new  n.times {prime_array << (prime.next)}  prime_arrayendfirst_n_primes(10)""inal Work:$VERBOSE = nil    # We'll explain this at the end of the lesson.require 'prime'   # This is a module. We'll cover these soon!def first_n_primes(n)    return "n must be an integer." unless n.is_a? Intege""nal Work:$VERBOSE = nil    # We'll explain ",,,Blocks: A Reintroduction,1. You Know This!,"Ex.[1, 2, 3].each do |num|  puts numend# ==> Prints 1, 2, 3 on separate lines[1, 2, 3].each { |num| puts num }# ==> Prints 1, 2, 3 on separate lines*Let's do a little review! Use .times and a block to puts the string "I'm a block!" five times.""x.[1, 2, 3].each do |num","5.times { puts "I'm a block!"}"".times { puts ",,,Blocks: A Reintroduction,2. Collect 'Em All,"The collect method takes a block and applies the expression in the block to every element in an array. my_nums = [1, 2, 3]my_nums.collect { |num| num ** 2 }# ==> [1, 4, 9].collect returns a copy of my_nums, but doesn't change (or mutate) the original my_nums array. If we want to do that, we can use .collect!my_nums.collect! { |num| num ** 2 }# ==> [1, 4, 9]my_nums# ==> [1, 4, 9]","Create a new variable, doubled_fibs, and set it equal to the result of calling fibs.collect. The block you pass to .collect should double each Fibonacci number, similar to the example above.fibs = [1, 1, 2, 3, 5, 8, 13, 21, 34, 55]doubled_fibs = fibs.collect {|num| num * 2 }",,,Blocks: A Reintroduction,3. Learning to Yield,"def block_test  puts "We're in the method!"  puts "Yielding to the block..."  yield  puts "We're back in the method!"endblock_test { puts ">>> We're in the block!" }""ef block_test  puts "We're in the method!"  puts "Yielding to the block..."  yield  puts "We're back in the method!"endblock_test { puts ">>> ""f block_test  puts "We're in the method!"  puts "Yielding to the block..."  yield  puts "We're back in the method!"endbl"" block_test  puts "We're in the method!"  puts "Yielding to the block..."  yield  puts "We're back in ""block_test  puts "We're in the method!"  puts "Yielding to the block..."  yield  p""lock_test  puts "We're in the method!"  puts "Yielding to the blo""ock_test  puts "We're in the method!"  puts "Yi""ck_test  puts "We're in the met""k_test  puts "W""_",,,,Blocks: A Reintroduction,4. Yielding With Parameters,"Call yield_name with your name as a parameter. Make sure to pass in a block that puts "My name is #{your name here}!"""all yield_name with your name ","def yield_name(name)  puts "In the method! Let's yield."  yield("Kim")  puts "In between the yields!"  yield(name)  puts "Block complete! Back in the method."endyield_name("Eric") { |n| puts "My name is #{n}." }yield_name("Adam") { |n| puts "My name is #{n}." }""ef yield_name(name)  puts "In the method! Let's yield."  yield("Kim")  puts "In between the yields!"  yield(name)  puts "Block complete! Back in the method."endyield_name("Eric") { |n| puts "My name is #{n}." }yield_name("Adam") { |""f yield_name(name)  puts "In the method! Let's yield."  yield("Kim")  puts "In between the yields!"  yield(name)  puts "Block complete! Back in the method."endyield_name("Eric") { |n| puts "My name is #{n}."" yield_name(name)  puts "In the method! Let's yield."  yield("Kim")  puts "In between the yields!"  yield(name)  puts "Block complete! Back in the method."endyield_name("Eric") { ""yield_name(name)  puts "In the method! Let's yield."  yield("Kim")  puts "In between the yields!"  yield(name)  puts "Block complete! Back in the method."e""ield_name(name)  puts "In the method! Let's yield."  yield("Kim")  puts "In between the yields!"  yield(name)  puts "Block complete""eld_name(name)  puts "In the method! Let's yield."  yield("Kim")  puts "In between the yields!"  yield(name)""ld_name(name)  puts "In the method! Let's yield."  yield("Kim")  puts "In between the ""d_name(name)  puts "In the method! Let's yield."  yield("Kim")  ""_name(name)  puts "In the method! Let's yield""name(name)  puts "In the ""ame(nam",,,Procs: Savable Blocks,5. Try It Yourself!,"Define your own method, double, that accepts a single parameter and yields to a block. Then call it with a block that multiplies the number parameter by 2. You can double any number you like!","def double(x)    yield (x)enddouble(3) {|n| n * 2}",,,Procs: Savable Blocks,6. Keeping Your Code DRY,"*Blocks are not objects. Because of this, blocks can't be saved to variables and don't have all the powers and abilities of a real object. For that, we'll need... procs!  You can think of a proc as a "saved" block""Blocks are n","multiples_of_3 = Proc.new do |n|  n % 3 == 0end(1..100).to_a.select(&multiples_of_3)",,,Procs: Savable Blocks,7. Proc Syntax,"Procs are easy to define! You just call Proc.new and pass in the block you want to save. Ex. cube = Proc.new { |x| x ** 3 }We can then pass the proc to a method that would otherwise take a block, and we don't have to rewrite the block over and over![1, 2, 3].collect!(&cube)# ==> [1, 8, 27][4, 5, 6].map!(&cube)# ==> [64, 125, 216](The .collect! and .map! methods do the exact same thing.)The & is used to convert the cube proc into a block (since .collect! and .map! normally take a block). We'll do this any time we pass a proc to a method that expects a block.","The .floor method rounds a float (a number with a decimal) down to the nearest integer. Write a proc called round_down that will do this rounding (we've added the code to pass it to floats.collect).floats = [1.2, 3.45, 0.91, 7.727, 11.42, 482.911]# Write your code below this line!round_down = Proc.new { |x| x.floor }# Write your code above this line!ints = floats.collect(&round_down)",,,Procs: Savable Blocks,8. Why Procs?,"over_4_feet = Proc.new do |height|  # Include rest of block code hereend and group_1.select(&over_4_feet)","group_1 = [4.1, 5.5, 3.2, 3.3, 6.1, 3.9, 4.7]group_2 = [7.0, 3.8, 6.2, 6.1, 4.4, 4.9, 3.0]group_3 = [5.5, 5.1, 3.9, 4.3, 4.9, 3.2, 3.2]over_4_feet = Proc.new do |height|height>4endcan_ride_1 = group_1.select(&over_4_feet)can_ride_2 = group_2.select(&over_4_feet)can_ride_3 = group_3.select(&over_4_feet)",,,Procs: Savable Blocks,9. Create Your Own!,"Excube = Proc.new { |x| x ** 3 }[1, 2, 3].map(&cube)# [1, 8, 27]Hint 1:def method_name  yieldendHint 2:proc_name = Proc.new do  puts "Text"end""xcube = ","def greeter    yieldendphrase = Proc.new do    puts "Hello there!"endgreeter(&phrase)""ef greeter    yieldendphrase = ",,,Procs: Savable Blocks,10. Call Me Maybe,"#Unlike blocks, we can call procs directly by using Ruby's .call method.test = Proc.new { # does something }test.call# does that something!","#Go ahead and create a proc called hi that puts "Hello!", then .call it!hi = Proc.new { puts "Hello!" }hi.call""Go ahead and create a proc called hi that puts "Hello!", then .ca""o ahead and creat",,,Procs: Savable Blocks,"11. Symbols, Meet Procs","#You can also convert symbols to procs using that handy little &.strings = ["1", "2", "3"]nums = strings.map(&:to_i)# ==> [1, 2, 3]""You can also convert symbols to procs using that handy l","#Convert to strings.numbers_array = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]strings_array = numbers_array.map(&:to_s)",,,Lambdas,12. The Ruby Lambda,"#Lambdas are mostly identical to procs.lambda { puts "Hello!" }Proc.new { puts "Hello!" }""Lambdas are mostly identical to procs","def lambda_demo(a_lambda)  puts "I'm the method!"  a_lambda.callendlambda_demo(lambda { puts "I'm the lambda!" })""ef lambda_demo(a_lambda)  puts "I'm the method!"  a_lambda.callendlambda_demo(l""f lambda_demo(a_lambda)  puts "I'm the method!"  "" lambda_demo(a_lamb",,,Lambdas,13. Lambda Syntax,"#Lambdas are defined using the following syntax:lambda { |param| block }","strings = ["leonardo", "donatello", "raphael", "michaelangelo"]symbolize = lambda { |x| x.to_sym }symbols = strings.collect(&symbolize)""trings = ["leonardo", "donatello", "raphael", "michaelangelo"]symbolize = lambda { |x| x.to_sym }symbols = strings.collect(""rings = ["leonardo", "donatello", "raphael", "michaelangelo"]symbolize = lambda { |x| x.to_sym }symbols = string""ings = ["leonardo", "donatello", "raphael", "michaelangelo"]symbolize = lambda { |x| x.to_sym }symbols""ngs = ["leonardo", "donatello", "raphael", "michaelangelo"]symbolize = lambda { |x| x.to_sym }""gs = ["leonardo", "donatello", "raphael", "michaelangelo"]symbolize = lambda { |x| x.to""s = ["leonardo", "donatello", "raphael", "michaelangelo"]symbolize = lambda { |x"" = ["leonardo", "donatello", "raphael", "michaelangelo"]symbolize = lambda""= ["leonardo", "donatello", "raphael", "michaelangelo"]symbolize = la"" ["leonardo", "donatello", "raphael", "michaelangelo"]symbolize =""["leonardo", "donatello", "raphael", "michaelangelo"]symbolize"""leonardo", "donatello", "raphael", "michaelangelo"]symboliz""leonardo", "donatello", "raphael", "michaelangelo"]symboliz""eonardo", "donatello", "raphael", "michaelangelo"]""onardo", "donatello", "raphael", "michaelang""nardo", "donatello", "raphael", "mich""ardo", "donatello", "raphael", ""rdo", "donatello", "raphae""do", "donatello", "rap""o", "donatello", "r""", "donatello", """, "donatello", """ "donatello","""donatello"""donatello"""",,,Lambdas,14. Lambdas vs. Procs,"First, a lambda checks the number of arguments passed to it, while a proc does not.   Second, when a lambda returns, it passes control back to the calling method; when a proc returns, it does so immediately, without going back to the calling method.","Ex.def batman_ironman_proc  victor = Proc.new { return "Batman will win!" }  victor.call  "Iron Man will win!"endputs batman_ironman_procdef batman_ironman_lambda  victor = lambda { return "Batman will win!" }  victor.call  "Iron Man will win!"endputs batman_ironman_lambda""x.def batman_ironman_proc  victor = Proc.new { return "Batman will win!" }  victor.call  "Iron Man will win!"endputs batman_ironman_procdef batman_ironman_lambda  victor = lambda { return "Batman will win!" }  victor.ca"".def batman_ironman_proc  victor = Proc.new { return "Batman will win!" }  victor.call  "Iron Man will win!"endputs batman_ironman_procdef batman_ironman_lambda  v""def batman_ironman_proc  victor = Proc.new { return "Batman will win!" }  victor.call  "Iron Man will win!"end""def batman_ironman_proc  victor = Proc.new { return "Batman w""ef batma",,,Lambdas,15. Now You Try!,"#We'll need to put & at the beginning of our lambda name when we pass it to the method, since this will convert the lambda into the block the method expects.:hello.is_a? Symbol# ==> true","my_array = ["raindrops", :kettles, "whiskers", :mittens, :packages]# Add your code below!symbol_filter = lambda { |x| x.is_a? Symbol }symbols = my_array.select(&symbol_filter)""y_array = ["raindrops", :kettles, "whiskers", :mittens, :packages]# Add your code below!symbol_filter = lambda { |x| x.is_a? Symbol }symbols = my_array.select(&sy""_array = ["raindrops", :kettles, "whiskers", :mittens, :packages]# Add your code below!symbol_filter = lambda { |x| x.is_a? Symbol }symbols = my_array""array = ["raindrops", :kettles, "whiskers", :mittens, :packages]# Add your code below!symbol_filter = lambda { |x| x.is_a? Symbol }symbols ""rray = ["raindrops", :kettles, "whiskers", :mittens, :packages]# Add your code below!symbol_filter = lambda { |x| x.is_a? Symbol }""ray = ["raindrops", :kettles, "whiskers", :mittens, :packages]# Add your code below!symbol_filter = lambda { |x| x.is_a? ""ay = ["raindrops", :kettles, "whiskers", :mittens, :packages]# Add your code below!symbol_filter = lambda { |x| x""y = ["raindrops", :kettles, "whiskers", :mittens, :packages]# Add your code below!symbol_filter = lambda {"" = ["raindrops", :kettles, "whiskers", :mittens, :packages]# Add your code below!symbol_filter = lam""= ["raindrops", :kettles, "whiskers", :mittens, :packages]# Add your code below!symbol_filter ="" ["raindrops", :kettles, "whiskers", :mittens, :packages]# Add your code below!symbol_filte""["raindrops", :kettles, "whiskers", :mittens, :packages]# Add your code below!symbol_fil"""raindrops", :kettles, "whiskers", :mittens, :packages]# Add your code below!symbol_fi""raindrops", :kettles, "whiskers", :mittens, :packages]# Add your code below!symbol_fi""aindrops", :kettles, "whiskers", :mittens, :packages]# Add your code below!""indrops", :kettles, "whiskers", :mittens, :packages]# Add your code ""ndrops", :kettles, "whiskers", :mittens, :packages]# Add you""drops", :kettles, "whiskers", :mittens, :packages]# A""rops", :kettles, "whiskers", :mittens, :packages]""ops", :kettles, "whiskers", :mittens, :packa""ps", :kettles, "whiskers", :mittens, :pa""s", :kettles, "whiskers", :mittens, :""", :kettles, "whiskers", :mittens, "", :kettles, "whiskers", :mittens, "" :kettles, "whiskers""":kettles,",,,Lambdas,16. Quick Review,n/a,n/a,,,Review,17. Been Around the Block a Few Times,"The odds_n_ends array is full of all sorts of objects, but we only want the integers (numbers without decimal bits).","odds_n_ends = [:weezard, 42, "Trady Blix", 3, true, 19, 12.345]ints = odds_n_ends.select { |x| x.is_a? Integer }""dds_n_ends = [:weezard, 42, "Trady Blix", 3, true, 19, 12.345]ints = odds_n_ends.s""ds_n_ends = [:weezard, 42, "Trady Blix", 3, true, 19, 1""s_n_ends = [:weezard, 42, """",,,Review,18. Creating a Proc,Create a proc called under_100 that checks if a number it's passed is less than 100.,"ages = [23, 101, 7, 104, 11, 94, 100, 121, 101, 70, 44]# Add your code below!under_100 = Proc.new { |x| x<100 }",,,Review,19. Passing Your Proc to a Method,"Create a variable called youngsters and set it equal to calling .select on ages, and pass in your under_100 proc to filter for the ages that are less than one hundred. Remember to pass &under_100 to convert your proc to a block!","ages = [23, 101, 7, 104, 11, 94, 100, 121, 101, 70, 44]# Add your code below!under_100 = Proc.new { |x| x<100 }youngsters = ages.select(&under_100)",,,Review,20. Creating a Lambda,"Create a lambda called first_half that checks if a hash value is less than (that is, earlier in the alphabet than) “M".Remember, lambda syntax looks like this:my_lambda = lambda { |k,v| # code }ormy_lambda = lambda do |k,v|  # codeend""reate a lambda called first_half that checks if a hash value is less than (that is, earlier in the alphabet than) “M".Remem""eate a l","crew = {  captain: "Picard",  first_officer: "Riker",  lt_cdr: "Data",  lt: "Worf",  ensign: "Ro",  counselor: "Troi",  chief_engineer: "LaForge",  doctor: "Crusher"}# Add your code below!first_half = lambda { |k,v| v < "M" }""rew = {  captain: "Picard",  first_officer: "Riker",  lt_cdr: "Data",  lt: "Worf",  ensign: "Ro",  counselor: "Troi",  chief_engineer: "LaForge",  doctor: "Crusher"}# Add your code below!first_half = lamb""ew = {  captain: "Picard",  first_officer: "Riker",  lt_cdr: "Data",  lt: "Worf",  ensign: "Ro",  counselor: "Troi",  chief_engineer: "LaForge",  doctor: "Crusher"}# Add your code below!""w = {  captain: "Picard",  first_officer: "Riker",  lt_cdr: "Data",  lt: "Worf",  ensign: "Ro",  counselor: "Troi",  chief_engineer: "LaForge",  doctor: "Crusher"}# Ad"" = {  captain: "Picard",  first_officer: "Riker",  lt_cdr: "Data",  lt: "Worf",  ensign: "Ro",  counselor: "Troi",  chief_engineer: "LaForge",  doctor:""= {  captain: "Picard",  first_officer: "Riker",  lt_cdr: "Data",  lt: "Worf",  ensign: "Ro",  counselor: "Troi",  chief_engineer: "LaF"" {  captain: "Picard",  first_officer: "Riker",  lt_cdr: "Data",  lt: "Worf",  ensign: "Ro",  counselor: "Troi",  chief""{  captain: "Picard",  first_officer: "Riker",  lt_cdr: "Data",  lt: "Worf",  ensign: "Ro",  counselor: """  captain: "Picard",  first_officer: "Riker",  lt_cdr: "Data",  lt: "Worf",  ensign: "Ro", ""  captain: "Picard",  first_officer: "Riker",  lt_cdr: "Data",  lt: "Worf",  ens"" captain: "Picard",  first_officer: "Riker",  lt_cdr: "Data",  lt: "W""captain: "Picard",  first_officer: "Riker",  lt_cdr: "Data"""aptain: "Picard",  first_officer: "Riker",  lt_cd""ptain: "Picard",  first_officer: "Riker",""tain: "Picard",  first_officer: """ain: "Picard",  first_offi""in: "Picard",  first""n: "Picard",  f"": "Picard","" "Picard""""Picard""Picard",,,Review,21. Passing Your Lambda to a Method,,"crew = {  captain: "Picard",  first_officer: "Riker",  lt_cdr: "Data",  lt: "Worf",  ensign: "Ro",  counselor: "Troi",  chief_engineer: "LaForge",  doctor: "Crusher"}# Add your code below!first_half = lambda { |k,v| v < "M" }a_to_m = crew.select(&first_half)""rew = {  captain: "Picard",  first_officer: "Riker",  lt_cdr: "Data",  lt: "Worf",  ensign: "Ro",  counselor: "Troi",  chief_engineer: "LaForge",  doctor: "Crusher"}# Add your code below!first_half = lambda { |k,v| v < "M" }a_to_m = crew""ew = {  captain: "Picard",  first_officer: "Riker",  lt_cdr: "Data",  lt: "Worf",  ensign: "Ro",  counselor: "Troi",  chief_engineer: "LaForge",  doctor: "Crusher"}# Add your code below!first_half = lambda { |k,v| v < """w = {  captain: "Picard",  first_officer: "Riker",  lt_cdr: "Data",  lt: "Worf",  ensign: "Ro",  counselor: "Troi",  chief_engineer: "LaForge",  doctor: "Crusher"}# Add your code below!first_half = la"" = {  captain: "Picard",  first_officer: "Riker",  lt_cdr: "Data",  lt: "Worf",  ensign: "Ro",  counselor: "Troi",  chief_engineer: "LaForge",  doctor: "Crusher"}# Add your code below!""= {  captain: "Picard",  first_officer: "Riker",  lt_cdr: "Data",  lt: "Worf",  ensign: "Ro",  counselor: "Troi",  chief_engineer: "LaForge",  doctor: "Crusher"}# Add "" {  captain: "Picard",  first_officer: "Riker",  lt_cdr: "Data",  lt: "Worf",  ensign: "Ro",  counselor: "Troi",  chief_engineer: "LaForge",  doctor: "Cr""{  captain: "Picard",  first_officer: "Riker",  lt_cdr: "Data",  lt: "Worf",  ensign: "Ro",  counselor: "Troi",  chief_engineer: "LaForge",""  captain: "Picard",  first_officer: "Riker",  lt_cdr: "Data",  lt: "Worf",  ensign: "Ro",  counselor: "Troi",  chief_enginee""  captain: "Picard",  first_officer: "Riker",  lt_cdr: "Data",  lt: "Worf",  ensign: "Ro",  counselor: "Troi",  c"" captain: "Picard",  first_officer: "Riker",  lt_cdr: "Data",  lt: "Worf",  ensign: "Ro",  counselor: ""captain: "Picard",  first_officer: "Riker",  lt_cdr: "Data",  lt: "Worf",  ensign: "Ro",  c""aptain: "Picard",  first_officer: "Riker",  lt_cdr: "Data",  lt: "Worf",  ensign: ""ptain: "Picard",  first_officer: "Riker",  lt_cdr: "Data",  lt: "Worf",  ""tain: "Picard",  first_officer: "Riker",  lt_cdr: "Data",  lt: "Wo""ain: "Picard",  first_officer: "Riker",  lt_cdr: "Data",  l""in: "Picard",  first_officer: "Riker",  lt_cdr: "Data"""n: "Picard",  first_officer: "Riker",  lt_cdr: "D"": "Picard",  first_officer: "Riker",  lt_cdr:"" "Picard",  first_officer: "Riker",  lt_cd"""Picard",  first_officer: "Riker",  lt_c""Picard",  first_officer: "Riker",  lt_c""icard",  first_officer: "Riker",""card",  first_officer: "Rik""ard",  first_officer: ""rd",  first_office""d",  first_offi""",  first_off"",  first_off",,,Introduction to Classes,1. Why Classes?,,,,,,,,,,,