Links,,http://www.tutorialspoint.com/ruby/ruby_builtin_functions.htm Link for style guide:,github.com/bbatsov/ruby-style-guide ,Atom,Text with directions and references,Soft tabs:,"2 spaces, convert tabs to spaces"class names:,"CamelCaseThisIsCamelCase"file names:,"snake_casethis_is_snake_case.rb"Setup: New Rails App,Creating the Blog Application,Go to Desktop Directory: $ cd ~/DesktopCreate new directory,$ mkdir workspace2 (directoryname)Switch into new directory,$ cd ~/Desktop/workspace2 (directory name)Create new rails app,$ rails new blog (rails app name)Switch into new app,"$ ls (is blog [new rails app] listed?)$ cd blog (rails app name)$ ls (are rails directories listed?)"Setup: Starting Server,Starting up the Web Server (local),$ rails serverTo Shutdown Server,$ Ctrl-C"Copy generated link and visit.If local: http://localhost:3000 ",Note the version and data info.Open new Terminal Window,Command t *Be sure you’re in blog directory (rails application/project)Generate welcome controller & index,$ rails generate controller welcome indexOpen Rails App in Text Editor,atom . (in terminal / command line)Verify Controller,Go to app/controllers/welcome_controllerVerify View:,Go to app/views/welcome/index.html.erbCreate Custom Message,"Open the app/views/welcome/index.html.erbDelete everything.Type: <h1>Hello, Rails!<h1>"Setting the Application Home Page Modify routes p.1. Navigate:,"Open the file config/routes.rb in your editor.Uncomment: root ‘welcome#index' (remove #)Refresh page."To Clear Terminal,clearCreate hello world.rb file above blog,terminal > cd .. (go to workspace) > atom . > Go to Atom > workspace > Right Click > Create Filehelloworld.rb contents (create string),"hello = "Hello World!"puts hello""ello = "Hello World!"pu""llo = "Hello Wor""lo = "Hel""o ="Run helloworld.rb from command line:,ruby helloworld.rbShortcut for running same command,Up Arrow > return (repeats previous command)irb playground,terminal > irbTo clear screen (in irb):,Ctrl + lget out of rib playground,terminal > exitDifferences between Blocks and Procs,"http://awaxman11.github.io/blog/2013/08/05/what-is-the-difference-between-a-block/ Procs are objects, blocks are notAt most one block can appear in an argument list"Differences between Procs and Lambdas,"1. Lambdas check the number of arguments, while procs do not.2. Lambdas and procs treat the ‘return’ keyword differently. ",Daily Practice,Block Examples,"[1,2,3].each { |x| puts x*2 }   # block is in between the curly braces[1,2,3].each do |x|  puts x*2                    # block is everything between the do and endend"Proc Examples ,"p = Proc.new { |x| puts x*2 }[1,2,3].each(&p)              # The '&' tells ruby to turn the proc into a block proc = Proc.new { puts "Hello World" }proc.call                     # The body of the Proc object gets executed when called"" = Proc.new { |x| puts x*2 }[1,2,3].each(&p)              # The '&' tells ruby to turn the proc int"Lambda Examples,"lam = lambda { |x| puts x*2 }[1,2,3].each(&lam)lam = lambda { puts "Hello World" }lam.call""am = lambda { |x| puts ",.gsub(),"sample = "hae".gsub("e", "t")puts sample""ample = "hae".gsub("e", "t")pu""mple = "hae".gsub("e",""ple = "hae".gs""le = "h""e"method (2. w/ argument - greeting),"def greeting(name)	puts "Hello, #{name}"endgreeting("adam")""ef greeting(name)	puts "Hello, #{nam""f greeting(n"methods w/ array (ex. 2 - join),"p = ["my", "name", "is", "adam"]m = p.join(" ")puts m"" = ["my", "name", "is", "adam"]m = p.join(" ")p""= ["my", "name", "is", "adam"]m = p.join(" "" ["my", "name", "is", "adam"]m = p.join""["my", "name", "is", "adam"]m = p.jo"""my", "name", "is", "adam"]m = p.j""my", "name", "is", "adam"]m = p.j""y", "name", "is", "adam"]m = p""", "name", "is", "adam"]m = "", "name", "is", "adam"]m = "" "name", "is", "adam"]m """name", "is", "adam"]m""name", "is", "adam"]m""ame", "is", "adam""me", "is", "a""e", "is", """, "is","", "is","" "is"""i""i"while loop,"i=0while i<10  puts "I'm number #{i}."  i+=1end""=0while i<10  puts "I'm nu""0whil"while loop: for range .length (ex. 4),"arr1 = [1,2,3,4,5]i=0while i<=arr1.length  puts i  i+=1end"for loop: range to array (ex. 2),"y = (0..99).to_afor x in yputs "Hi"end"" = (0.."for loop: for range .length (ex. 4),"arr2 = (11..20).to_afor j in 0..(arr2.length-1)  puts arr2[j]end"for loop (array),"arr1 = [1,2,3,4]for k in 0..(arr1.length-1)  puts "I'm number #{arr1[k]} in arr1."end""rr1 = [1,2,3,4]for k in 0..(arr1.l"for loop (range),"for j in 20..29  puts "I'm number #{j}."  i+=1end""or j in 20..29  puts "I'm n""r j i"hash in array,"contacts = [  {    fn: "adam",    ln: "booth",    phone: "312-555-1212"  },  {    fn: "gahee",    ln: "heo",    phone: "630-555-1212"  }]contacts.each {|el|  el.each{|key, value|    puts "#{key}: #{value}"  }}""ontacts = [  {    fn: "adam",    ln: "booth",    phone: "312-555-1212"  },  {    fn: "gahee",    ln: "heo",    phone: "630-555-1212"  }]contacts.each {|el|  el.each{|key, value|    puts""ntacts = [  {    fn: "adam",    ln: "booth",    phone: "312-555-1212"  },  {    fn: "gahee",    ln: "heo",    phone: "630-555-1212"  }]contacts.each {|el|  el.ea""tacts = [  {    fn: "adam",    ln: "booth",    phone: "312-555-1212"  },  {    fn: "gahee",    ln: "heo",    phone: "630-555-1212"  }]cont""acts = [  {    fn: "adam",    ln: "booth",    phone: "312-555-1212"  },  {    fn: "gahee",    ln: "heo",    phone: "630""cts = [  {    fn: "adam",    ln: "booth",    phone: "312-555-1212"  },  {    fn: "gahee",    ln: """ts = [  {    fn: "adam",    ln: "booth",    phone: "312-555-1212"  },  {    fn""s = [  {    fn: "adam",    ln: "booth",    phone: "312-555-121"" = [  {    fn: "adam",    ln: "booth",    p""= [  {    fn: "adam",    l"" [  {    f"Ex 10. gets.chomp w/ numbers,"puts "num1:"num1 = gets.chompputs "num2:"num2 = gets.chompputs num1.to_i * num2.to_i""uts "num1:"num1 = gets.chompputs "num2:"num2 = gets.chompputs num1.to_i * num2""ts "num1:"num1 = gets.chompputs "num2:"num2 = gets.chompputs num1.to_i * ""s "num1:"num1 = gets.chompputs "num2:"num2 = gets.chompputs num1.to_i"" "num1:"num1 = gets.chompputs "num2:"num2 = gets.chompputs num1.to"""num1:"num1 = gets.chompputs "num2:"num2 = gets.chompputs num1.t""num1:"num1 = gets.chompputs "num2:"num2 = gets.chompputs num1.t""um1:"num1 = gets.chompputs "num2:"num2 = gets.chompputs n""m1:"num1 = gets.chompputs "num2:"num2 = gets.chomppu""1:"num1 = gets.chompputs "num2:"num2 = gets.chomp"":"num1 = gets.chompputs "num2:"num2 = gets.chom"""num1 = gets.chompputs "num2:"num2 = gets.cho""num1 = gets.chompputs "num2:"num2 = gets.cho""num1 = gets.chompputs"check class or methods,"num1 = 5puts num1.to_f.classputs num1.to_f.methods""Array of usernames ","puts "Please enter username."username = gets.chompwelcome = "Welcome back #{username.capitalize}."notFound = "Username not found.  Please register."users = ["frank", "tom"]result = falseusers.each {|x|  if username == x    result = true  end}if result  puts welcomeelse  puts notFoundend""uts "Please enter username."username = gets.chompwelcome = "Welcome back #{username.capitalize}."notFound = "Username not found.  Please register."users = ["frank", "tom"]result = falseusers.each {|x|  if username == x    result = true  end}if result  puts welcomeelse  puts notFound""ts "Please enter username."username = gets.chompwelcome = "Welcome back #{username.capitalize}."notFound = "Username not found.  Please register."users = ["frank", "tom"]result = falseusers.each {|x|  if username == x    result = true  end}if result  puts welcomeelse  puts notF""s "Please enter username."username = gets.chompwelcome = "Welcome back #{username.capitalize}."notFound = "Username not found.  Please register."users = ["frank", "tom"]result = falseusers.each {|x|  if username == x    result = true  end}if result  puts welcomeelse  puts n"" "Please enter username."username = gets.chompwelcome = "Welcome back #{username.capitalize}."notFound = "Username not found.  Please register."users = ["frank", "tom"]result = falseusers.each {|x|  if username == x    result = true  end}if result  puts welcomeelse  puts"""Please enter username."username = gets.chompwelcome = "Welcome back #{username.capitalize}."notFound = "Username not found.  Please register."users = ["frank", "tom"]result = falseusers.each {|x|  if username == x    result = true  end}if result  puts welcomeelse  put""Please enter username."username = gets.chompwelcome = "Welcome back #{username.capitalize}."notFound = "Username not found.  Please register."users = ["frank", "tom"]result = falseusers.each {|x|  if username == x    result = true  end}if result  puts welcomeelse  put""lease enter username."username = gets.chompwelcome = "Welcome back #{username.capitalize}."notFound = "Username not found.  Please register."users = ["frank", "tom"]result = falseusers.each {|x|  if username == x    result = true  end}if result  p""ease enter username."username = gets.chompwelcome = "Welcome back #{username.capitalize}."notFound = "Username not found.  Please register."users = ["frank", "tom"]result = falseusers.each {|x|  if username == x    result = true ""ase enter username."username = gets.chompwelcome = "Welcome back #{username.capitalize}."notFound = "Username not found.  Please register."users = ["frank", "tom"]result = falseusers.each {|x|  if username == x""se enter username."username = gets.chompwelcome = "Welcome back #{username.capitalize}."notFound = "Username not found.  Please register."users = ["frank", "tom"]result = falseusers.each {|x|""e enter username."username = gets.chompwelcome = "Welcome back #{username.capitalize}."notFound = "Username not found.  Please register."users = ["frank", "tom"]result = fals"" enter username."username = gets.chompwelcome = "Welcome back #{username.capitalize}."notFound = "Username not found.  Please register."users = ["frank", "to""enter username."username = gets.chompwelcome = "Welcome back #{username.capitalize}."notFound = "Username not found.  Please register."users""nter username."username = gets.chompwelcome = "Welcome back #{username.capitalize}."notFound = "Username not found.  Please re""ter username."username = gets.chompwelcome = "Welcome back #{username.capitalize}."notFound = "Username not fou""er username."username = gets.chompwelcome = "Welcome back #{username.capitalize}."notFound = "Use""r username."username = gets.chompwelcome = "Welcome back #{username.capitalize}."not"" username."username = gets.chompwelcome = "Welcome back #{username.capita""username."username = gets.chompwelcome = "Welcome back #{usern""sername."username = gets.chompwelcome = "Welcome bac""ername."username = gets.chompwelcome = "Wel""rname."username = gets.chompwelcome""name."username = gets.chompw""ame."username = gets.cho""me."username = gets""e."username = g""."username ="""username ""username ""Delete key,value pair delete key:",myhash.delete(:d)"Add a key,value pair to hash above:","myhash[:d] = 7myhash[:name] = "Mashrur"""yhash[:d"Iterate through & delete items from hash based on condition (Ex. if value greater than 3):,"myhash.each { |k, v| myhash.delete(k) if v > 3 }"replace multiple values,"contacts = [  {    fn: "tony",    ln: "sample"  },  {    fn: "bill",    ln: "doe"  },  {    fn: "pete",    ln: "jacobs"  },  {    fn: "luke",    ln: "smith"  }]# contacts.each {|el|#   el.each {|k, v| el[:fn] = "adam" if v == "luke"}# }contacts.each {|el|  el.each {|k, v|    el[:fn] = "adam" if v == "luke", el[:ln] = "booth" if v == "smith"  }}contacts.each {|x|  x.each {|key, value|    puts "#{key}: #{value}"  }}""ontacts = [  {    fn: "tony",    ln: "sample"  },  {    fn: "bill",    ln: "doe"  },  {    fn: "pete",    ln: "jacobs"  },  {    fn: "luke",    ln: "smith"  }]# contacts.each {|el|#   el.each {|k, v| el[:fn] = "adam" if v == "luke"}# }contacts.each {|el|  el.each {|k, v|    el[:fn] = "adam" if v == "luke", el[:ln] = "booth" if v == "smith"  }}contacts.each {|x|  x.each {|key, value|    puts""ntacts = [  {    fn: "tony",    ln: "sample"  },  {    fn: "bill",    ln: "doe"  },  {    fn: "pete",    ln: "jacobs"  },  {    fn: "luke",    ln: "smith"  }]# contacts.each {|el|#   el.each {|k, v| el[:fn] = "adam" if v == "luke"}# }contacts.each {|el|  el.each {|k, v|    el[:fn] = "adam" if v == "luke", el[:ln] = "booth" if v == "smith"  }}contacts.each {|x|  x.eac""tacts = [  {    fn: "tony",    ln: "sample"  },  {    fn: "bill",    ln: "doe"  },  {    fn: "pete",    ln: "jacobs"  },  {    fn: "luke",    ln: "smith"  }]# contacts.each {|el|#   el.each {|k, v| el[:fn] = "adam" if v == "luke"}# }contacts.each {|el|  el.each {|k, v|    el[:fn] = "adam" if v == "luke", el[:ln] = "booth" if v == "smith"  }}con""acts = [  {    fn: "tony",    ln: "sample"  },  {    fn: "bill",    ln: "doe"  },  {    fn: "pete",    ln: "jacobs"  },  {    fn: "luke",    ln: "smith"  }]# contacts.each {|el|#   el.each {|k, v| el[:fn] = "adam" if v == "luke"}# }contacts.each {|el|  el.each {|k, v|    el[:fn] = "adam" if v == "luke", el[:ln] = "booth" if v""cts = [  {    fn: "tony",    ln: "sample"  },  {    fn: "bill",    ln: "doe"  },  {    fn: "pete",    ln: "jacobs"  },  {    fn: "luke",    ln: "smith"  }]# contacts.each {|el|#   el.each {|k, v| el[:fn] = "adam" if v == "luke"}# }contacts.each {|el|  el.each {|k, v|    el[:fn] = "adam" if v == "luke", e""ts = [  {    fn: "tony",    ln: "sample"  },  {    fn: "bill",    ln: "doe"  },  {    fn: "pete",    ln: "jacobs"  },  {    fn: "luke",    ln: "smith"  }]# contacts.each {|el|#   el.each {|k, v| el[:fn] = "adam" if v == "luke"}# }contacts.each {|el|  el.each {|k, v|    el[:fn] = "ada""s = [  {    fn: "tony",    ln: "sample"  },  {    fn: "bill",    ln: "doe"  },  {    fn: "pete",    ln: "jacobs"  },  {    fn: "luke",    ln: "smith"  }]# contacts.each {|el|#   el.each {|k, v| el[:fn] = "adam" if v == "luke"}# }contacts.each {|el|  el.each {|k, v|"" = [  {    fn: "tony",    ln: "sample"  },  {    fn: "bill",    ln: "doe"  },  {    fn: "pete",    ln: "jacobs"  },  {    fn: "luke",    ln: "smith"  }]# contacts.each {|el|#   el.each {|k, v| el[:fn] = "adam" if v == "luke"}# }contacts.each {|el|""= [  {    fn: "tony",    ln: "sample"  },  {    fn: "bill",    ln: "doe"  },  {    fn: "pete",    ln: "jacobs"  },  {    fn: "luke",    ln: "smith"  }]# contacts.each {|el|#   el.each {|k, v| el[:fn] = "adam" if v == "luke"}# }co"" [  {    fn: "tony",    ln: "sample"  },  {    fn: "bill",    ln: "doe"  },  {    fn: "pete",    ln: "jacobs"  },  {    fn: "luke",    ln: "smith"  }]# contacts.each {|el|#   el.each {|k, v| el[:fn] = "adam" if v ==""[  {    fn: "tony",    ln: "sample"  },  {    fn: "bill",    ln: "doe"  },  {    fn: "pete",    ln: "jacobs"  },  {    fn: "luke",    ln: "smith"  }]# contacts.each {|el|#   el.each {|k, v| el[:fn] =""  {    fn: "tony",    ln: "sample"  },  {    fn: "bill",    ln: "doe"  },  {    fn: "pete",    ln: "jacobs"  },  {    fn: "luke",    ln: "smith"  }]# contacts.each {|el|#   el.each {|k""  {    fn: "tony",    ln: "sample"  },  {    fn: "bill",    ln: "doe"  },  {    fn: "pete",    ln: "jacobs"  },  {    fn: "luke",    ln: "smith"  }]# contacts.each {|el|# "" {    fn: "tony",    ln: "sample"  },  {    fn: "bill",    ln: "doe"  },  {    fn: "pete",    ln: "jacobs"  },  {    fn: "luke",    ln: "smith"  }]# contacts.e""{    fn: "tony",    ln: "sample"  },  {    fn: "bill",    ln: "doe"  },  {    fn: "pete",    ln: "jacobs"  },  {    fn: "luke",    ln: "smith"  }]#""    fn: "tony",    ln: "sample"  },  {    fn: "bill",    ln: "doe"  },  {    fn: "pete",    ln: "jacobs"  },  {    fn: "luke",    ln: "smith""    fn: "tony",    ln: "sample"  },  {    fn: "bill",    ln: "doe"  },  {    fn: "pete",    ln: "jacobs"  },  {    fn: "luke",    l""   fn: "tony",    ln: "sample"  },  {    fn: "bill",    ln: "doe"  },  {    fn: "pete",    ln: "jacobs"  },  {    fn: "luke""  fn: "tony",    ln: "sample"  },  {    fn: "bill",    ln: "doe"  },  {    fn: "pete",    ln: "jacobs"  },  {    fn"" fn: "tony",    ln: "sample"  },  {    fn: "bill",    ln: "doe"  },  {    fn: "pete",    ln: "jacobs"  },  {""fn: "tony",    ln: "sample"  },  {    fn: "bill",    ln: "doe"  },  {    fn: "pete",    ln: "jacobs"  },""n: "tony",    ln: "sample"  },  {    fn: "bill",    ln: "doe"  },  {    fn: "pete",    ln: "jacobs""": "tony",    ln: "sample"  },  {    fn: "bill",    ln: "doe"  },  {    fn: "pete",    ln: "jacob"" "tony",    ln: "sample"  },  {    fn: "bill",    ln: "doe"  },  {    fn: "pete",    ln: "jac"""tony",    ln: "sample"  },  {    fn: "bill",    ln: "doe"  },  {    fn: "pete",    ln: "ja""tony",    ln: "sample"  },  {    fn: "bill",    ln: "doe"  },  {    fn: "pete",    ln: "ja""ony",    ln: "sample"  },  {    fn: "bill",    ln: "doe"  },  {    fn: "pete",    ln:""ny",    ln: "sample"  },  {    fn: "bill",    ln: "doe"  },  {    fn: "pete",    ""y",    ln: "sample"  },  {    fn: "bill",    ln: "doe"  },  {    fn: "pete",  """,    ln: "sample"  },  {    fn: "bill",    ln: "doe"  },  {    fn: "pete", "",    ln: "sample"  },  {    fn: "bill",    ln: "doe"  },  {    fn: "pete", ""    ln: "sample"  },  {    fn: "bill",    ln: "doe"  },  {    fn:""    ln: "sample"  },  {    fn: "bill",    ln: "doe"  },  ""   ln: "sample"  },  {    fn: "bill",    ln: "doe"""  ln: "sample"  },  {    fn: "bill",    ln"" ln: "sample"  },  {    fn: "bill",""ln: "sample"  },  {    fn: "bi""n: "sample"  },  {    fn:"": "sample"  },  {    "" "sample"  },  {  """sample"  },  { ""sample"  },  { ""ample"  },""mple"""""want to add user input fn & ln, to add 3rd contact in hash, then output.","puts "Enter first name:"fn = gets.chompputs "Enter last name:"ln = gets.chompcontacts.each {|el|el.each {|k,v| el[:fn] == fn el[:ln] == ln}}contacts = [  {    fn: "bill",    ln: "smith",  },  {    fn: "ted",    ln: "jones"  }]contacts.each{|el|el.each{|k,v|  puts "#{k}: #{v}"  }}""uts "Enter first name:"fn = gets.chompputs "Enter last name:"ln = gets.chompcontacts.each {|el|el.each {|k,v| el[:fn] == fn el[:ln] == ln}}contacts = [  {    fn: "bill",    ln: "smith",  },  {    fn: "ted",    ln: "jones"  }]contacts.each{|el|el.each{|k,v|  puts "#{k}: #{v}"""ts "Enter first name:"fn = gets.chompputs "Enter last name:"ln = gets.chompcontacts.each {|el|el.each {|k,v| el[:fn] == fn el[:ln] == ln}}contacts = [  {    fn: "bill",    ln: "smith",  },  {    fn: "ted",    ln: "jones"  }]contacts.each{|el|el.each{|k,v|  puts "#{k}: #{""s "Enter first name:"fn = gets.chompputs "Enter last name:"ln = gets.chompcontacts.each {|el|el.each {|k,v| el[:fn] == fn el[:ln] == ln}}contacts = [  {    fn: "bill",    ln: "smith",  },  {    fn: "ted",    ln: "jones"  }]contacts.each{|el|el.each{|k,v|  puts "#{k}:"" "Enter first name:"fn = gets.chompputs "Enter last name:"ln = gets.chompcontacts.each {|el|el.each {|k,v| el[:fn] == fn el[:ln] == ln}}contacts = [  {    fn: "bill",    ln: "smith",  },  {    fn: "ted",    ln: "jones"  }]contacts.each{|el|el.each{|k,v|  puts "#{k"""Enter first name:"fn = gets.chompputs "Enter last name:"ln = gets.chompcontacts.each {|el|el.each {|k,v| el[:fn] == fn el[:ln] == ln}}contacts = [  {    fn: "bill",    ln: "smith",  },  {    fn: "ted",    ln: "jones"  }]contacts.each{|el|el.each{|k,v|  puts "#{""Enter first name:"fn = gets.chompputs "Enter last name:"ln = gets.chompcontacts.each {|el|el.each {|k,v| el[:fn] == fn el[:ln] == ln}}contacts = [  {    fn: "bill",    ln: "smith",  },  {    fn: "ted",    ln: "jones"  }]contacts.each{|el|el.each{|k,v|  puts "#{""nter first name:"fn = gets.chompputs "Enter last name:"ln = gets.chompcontacts.each {|el|el.each {|k,v| el[:fn] == fn el[:ln] == ln}}contacts = [  {    fn: "bill",    ln: "smith",  },  {    fn: "ted",    ln: "jones"  }]contacts.each{|el|el.each""ter first name:"fn = gets.chompputs "Enter last name:"ln = gets.chompcontacts.each {|el|el.each {|k,v| el[:fn] == fn el[:ln] == ln}}contacts = [  {    fn: "bill",    ln: "smith",  },  {    fn: "ted",    ln: "jones"  }]contacts.e""er first name:"fn = gets.chompputs "Enter last name:"ln = gets.chompcontacts.each {|el|el.each {|k,v| el[:fn] == fn el[:ln] == ln}}contacts = [  {    fn: "bill",    ln: "smith",  },  {    fn: "ted",    ln: "jones"  ""r first name:"fn = gets.chompputs "Enter last name:"ln = gets.chompcontacts.each {|el|el.each {|k,v| el[:fn] == fn el[:ln] == ln}}contacts = [  {    fn: "bill",    ln: "smith",  },  {    fn: "ted",    "" first name:"fn = gets.chompputs "Enter last name:"ln = gets.chompcontacts.each {|el|el.each {|k,v| el[:fn] == fn el[:ln] == ln}}contacts = [  {    fn: "bill",    ln: "smith",  },  {    fn""first name:"fn = gets.chompputs "Enter last name:"ln = gets.chompcontacts.each {|el|el.each {|k,v| el[:fn] == fn el[:ln] == ln}}contacts = [  {    fn: "bill",    ln: "smith",  }""irst name:"fn = gets.chompputs "Enter last name:"ln = gets.chompcontacts.each {|el|el.each {|k,v| el[:fn] == fn el[:ln] == ln}}contacts = [  {    fn: "bill",    ln: """rst name:"fn = gets.chompputs "Enter last name:"ln = gets.chompcontacts.each {|el|el.each {|k,v| el[:fn] == fn el[:ln] == ln}}contacts = [  {    fn: "bill",""st name:"fn = gets.chompputs "Enter last name:"ln = gets.chompcontacts.each {|el|el.each {|k,v| el[:fn] == fn el[:ln] == ln}}contacts = [  {    fn""t name:"fn = gets.chompputs "Enter last name:"ln = gets.chompcontacts.each {|el|el.each {|k,v| el[:fn] == fn el[:ln] == ln}}contacts = [  "" name:"fn = gets.chompputs "Enter last name:"ln = gets.chompcontacts.each {|el|el.each {|k,v| el[:fn] == fn el[:ln] == ln}}contacts""name:"fn = gets.chompputs "Enter last name:"ln = gets.chompcontacts.each {|el|el.each {|k,v| el[:fn] == fn el[:ln] == ln}}co""ame:"fn = gets.chompputs "Enter last name:"ln = gets.chompcontacts.each {|el|el.each {|k,v| el[:fn] == fn el[:ln] == ln}""me:"fn = gets.chompputs "Enter last name:"ln = gets.chompcontacts.each {|el|el.each {|k,v| el[:fn] == fn el[:ln] == ""e:"fn = gets.chompputs "Enter last name:"ln = gets.chompcontacts.each {|el|el.each {|k,v| el[:fn] == fn el[:ln] "":"fn = gets.chompputs "Enter last name:"ln = gets.chompcontacts.each {|el|el.each {|k,v| el[:fn] == fn el[:ln"""fn = gets.chompputs "Enter last name:"ln = gets.chompcontacts.each {|el|el.each {|k,v| el[:fn] == fn el[:l""fn = gets.chompputs "Enter last name:"ln = gets.chompcontacts.each {|el|el.each {|k,v| el[:fn] == fn el[:l""fn = gets.chompputs "Enter last name:"ln = gets.chompcontacts.each {|el|el.each {|k""n = gets.chompputs "Enter last name:"ln = gets.chompcontacts."" = gets.chompputs "Enter last name:"ln = ""= gets.chompputs "Ent"" ge"methods w/ array (ex. 1),"arr = (50..100).to_aputs arr.select { |x| x.odd?}arr.each { |x| puts x if x.odd?}puts arr"procs,"array1 = [29,35,54]array2 = [27,36,44]proc1 = Proc.new{ |x| x > 21}proc2 = Proc.new{ |x| x > 30}group1 = array1.select(&proc1)group2 = array2.select(&proc2)puts group1puts group2"Create Class & Global Variable,"class Class1  def initialize(ob1,ob2,ob3)    @ob1 = ob1    @ob2 = ob2    @ob3 = ob3  end  def about    puts "#{@ob1} from #{@ob2} likes #{@ob3}."  end  $global_var = puts "We have many members from all over the world."endmember1 = Class1.new("Adam","USA","golf")member1.about$global_var""lass Class1  def initialize(ob1,ob2,ob3)    @ob1 = ob1    @ob2 = ob2    @ob3 = ob3  end  def about    puts "#{@ob1} from #{@ob2} likes #{@ob3}."  end  $global_var = puts "We ha""ass Class1  def initialize(ob1,ob2,ob3)    @ob1 = ob1    @ob2 = ob2"lambdas,super fun game,"# didn't work when it was first, but worked when at bottom.  How to know the proper order?## puts "Do you want to play a game?"# play_game = gets.chomp## if play_game == "yes"#   super_proc_yes.call# else#   super_proc_no.call# endsuper_proc_no = Proc.new {  puts "Why don't you want to play a game?  Is it because you are tired, busy, or you are a boring person?"  tired_busy_boring = gets.chomp    if tired_busy_boring == "tired"      puts "This game will give you energy."    elsif tired_busy_boring == "busy"      puts "You should make time for this awesome game."    elsif tired_busy_boring == "boring"      puts "I understand.  This game is not for boring people.  I'm glad you are not playing.  Goodbye!"    else      puts "That's not a good enough reason not to play the fun game!"    end}super_proc_yes = Proc.new{yes = "That's correct!"no = "Sorry.  You are so wrong!"color_proc = Proc.new{  puts "what color is a leaf?"  leaf_color = gets.chomp    if leaf_color == "green"      puts yes    else      puts no    end}num_proc = Proc.new{  puts "how many days in a week?"  days = gets.chomp  if days == "7"    puts yes  else    puts no  end}puts "Do you want to play the color game or the number game?"answer = gets.chompif answer == "color"  color_proc.callelsif answer == "number"  num_proc.callend}puts "Do you want to play a game?"play_game = gets.chompif play_game == "yes"  super_proc_yes.callelse  super_proc_no.callend"" didn't work when it was first, but worked when at bottom.  How to know the proper order?## puts "Do you want to play a game?"# play_game = gets.chomp## if play_game == "yes"#   super_proc_yes.call# else#   super_proc_no.call# endsuper_proc_no = Proc.new {  puts "Why don't you want to play a game?  Is it because you are tired, busy, or you are a boring person?"  tired_busy_boring = gets.chomp    if tired_busy_boring == "tired"      puts "This game will give you energy."    elsif tired_busy_boring == "busy"      puts "You should make time for this awesome game."    elsif tired_busy_boring == "boring"      puts "I understand.  This game is not for boring people.  I'm glad you are not playing.  Goodbye!"    else      puts "That's not a good enough reason not to play the fun game!"    end}super_proc_yes = Proc.new{yes = "That's correct!"no = "Sorry.  You are so wrong!"color_proc = Proc.new{  puts "what color is a leaf?"  leaf_color = gets.chomp    if leaf_color == "green"      puts yes    else      puts no    end}num_proc = Proc.new{  puts "how many days in a week?"  days = gets.chomp  if days == "7"    puts yes  else    puts no  end}puts "Do you want to play the color game or the number game?"answer = gets.chompif answer == "color"  color_proc.callelsif answer == "number"  num_proc.callend}puts "Do you want to play a game?""didn't work when it was first, but worked when at bottom.  How to know the proper order?## puts "Do you want to play a game?"# play_game = gets.chomp## if play_game == "yes"#   super_proc_yes.call# else#   super_proc_no.call# endsuper_proc_no = Proc.new {  puts "Why don't you want to play a game?  Is it because you are tired, busy, or you are a boring person?"  tired_busy_boring = gets.chomp    if tired_busy_boring == "tired"      puts "This game will give you energy."    elsif tired_busy_boring == "busy"      puts "You should make time for this awesome game."    elsif tired_busy_boring == "boring"      puts "I understand.  This game is not for boring people.  I'm glad you are not playing.  Goodbye!"    else      puts "That's not a good enough reason not to play the fun game!"    end}super_proc_yes = Proc.new{yes = "That's correct!"no = "Sorry.  You are so wrong!"color_proc = Proc.new{  puts "what color is a leaf?"  leaf_color = gets.chomp    if leaf_color == "green"      puts yes    else      puts no    end}num_proc = Proc.new{  puts "how many days in a week?"  days = gets.chomp  if days == "7"    puts yes  else    puts no  end}puts "Do you want to play the color game or the number game?"answer = gets.chompif answer == "color"""idn't work when it was first, but worked when at bottom.  How to know the proper order?## puts "Do you want to play a game?"# play_game = gets.chomp## if play_game == "yes"#   super_proc_yes.call# else#   super_proc_no.call# endsuper_proc_no = Proc.new {  puts "Why don't you want to play a game?  Is it because you are tired, busy, or you are a boring person?"  tired_busy_boring = gets.chomp    if tired_busy_boring == "tired"      puts "This game will give you energy."    elsif tired_busy_boring == "busy"      puts "You should make time for this awesome game."    elsif tired_busy_boring == "boring"      puts "I understand.  This game is not for boring people.  I'm glad you are not playing.  Goodbye!"    else      puts "That's not a good enough reason not to play the fun game!"    end}super_proc_yes = Proc.new{yes = "That's correct!"no = "Sorry.  You are so wrong!"color_proc = Proc.new{  puts "what color is a leaf?"  leaf_color = gets.chomp    if leaf_color == "green"      puts yes    else      puts no    end}num_proc = Proc.new{  puts "how many days in a week?"  days = gets.chomp  if days == "7"    puts yes  else    puts no  end}puts "D""dn't work when it was first, but worked when at bottom.  How to know the proper order?## puts "Do you want to play a game?"# play_game = gets.chomp## if play_game == "yes"#   super_proc_yes.call# else#   super_proc_no.call# endsuper_proc_no = Proc.new {  puts "Why don't you want to play a game?  Is it because you are tired, busy, or you are a boring person?"  tired_busy_boring = gets.chomp    if tired_busy_boring == "tired"      puts "This game will give you energy."    elsif tired_busy_boring == "busy"      puts "You should make time for this awesome game."    elsif tired_busy_boring == "boring"      puts "I understand.  This game is not for boring people.  I'm glad you are not playing.  Goodbye!"    else      puts "That's not a good enough reason not to play the fun game!"    end}super_proc_yes = Proc.new{yes = "That's correct!"no = "Sorry.  You are so wrong!"color_proc = Proc.new{  puts "what color is a leaf?"  leaf_color = gets.chomp    if leaf_color == "green"      puts yes    else      puts no    end}num_proc = Proc.new{  puts "how many days i""n't work when it was first, but worked when at bottom.  How to know the proper order?## puts "Do you want to play a game?"# play_game = gets.chomp## if play_game == "yes"#   super_proc_yes.call# else#   super_proc_no.call# endsuper_proc_no = Proc.new {  puts "Why don't you want to play a game?  Is it because you are tired, busy, or you are a boring person?"  tired_busy_boring = gets.chomp    if tired_busy_boring == "tired"      puts "This game will give you energy."    elsif tired_busy_boring == "busy"      puts "You should make time for this awesome game."    elsif tired_busy_boring == "boring"      puts "I understand.  This game is not for boring people.  I'm glad you are not playing.  Goodbye!"    else      puts "That's not a good enough reason not to play the fun game!"    end}super_proc_yes = Proc.new{yes = "That's correct!"no = "Sorry.  You are so wrong!"color_proc = Proc.new{  puts "what color is a leaf?"  leaf_color = gets.chomp    if leaf_color == "gree""'t work when it was first, but worked when at bottom.  How to know the proper order?## puts "Do you want to play a game?"# play_game = gets.chomp## if play_game == "yes"#   super_proc_yes.call# else#   super_proc_no.call# endsuper_proc_no = Proc.new {  puts "Why don't you want to play a game?  Is it because you are tired, busy, or you are a boring person?"  tired_busy_boring = gets.chomp    if tired_busy_boring == "tired"      puts "This game will give you energy."    elsif tired_busy_boring == "busy"      puts "You should make time for this awesome game."    elsif tired_busy_boring == "boring"      puts "I understand.  This game is not for boring people.  I'm glad you are not playing.  Goodbye!"    else      puts "That's not a good enough reason not to play the fun game!"    end}super_proc_yes = Proc.new{yes = "That's correct!"no = "Sorry.  You are so wrong!"color_proc =""t work when it was first, but worked when at bottom.  How to know the proper order?## puts "Do you want to play a game?"# play_game = gets.chomp## if play_game == "yes"#   super_proc_yes.call# else#   super_proc_no.call# endsuper_proc_no = Proc.new {  puts "Why don't you want to play a game?  Is it because you are tired, busy, or you are a boring person?"  tired_busy_boring = gets.chomp    if tired_busy_boring == "tired"      puts "This game will give you energy."    elsif tired_busy_boring == "busy"      puts "You should make time for this awesome game."    elsif tired_busy_boring == "boring"      puts "I understand.  This game is not for boring people.  I'm glad you are not playing.  Goodbye!"    else      puts "That's not a good enough reason not to play the fun game!"    end}sup"" work when it was first, but worked when at bottom.  How to know the proper order?## puts "Do you want to play a game?"# play_game = gets.chomp## if play_game == "yes"#   super_proc_yes.call# else#   super_proc_no.call# endsuper_proc_no = Proc.new {  puts "Why don't you want to play a game?  Is it because you are tired, busy, or you are a boring person?"  tired_busy_boring = gets.chomp    if tired_busy_boring == "tired"      puts "This game will give you energy."    elsif tired_busy_boring == "busy"      puts "You should make time for this awesome game."    elsif tired_busy_boring == "boring"      puts "I understand.  This game is not for boring people.  I'm glad you are not playing.  Goodbye!" ""work when it was first, but worked when at bottom.  How to know the proper order?## puts "Do you want to play a game?"# play_game = gets.chomp## if play_game == "yes"#   super_proc_yes.call# else#   super_proc_no.call# endsuper_proc_no = Proc.new {  puts "Why don't you want to play a game?  Is it because you are tired, busy, or you are a boring person?"  tired_busy_boring = gets.chomp    if tired_busy_boring == "tired"      puts "This game will give you energy."    elsif tired_busy_boring == "busy"      puts "You should make time for this awesome game."    elsif tired_busy_boring == "boring"      puts "I ""ork when it was first, but worked when at bottom.  How to know the proper order?## puts "Do you want to play a game?"# play_game = gets.chomp## if play_game == "yes"#   super_proc_yes.call# else#   super_proc_no.call# endsuper_proc_no = Proc.new {  puts "Why don't you want to play a game?  Is it because you are tired, busy, or you are a boring person?"  tired_busy_boring = gets.chomp    if tired_busy_boring == "tired"      puts "This game will give you energy."    elsif tired_busy_boring == "busy"      puts "You shou""rk when it was first, but worked when at bottom.  How to know the proper order?## puts "Do you want to play a game?"# play_game = gets.chomp## if play_game == "yes"#   super_proc_yes.call# else#   super_proc_no.call# endsuper_proc_no = Proc.new {  puts "Why don't you want to play a game?  Is it because you are tired, busy, or you are a boring person?"  tired_busy_boring = gets.chomp    if tired_busy_boring == "tired"      puts "T""k when it was first, but worked when at bottom.  How to know the proper order?## puts "Do you want to play a game?"# play_game = gets.chomp## if play_game == "yes"#   super_proc_yes.call# else#   super_proc_no.call# endsuper_proc_no = Proc.new {  puts "Why don't you want to play a game?  Is it because you are tired, busy, or you are a boring per"" when it was first, but worked when at bottom.  How to know the proper order?## puts "Do you want to play a game?"# play_game = gets.chomp## if play_game == "yes"#   super_proc_yes.call# else#   super_proc_no.call# endsuper_proc_no = Proc.new {  puts "Why do""when it was first, but worked when at bottom.  How to know the proper order?## puts "Do you want to play a game?"# play_game = gets.chomp## if play_game == "yes"#   super_proc_""hen it was first, but worked when at bottom.  How to know the proper order?## puts "Do you wa""en it was"class w/ proc.  find out who supports which candidate and about the candidate,"class President  attr_accessor  :age,:name,:state,:party  def initialize(age,name,state,party)    @age,@name,@state,@party = age,name,state,party  end  def about    puts "The #{party} presidential candidate in the 2016 election is #{age} year old #{name} from #{state}."  endendpres_smith = President.new(70,"Tom Smith","New York","Republican")pres_jones = President.new(68,"Sarah Jones","Illinois","Democrat")puts "Which presidential candidate are you interested in learning about?"ans = gets.chomprep_arr = ["smith","adam"]dem_arr = ["jones","gahee"]rep_arr.each{|x|  if ans == x    puts pres_smith.about  end}dem_arr.each{|x|  if ans == x    puts pres_jones.about  end}""lass President  attr_accessor  :age,:name,:state,:party  def initialize(age,name,state,party)    @age,@name,@state,@party = age,name,state,party  end  def about    puts "The #{party} presidential candidate in the 2016 election is #{age} year old #{name} from #{state}."  endendpres_smith = President.new(70,"Tom Smith","New York","Republican")pres_jones = President.new(68,"Sarah Jones","Illinois","Democrat")puts "Which presidential candidate are you interested in learning about?"ans = gets.chomprep_arr ""ass President  attr_accessor  :age,:name,:state,:party  def initialize(age,name,state,party)    @age,@name,@state,@party = age,name,state,party  end  def about    puts "The #{party} presidential candidate in the 2016 election is #{age} year old #{name} from #{state}."  endendpres_smith = President.new(70,"Tom Smith","New York","Repub""ss President  attr_accessor  :age,:name,:state,:party  def initialize(age,name,state,party)    @age,@name,@state,@party = age,name,state,party  end  def about    "find users w/out exact search,"puts "Enter username"username = gets.chompusers = ["bob smith", "jim smith"]result = falsenames = []users.each{|x|  if x.include?(username.downcase)    result = true    names.push(x)  end}welcome = "welcome #{names.join(', ')}."greeting = "not found."if result  puts welcomeelse  puts greetingend""uts "Enter username"username = gets.chompusers = ["bob smith", "jim smith"]result = falsenames = []users.each{|x|  if x.include?(username.downcase)    result = true    names.push(x)  end}welcome = "welcome #{names.join(', ')}."greeting = "not found."if result  puts welcomeelse  puts greetin""ts "Enter username"username = gets.chompusers = ["bob smith", "jim smith"]result = falsenames = []users.each{|x|  if x.include?(username.downcase)    result = true    names.push(x)  end}welcome = "welcome #{names.join(', ')}."greeting = "not found."if result  puts welcomeelse  puts gre""s "Enter username"username = gets.chompusers = ["bob smith", "jim smith"]result = falsenames = []users.each{|x|  if x.include?(username.downcase)    result = true    names.push(x)  end}welcome = "welcome #{names.join(', ')}."greeting = "not found."if result  puts welcomeelse  puts "" "Enter username"username = gets.chompusers = ["bob smith", "jim smith"]result = falsenames = []users.each{|x|  if x.include?(username.downcase)    result = true    names.push(x)  end}welcome = "welcome #{names.join(', ')}."greeting = "not found."if result  puts welcomeelse  put"""Enter username"username = gets.chompusers = ["bob smith", "jim smith"]result = falsenames = []users.each{|x|  if x.include?(username.downcase)    result = true    names.push(x)  end}welcome = "welcome #{names.join(', ')}."greeting = "not found."if result  puts welcomeelse  pu""Enter username"username = gets.chompusers = ["bob smith", "jim smith"]result = falsenames = []users.each{|x|  if x.include?(username.downcase)    result = true    names.push(x)  end}welcome = "welcome #{names.join(', ')}."greeting = "not found."if result  puts welcomeelse  pu""nter username"username = gets.chompusers = ["bob smith", "jim smith"]result = falsenames = []users.each{|x|  if x.include?(username.downcase)    result = true    names.push(x)  end}welcome = "welcome #{names.join(', ')}."greeting = "not found."if result  puts wel""ter username"username = gets.chompusers = ["bob smith", "jim smith"]result = falsenames = []users.each{|x|  if x.include?(username.downcase)    result = true    names.push(x)  end}welcome = "welcome #{names.join(', ')}."greeting = "not found."if resu""er username"username = gets.chompusers = ["bob smith", "jim smith"]result = falsenames = []users.each{|x|  if x.include?(username.downcase)    result = true    names.push(x)  end}welcome = "welcome #{names.join(', ')}."greeting = "not foun""r username"username = gets.chompusers = ["bob smith", "jim smith"]result = falsenames = []users.each{|x|  if x.include?(username.downcase)    result = true    names.push(x)  end}welcome = "welcome #{names.join(', ')}."greeting "" username"username = gets.chompusers = ["bob smith", "jim smith"]result = falsenames = []users.each{|x|  if x.include?(username.downcase)    result = true    names.push(x)  end}welcome = "welcome #{names.join(', ')}."""username"username = gets.chompusers = ["bob smith", "jim smith"]result = falsenames = []users.each{|x|  if x.include?(username.downcase)    result = true    names.push(x)  end}welcome = "welcome #{names.join""sername"username = gets.chompusers = ["bob smith", "jim smith"]result = falsenames = []users.each{|x|  if x.include?(username.downcase)    result = true    names.push(x)  end}welcome = "welcome #{na""ername"username = gets.chompusers = ["bob smith", "jim smith"]result = falsenames = []users.each{|x|  if x.include?(username.downcase)    result = true    names.push(x)  end}welcome = "welco""rname"username = gets.chompusers = ["bob smith", "jim smith"]result = falsenames = []users.each{|x|  if x.include?(username.downcase)    result = true    names.push(x)  end}welcome = ""name"username = gets.chompusers = ["bob smith", "jim smith"]result = falsenames = []users.each{|x|  if x.include?(username.downcase)    result = true    names.push(x)  end}welco""ame"username = gets.chompusers = ["bob smith", "jim smith"]result = falsenames = []users.each{|x|  if x.include?(username.downcase)    result = true    names.push(x)  end}w""me"username = gets.chompusers = ["bob smith", "jim smith"]result = falsenames = []users.each{|x|  if x.include?(username.downcase)    result = true    names.push(x)  end}""e"username = gets.chompusers = ["bob smith", "jim smith"]result = falsenames = []users.each{|x|  if x.include?(username.downcase)    result = true    names.push(x)  end"""username = gets.chompusers = ["bob smith", "jim smith"]result = falsenames = []users.each{|x|  if x.include?(username.downcase)    result = true    names.push(x)  en""username = gets.chompusers = ["bob smith", "jim smith"]result = falsenames = []users.each{|x|  if x.include?(username.downcase)    result = true    names.push(x)  en""username = gets.chompusers = ["bob smith", "jim smith"]result = falsenames = []users.each{|x|  if x.include?(username.downcase)    res""sername = gets.chompusers = ["bob smith", "jim smith"]result = falsenames = []users.each{|x|  if x.inc""ername = gets.chompusers = ["bob smith", "jim smith"]result = falsenames ""rname = gets.chompusers = ["bob smith", "jim""name = gets.chom",Mix,playground.rb (strings),"puts "Adam" + “ “ + "Booth"""uts "Adam" + “ “ + "B""ts "Adam" + “ “ ""s "Adam" + “"" "Adam" +"""Adam" ""Adam" ""d"string concat,"first_name = “Adam”last_name = “Booth”first_name + “ “ + last_name"Find class object belongs to:,"Variable_name.class1.class (example)"String interpolation (must be in double quotes):,"name = "Mashrur""My name is #{name}"To escape the evaluation of #{variablename} within a String, prepent with a \:\#{variablename}""ame = "Mashrur""My name is #{name}"To escape the evaluation of #{variablename} within a String, prepent with a \:\#{variab""me = "Mashrur""My name is #{name}"To escape the evaluation of #{variablename} within a String, prepent with a \:\#{""e = "Mashrur""My name is #{name}"To escape the evaluation of #{variablename} within a String, prepent with a \"" = "Mashrur""My name is #{name}"To escape the evaluation of #{variablename} within a String, prepent with""= "Mashrur""My name is #{name}"To escape the evaluation of #{variablename} within a String, prepent w"" "Mashrur""My name is #{name}"To escape the evaluation of #{variablename} within a String, prepent"""Mashrur""My name is #{name}"To escape the evaluation of #{variablename} within a String, prepen""Mashrur""My name is #{name}"To escape the evaluation of #{variablename} within a String, prepen""ashrur""My name is #{name}"To escape the evaluation of #{variablename} within a String,""shrur""My name is #{name}"To escape the evaluation of #{variablename} within a S""hrur""My name is #{name}"To escape the evaluation of #{variablename} withi""rur""My name is #{name}"To escape the evaluation of #{variablename} w""ur""My name is #{name}"To escape the evaluation of #{variablename""r""My name is #{name}"To escape the evaluation of #{variablena""""My name is #{name}"To escape the evaluation of #{variablen"""My name is #{name}"To escape the evaluation of #{variablen"""My name is #{name}"To escape the evaluation of #{variable""My name is #{name}"To escape the evaluation of #{variable""y name is #{name}"To escape the evalua"" name is #{name}"To ""name "Get input from command line: gets.chomp,"puts "Hello.  What's your first name?"first_name = gets.chompputs "Hi #{first_name}.  What’s your last name?"last_name = gets.chompputs "Thank you, Mr. #{last_name}.  It’s nice to meet you."""uts "Hello.  What's your first name?"first_name = gets.chompputs "Hi #{first_name}.  What’s your last name?"last_name = gets.chompputs "Thank you, Mr. #{last_name}.  It’s nice to meet ""ts "Hello.  What's your first name?"first_name = gets.chompputs "Hi #{first_name}.  What’s your last name?"last_name = gets.chompputs "Thank you, Mr. #{last_name}.  It’s nice to m""s "Hello.  What's your first name?"first_name = gets.chompputs "Hi #{first_name}.  What’s your last name?"last_name = gets.chompputs "Thank you, Mr. #{last_name}.  It’s nice t"" "Hello.  What's your first name?"first_name = gets.chompputs "Hi #{first_name}.  What’s your last name?"last_name = gets.chompputs "Thank you, Mr. #{last_name}.  It’s nice"""Hello.  What's your first name?"first_name = gets.chompputs "Hi #{first_name}.  What’s your last name?"last_name = gets.chompputs "Thank you, Mr. #{last_name}.  It’s nic""Hello.  What's your first name?"first_name = gets.chompputs "Hi #{first_name}.  What’s your last name?"last_name = gets.chompputs "Thank you, Mr. #{last_name}.  It’s nic""ello.  What's your first name?"first_name = gets.chompputs "Hi #{first_name}.  What’s your last name?"last_name = gets.chompputs "Thank y""llo.  What's your first name?"first_name = gets.chompputs "Hi #{first_name}.  What’s your last name?"last_n""lo.  What's your first name?"first_name = gets.chompputs "Hi #{first_name}.  W""o.  What's your first name?"first_name = gets.chom"".  What's your first na"Ex 1. simple,"puts 1 + 2puts 3 * 5puts 15/5puts 20/3puts 20/3.to_f (float)puts 20.0/3puts 20/3.0"Ex 2. to float (.to_f),"x = 10y = 22y / xy = y.to_fputs y/x"Ex 3. modulo (%),20 % 3Ex 4 .odd / .even,"23.odd?22.even?"Ex 5. comparisons,"5 < 210 < 1010 <= 1010 == 10x = 12y = 12x = yx == y"Less Than or Greater Than,"Less than: <Less than or equal to: <=Greater than: >Greater than or equal to: >="Combining Boolean Operators,(x && (y || w)) && zGetting User Input,variable = gets.chompString Interpolation,"Ex.1drink = "espresso""I love " + drink# ==> I love espresso"I love " << drink# ==> I love espressoEx.2 #For non-string values, you have to use .to_s to make it a string:age = 26"I am " + age.to_s + " years old."# ==> "I am 26 years old.""I am " << age.to_s << " years old."# ==> "I am 26 years old.”Ex.3 #Ex.2 is complicated.  Better to use: string interpolation"I love #{drink}."# ==> I love espresso."I am #{age} years old."# ==> I am 26 years old.""x.1drink = "espresso""I love " + drink# ==> I love espresso"I love " << drink# ==> I love espressoEx.2 #For non-string values, you have to use .to_s to make it a string:age = 26"I am " + age.to_s + " years old."# ==> "I am 26 years old.""I am " << age.to_s << " years old."# ==> "I am 26 years old.”Ex.3 #Ex.2 is complicated.  Better to use: string interpolation"I love #{drink}."# ==> I love espresso."I am #{age} years old."# ==> I am "".1drink = "espresso""I love " + drink# ==> I love espresso"I love " << drink# ==> I love espressoEx.2 #For non-string values, you have to use .to_s to make it a string:age = 26"I am " + age.to_s + " years old."# ==> "I am 26 years old.""I am " << age.to_s << " years old."# ==> "I am 26 years old.”Ex.3 #Ex.2 is complicated.  Better to use: string interpolation"I love #{drink}."# ==> I love espresso."I am #{age} years old."""1drink = "espresso""I love " + drink# ==> I love espresso"I love " << drink# ==> I love espressoEx.2 #For non-string values, you have to use .to_s to make it a string:age = 26"I am " + age.to_s + " years old."# ==> "I am 26 years old.""I am " << age.to_s << " years old."# ==> "I am 26 years old.”Ex.3 #Ex.2 is complicated.  Better to use: string interpolation"I love #{drink}."# ==> I love espresso."I am #{age} ""drink = "espresso""I love " + drink# ==> I love espresso"I love " << drink# ==> I love espressoEx.2 #For non-string values, you have to use .to_s to make it a string:age = 26"I am " + age.to_s + " years old."# ==> "I am 26 years old.""I am " << age.to_s << " years old."# ==> "I am 26 years old.”Ex.3 #Ex.2 is complicated.  Better to use: string interpolation"I love #{drink}."# ==> I love espresso."I ""drink = "espresso""I love " + drink# ==> I love espresso"I love " << drink# ==> I love espressoEx.2 #For non-string values, you have to use .to_s to make it a string:age = 26"I am " + age.to_s + " years old."# ==> "I am 26 years old.""I am " << age.to_s << " years old."# ==> "I am 26 years old.”Ex.3 #Ex.2 is complicated.  Better to use: string interpolation"I love #{drink}."# ==> I love espr""rink = "espresso""I love " + drink# ==> I love espresso"I love " << drink# ==> I love espressoEx.2 #For non-string values, you have to use .to_s to make it a string:age = 26"I am " + age.to_s + " years old."# ==> "I am 26 years old.""I am " << age.to_s << " years old."# ==> "I am 26 years old.”Ex.3 #Ex.2 is complicated.  Better to use: string interpolation"I love #{drink}."# ==> I l""ink = "espresso""I love " + drink# ==> I love espresso"I love " << drink# ==> I love espressoEx.2 #For non-string values, you have to use .to_s to make it a string:age = 26"I am " + age.to_s + " years old."# ==> "I am 26 years old.""I am " << age.to_s << " years old."# ==> "I am 26 years old.”Ex.3 #Ex.2 is complicated.  Better to use: string interpolation"I love #{drink}."# ""nk = "espresso""I love " + drink# ==> I love espresso"I love " << drink# ==> I love espressoEx.2 #For non-string values, you have to use .to_s to make it a string:age = 26"I am " + age.to_s + " years old."# ==> "I am 26 years old.""I am " << age.to_s << " years old."# ==> "I am 26 years old.”Ex.3 #Ex.2 is complicated.  Better to use: string interpolation"I love #{drink""k = "espresso""I love " + drink# ==> I love espresso"I love " << drink# ==> I love espressoEx.2 #For non-string values, you have to use .to_s to make it a string:age = 26"I am " + age.to_s + " years old."# ==> "I am 26 years old.""I am " << age.to_s << " years old."# ==> "I am 26 years old.”Ex.3 #Ex.2 is complicated.  Better to use: string interpolation"I love #{"" = "espresso""I love " + drink# ==> I love espresso"I love " << drink# ==> I love espressoEx.2 #For non-string values, you have to use .to_s to make it a string:age = 26"I am " + age.to_s + " years old."# ==> "I am 26 years old.""I am " << age.to_s << " years old."# ==> "I am 26 years old.”Ex.3 #Ex.2 is complicated.  Better to use: string interpolation"I lov""= "espresso""I love " + drink# ==> I love espresso"I love " << drink# ==> I love espressoEx.2 #For non-string values, you have to use .to_s to make it a string:age = 26"I am " + age.to_s + " years old."# ==> "I am 26 years old.""I am " << age.to_s << " years old."# ==> "I am 26 years old.”Ex.3 #Ex.2 is complicated.  Better to use: string interpolation"I "" "espresso""I love " + drink# ==> I love espresso"I love " << drink# ==> I love espressoEx.2 #For non-string values, you have to use .to_s to make it a string:age = 26"I am " + age.to_s + " years old."# ==> "I am 26 years old.""I am " << age.to_s << " years old."# ==> "I am 26 years old.”Ex.3 #Ex.2 is complicated.  Better to use: string interpolation""""espresso""I love " + drink# ==> I love espresso"I love " << drink# ==> I love espressoEx.2 #For non-string values, you have to use .to_s to make it a string:age = 26"I am " + age.to_s + " years old."# ==> "I am 26 years old.""I am " << age.to_s << " years old."# ==> "I am 26 years old.”Ex.3 #Ex.2 is complicated.  Better to use: string interpolation""espresso""I love " + drink# ==> I love espresso"I love " << drink# ==> I love espressoEx.2 #For non-string values, you have to use .to_s to make it a string:age = 26"I am " + age.to_s + " years old."# ==> "I am 26 years old.""I am " << age.to_s << " years old."# ==> "I am 26 years old.”Ex.3 #Ex.2 is complicated.  Better to use: string interpolation""spresso""I love " + drink# ==> I love espresso"I love " << drink# ==> I love espressoEx.2 #For non-string values, you have to use .to_s to make it a string:age = 26"I am " + age.to_s + " years old."# ==> "I am 26 years old.""I am " << age.to_s << " years old."# ==> "I am 26 years old.”Ex.3 #Ex.2 is complicated.  Better to use: string interp""presso""I love " + drink# ==> I love espresso"I love " << drink# ==> I love espressoEx.2 #For non-string values, you have to use .to_s to make it a string:age = 26"I am " + age.to_s + " years old."# ==> "I am 26 years old.""I am " << age.to_s << " years old."# ==> "I am 26 years old.”Ex.3 #Ex.2 is complicated.  Better to use: string""resso""I love " + drink# ==> I love espresso"I love " << drink# ==> I love espressoEx.2 #For non-string values, you have to use .to_s to make it a string:age = 26"I am " + age.to_s + " years old."# ==> "I am 26 years old.""I am " << age.to_s << " years old."# ==> "I am 26 years old.”Ex.3 #Ex.2 is complicated.  Better to use: ""esso""I love " + drink# ==> I love espresso"I love " << drink# ==> I love espressoEx.2 #For non-string values, you have to use .to_s to make it a string:age = 26"I am " + age.to_s + " years old."# ==> "I am 26 years old.""I am " << age.to_s << " years old."# ==> "I am 26 years old.”Ex.3 #Ex.2 is complicated.  Better to ""sso""I love " + drink# ==> I love espresso"I love " << drink# ==> I love espressoEx.2 #For non-string values, you have to use .to_s to make it a string:age = 26"I am " + age.to_s + " years old."# ==> "I am 26 years old.""I am " << age.to_s << " years old."# ==> "I am 26 years old.”Ex.3 #Ex.2 is complicated.  Better""so""I love " + drink# ==> I love espresso"I love " << drink# ==> I love espressoEx.2 #For non-string values, you have to use .to_s to make it a string:age = 26"I am " + age.to_s + " years old."# ==> "I am 26 years old.""I am " << age.to_s << " years old."# ==> "I am 26 years old.”Ex.3 #Ex.2 is complicated.  Bet""o""I love " + drink# ==> I love espresso"I love " << drink# ==> I love espressoEx.2 #For non-string values, you have to use .to_s to make it a string:age = 26"I am " + age.to_s + " years old."# ==> "I am 26 years old.""I am " << age.to_s << " years old."# ==> "I am 26 years old.”Ex.3 #Ex.2 is complicated.  B""""I love " + drink# ==> I love espresso"I love " << drink# ==> I love espressoEx.2 #For non-string values, you have to use .to_s to make it a string:age = 26"I am " + age.to_s + " years old."# ==> "I am 26 years old.""I am " << age.to_s << " years old."# ==> "I am 26 years old.”Ex.3 #Ex.2 is complicated.  """I love " + drink# ==> I love espresso"I love " << drink# ==> I love espressoEx.2 #For non-string values, you have to use .to_s to make it a string:age = 26"I am " + age.to_s + " years old."# ==> "I am 26 years old.""I am " << age.to_s << " years old."# ==> "I am 26 years old.”Ex.3 #Ex.2 is complicated.  """I love " + drink# ==> I love espresso"I love " << drink# ==> I love espressoEx.2 #For non-string values, you have to use .to_s to make it a string:age = 26"I am " + age.to_s + " years old."# ==> "I am 26 years old.""I am " << age.to_s << " years old."# ==> "I am 26 years old.”Ex.3 #Ex.2 is complicated. ""I love " + drink# ==> I love espresso"I love " << drink# ==> I love espressoEx.2 #For non-string values, you have to use .to_s to make it a string:age = 26"I am " + age.to_s + " years old."# ==> "I am 26 years old.""I am " << age.to_s << " years old."# ==> "I am 26 years old.”Ex.3 #Ex.2 is complicated. "" love " + drink# ==> I love espresso"I love " << drink# ==> I love espressoEx.2 #For non-string values, you have to use .to_s to make it a string:age = 26"I am " + age.to_s + " years old."# ==> "I am 26 years old.""I am " << age.to_s << " years old."# ==> "I am 26 years old.”Ex.3 #Ex.2 is compli""love " + drink# ==> I love espresso"I love " << drink# ==> I love espressoEx.2 #For non-string values, you have to use .to_s to make it a string:age = 26"I am " + age.to_s + " years old."# ==> "I am 26 years old.""I am " << age.to_s << " years old."# ==> "I am 26 years old.”Ex.3 #Ex.2 is ""ove " + drink# ==> I love espresso"I love " << drink# ==> I love espressoEx.2 #For non-string values, you have to use .to_s to make it a string:age = 26"I am " + age.to_s + " years old."# ==> "I am 26 years old.""I am " << age.to_s << " years old."# ==> "I am 26 years old.”Ex.3 #Ex.""ve " + drink# ==> I love espresso"I love " << drink# ==> I love espressoEx.2 #For non-string values, you have to use .to_s to make it a string:age = 26"I am " + age.to_s + " years old."# ==> "I am 26 years old.""I am " << age.to_s << " years old."# ==> "I am 26 years old.”Ex.3 ""e " + drink# ==> I love espresso"I love " << drink# ==> I love espressoEx.2 #For non-string values, you have to use .to_s to make it a string:age = 26"I am " + age.to_s + " years old."# ==> "I am 26 years old.""I am " << age.to_s << " years old."# ==> "I am 26 years old.”Ex"" " + drink# ==> I love espresso"I love " << drink# ==> I love espressoEx.2 #For non-string values, you have to use .to_s to make it a string:age = 26"I am " + age.to_s + " years old."# ==> "I am 26 years old.""I am " << age.to_s << " years old."# ==> "I am 26 years old.”""" + drink# ==> I love espresso"I love " << drink# ==> I love espressoEx.2 #For non-string values, you have to use .to_s to make it a string:age = 26"I am " + age.to_s + " years old."# ==> "I am 26 years old.""I am " << age.to_s << " years old."# ==> "I am 26 years old.”"" + drink# ==> I love espresso"I love " << drink# ==> I love espressoEx.2 #For non-string values, you have to use .to_s to make it a string:age = 26"I am " + age.to_s + " years old."# ==> "I am 26 years old.""I am " << age.to_s << " years old."# ==> "I am 26 years old.”""+ drink# ==> I love espresso"I love " << drink# ==> I love espressoEx.2 #For non-string values, you have to use .to_s to make it a string:age = 26"I am " + age.to_s + " years old."# ==> "I am 26 years old.""I am " << age.to_s << " years ol"" drink# ==> I love espresso"I love " << drink# ==> I love espressoEx.2 #For non-string values, you have to use .to_s to make it a string:age = 26"I am " + age.to_s + " years old."# ==> "I am 26 years old.""I ""drink# ==> I love espresso"I love " << drink# ==> I love espressoEx.2 #For non-string values, you have to use .to_s to make it a string:age = 26"I am " + age.to_s + " years old."#""rink# ==> I love espresso"I love " << drink# ==> I love espressoEx.2 #For non-string values, you have to use .to_s to make it a string:age = 26"I am " ""ink# ==> I love espresso"I love " << drink# ==> I love espressoEx.2 #For non-string values, you have to use .to_s to make it ""nk# ==> I love espresso"I love " << drink# ==> I love espressoEx.2 #For non-string values, you hav""k# ==> I love espresso"I love " << drink# ==> I love espressoEx.2 #For n""# ==> I love espresso"I love " << drink# ==> I lo""# ==> I love espresso"I lov"" ==> "For' Shame!,"3.times do    puts "I'm a refactoring master!"end"".times do    puts "I'm a refa""times do ",methods - built in ruby,Find methods available to object:,"objectname.methods1.methods (example)"Ex. methods used on objects:,"objectname.nil?objectname.empty?objectname.lengthobjectname.reverse"Find methods available to object:,"objectname.methods1.methods (example)"The '.length' Method,""I love espresso".length# ==> 15"adam".length""I love espresso".length# ==> 15"adam".length"" love espresso".length# ==> 15""love espresso".l""ov"The '.reverse' Method,"“Eric".reverse"adam".reverse""Eric".reverse"adam".re""ric".reverse"adam""ic".reverse"a""c".reverse""".reverse"".reverse".upcase' & '.downcase',"puts "adam".upcaseputs "ADAM".downcase""uts "adam".upcaseputs "ADAM".dow""ts "adam".upcaseputs "ADAM"""s "adam".upcaseputs "AD"" "adam".upcaseputs """"adam".upcaseputs ""adam".upcaseputs ""dam".upcasep""am".upcas""m".upc""".up"".up"Ex 6. random number (rand),"randrand(10)puts rand (10)"Ex 7. to integer (.to_i),"x = 5.0x = x.to_ix * 5"Ex 8. to string (.to_s),"x = 5.0x = x.to_sx * 55 * x""sub( x, y)sub( x) {...}",n.floor,n.integer?,n.ceil,n % num,n ** num,n.round,n.truncate,Returns n as an integer with decimals removed."n.nextn.succ",Returns the next integer following n. Equivalent to n + 1.Downcase!,variable.downcase!,methods - custom,methods,"def greeter(name)    puts nameendgreeter("adam")""ef gre"Basic Methods,"def welcome(msg)    puts msgendwelcome("Hello, Everyone!")""ef welcome(msg)  "Methods With Arguments,"def welcome(name)    return "Hello, #{name}"endwelcome("Adam")""ef welcome(name)    return "Hello, ""f welco"method (1. simple - hello),"def hello	puts "Hello World!"endhello""ef hello	puts "Hello Wo""f hello"methods w/ array (ex. 1),"arr = (50..100).to_aarr.unshift(50)arr.push(100)arr.shuffle!arr.sort!arr.uniq!arr << 40arr.poparr.reverse!arr.lengtharr.include?(200)arr[0..5]arr[0,5]arr.delete_at(2)puts arr.select { |x| x.odd?}arr.each { |x| puts x if x.odd?}puts arr"if/elsif/else,"if, else, elsif","a = 10b = 11if a < b  print "a is less than b!"elsif b < a  print "b is less than a!"else  print "b is equal to a!"end"" = 10b = 11if a < b  print "a is less than b!"elsif b < a  print "b is less than a!"else""= 10b = 11if a < b  print "a is less than b!"elsif b < a  "" 10b = 11if a < b  print "a is""10b"if/elsif/else (1. simple - colors),"puts "Please choose red, white, or blue."color = gets.chompif color == "red"	puts "You chose red."elsif color == "white"	puts "You chose white."elsif color == "blue"	puts "You chose blue."else	puts "You must choose red, white, or blue."end""uts "Please choose red, white, or blue."color = gets.chompif color == "red"	puts "You chose red."elsif color == "white"	puts "You chose white."elsif color == "blue"	puts "You chose blue."else	puts "You must choose red, white, or blue.""ts "Please choose red, white, or blue."color = gets.chompif color == "red"	puts "You chose red."elsif color == "white"	puts "You chose white."elsif color == "blue"	puts "You chose blue."else	puts "You must choose red, white, or b""s "Please choose red, white, or blue."color = gets.chompif color == "red"	puts "You chose red."elsif color == "white"	puts "You chose white."elsif color == "blue"	puts "You chose blue."else	puts "You must choose red, white, o"" "Please choose red, white, or blue."color = gets.chompif color == "red"	puts "You chose red."elsif color == "white"	puts "You chose white."elsif color == "blue"	puts "You chose blue."else	puts "You must choose red, white,"""Please choose red, white, or blue."color = gets.chompif color == "red"	puts "You chose red."elsif color == "white"	puts "You chose white."elsif color == "blue"	puts "You chose blue."else	puts "You must choose red, white""Please choose red, white, or blue."color = gets.chompif color == "red"	puts "You chose red."elsif color == "white"	puts "You chose white."elsif color == "blue"	puts "You chose blue."else	puts "You must choose red, white""lease choose red, white, or blue."color = gets.chompif color == "red"	puts "You chose red."elsif color == "white"	puts "You chose white."elsif color == "blue"	puts "You chose blue."else""ease choose red, white, or blue."color = gets.chompif color == "red"	puts "You chose red."elsif color == "white"	puts "You chose white."elsif color == "b""ase choose red, white, or blue."color = gets.chompif color == "red"	puts "You chose red."elsif color == "white"	puts "You""se choose red, white, or blue."color = gets.chompif color == "red"	puts "You chose red."el""e choose red, white, or blue."color = gets.chompif color == """ choose red, white, or blue."colo""choos"if/else (2. simple - username),"puts "Please enter your username:"username = gets.chompgreeting = "Hi, #{username}.  Nice to see you again!"welcome = "Username not found.  Please login with different username or register."if username == "adam"	puts greetingelse	puts welcomeend""uts "Please enter your username:"username = gets.chompgreeting = "Hi, #{username}.  Nice to see you again!"welcome = "Username not found.  Please login with different username or register."if username == "adam"	puts greetingelse	puts welcom""ts "Please enter your username:"username = gets.chompgreeting = "Hi, #{username}.  Nice to see you again!"welcome = "Username not found.  Please login with different username or register."if username == "adam"	puts greetingelse	puts we""s "Please enter your username:"username = gets.chompgreeting = "Hi, #{username}.  Nice to see you again!"welcome = "Username not found.  Please login with different username or register."if username == "adam"	puts greetingelse	puts"" "Please enter your username:"username = gets.chompgreeting = "Hi, #{username}.  Nice to see you again!"welcome = "Username not found.  Please login with different username or register."if username == "adam"	puts greetingelse	pu"""Please enter your username:"username = gets.chompgreeting = "Hi, #{username}.  Nice to see you again!"welcome = "Username not found.  Please login with different username or register."if username == "adam"	puts greetingelse	p""Please enter your username:"username = gets.chompgreeting = "Hi, #{username}.  Nice to see you again!"welcome = "Username not found.  Please login with different username or register."if username == "adam"	puts greetingelse	p""lease enter your username:"username = gets.chompgreeting = "Hi, #{username}.  Nice to see you again!"welcome = "Username not found.  Please login with different username or register."if username == "a""ease enter your username:"username = gets.chompgreeting = "Hi, #{username}.  Nice to see you again!"welcome = "Username not found.  Please login with different username or reg""ase enter your username:"username = gets.chompgreeting = "Hi, #{username}.  Nice to see you again!"welcome = "Username not found.  Please login with ""se enter your username:"username = gets.chompgreeting = "Hi, #{username}.  Nice to see you again!"welcome = "Username not fo""e enter your username:"username = gets.chompgreeting = "Hi, #{username}.  Nice to see you again!"wel"" enter your username:"username = gets.chompgreeting = "Hi, #{username}.  Nice ""enter your username:"username = gets.chompgreeting = "Hi""nter your username:"username = gets.c""ter your username:"A Simpler ‘If' ,"puts "Hello, World" if true""uts "Hello, World" if""ts "Hello, World""s "Hello, Wo"" "Hello, """Hello,""Hello,"Case Statements,The Case Statement,"case languagewhen "JS"  puts "Websites!"when "Python"  puts "Science!"when "Ruby"  puts "Web apps!"else  puts "I don't know!"end""ase languagewhen "JS"  puts "Websites!"when "Python"  puts "Science!"when "Ruby"  puts "Web apps!"else  puts ""se languagewhen "JS"  puts "Websites!"when "Python"  puts "Science!"when "Ruby"  puts "Web a""e languagewhen "JS"  puts "Websites!"when "Python"  puts "Science!"when "Ru"" languagewhen "JS"  puts "Websites!"when "Python"  puts "Sc""languagewhen "JS"  puts "Websites!"when "Pyt""anguagewhen "JS"  puts "Websit""nguagewhen "JS" ""guage"When and Then: The Case Statement,"case language  when "JS" then puts "Websites!"  when "Python" then puts "Science!"  when "Ruby" then puts "Web apps!"  else puts "I don't know!"end""ase language  when "JS" then puts "Websites!"  when "Python" then puts "Science!"  when "Ruby" then puts "Web apps!"  else put""se language  when "JS" then puts "Websites!"  when "Python" then puts "Science!"  when "Ruby" then puts "W""e language  when "JS" then puts "Websites!"  when "Python" then puts "Science!"  when "" language  when "JS" then puts "Websites!"  when "Python" then puts ""language  when "JS" then puts "Websites!"  when "P""anguage  when "JS" then puts "Webs""nguage  when "JS" ""guag".each iterations,.each iterate / array (ex. 1 - loop through array),"y = [0,1,2,3]y.each {|x| puts x}".each iterate / range to array (ex. 2 - loop through array),"y = (0..99).to_ay.each {|x| puts x}".each w/ array (ex. 1 - simple),"names = ["joe", "john", "james"]names.each do |x|	puts "Hello #{x}"endpreferred syntaxnames.each { |x| puts "Hello #{x}" } ""ames = ["joe", "john", "james"]names.each do |x|	puts "Hello #{x}"endpreferred syntaxnames.each { |x| puts "Hello""mes = ["joe", "john", "james"]names.each do |x|	puts "Hello #{x}"endpreferred syntaxnames.each { |x| put""es = ["joe", "john", "james"]names.each do |x|	puts "Hello #{x}"endpreferred syntaxnames.each { ""s = ["joe", "john", "james"]names.each do |x|	puts "Hello #{x}"endpreferred syntaxnames.e"" = ["joe", "john", "james"]names.each do |x|	puts "Hello #{x}"endpreferred syntaxna""= ["joe", "john", "james"]names.each do |x|	puts "Hello #{x}"endpreferred synta"" ["joe", "john", "james"]names.each do |x|	puts "Hello #{x}"endpreferred sy""["joe", "john", "james"]names.each do |x|	puts "Hello #{x}"endpreferred """joe", "john", "james"]names.each do |x|	puts "Hello #{x}"endpreferred""joe", "john", "james"]names.each do |x|	puts "Hello #{x}"endpreferred""oe", "john", "james"]names.each do |x|	puts "Hello #{x}"endprefer""e", "john", "james"]names.each do |x|	puts "Hello #{x}"endpref""", "john", "james"]names.each do |x|	puts "Hello #{x}"endpre"", "john", "james"]names.each do |x|	puts "Hello #{x}"endpre"" "john", "james"]names.each do |x|	puts "Hello #{x}"endp"""john", "james"]names.each do |x|	puts "Hello #{x}"end""john", "james"]names.each do |x|	puts "Hello #{x}"end""ohn", "james"]names.each do |x|	puts "Hello #{x}"e""hn", "james"]names.each do |x|	puts "Hello #{x}""n", "james"]names.each do |x|	puts "Hello #{""", "james"]names.each do |x|	puts "Hello #"", "james"]names.each do |x|	puts "Hello #"" "james"]names.each do |x|	puts "Hello"""james"]names.each do |x|	puts "Hell""james"]names.each do |x|	puts "Hell""ames"]names.each do |x|	puts ""mes"]names.each do |x|	p""es"]names.each do |x|""s"]names.each do |"""]names.each do ""]names.each do ".each w/ array (ex. 2 - capitalize),"names = ["joe", "john", "james"]names.each do |x|	puts "Hello #{x.capitalize}"endpreferred syntaxnames.each { |x| puts "Hello #{x.capitalize}" } ""ames = ["joe", "john", "james"]names.each do |x|	puts "Hello #{x.capitalize}"endpreferred syntaxnames.each { |x| puts "Hello #{x.capita""mes = ["joe", "john", "james"]names.each do |x|	puts "Hello #{x.capitalize}"endpreferred syntaxnames.each { |x| puts "Hello #{""es = ["joe", "john", "james"]names.each do |x|	puts "Hello #{x.capitalize}"endpreferred syntaxnames.each { |x| puts "H""s = ["joe", "john", "james"]names.each do |x|	puts "Hello #{x.capitalize}"endpreferred syntaxnames.each { |x| p"" = ["joe", "john", "james"]names.each do |x|	puts "Hello #{x.capitalize}"endpreferred syntaxnames.each { ""= ["joe", "john", "james"]names.each do |x|	puts "Hello #{x.capitalize}"endpreferred syntaxnames.eac"" ["joe", "john", "james"]names.each do |x|	puts "Hello #{x.capitalize}"endpreferred syntaxnames.""["joe", "john", "james"]names.each do |x|	puts "Hello #{x.capitalize}"endpreferred syntaxname"""joe", "john", "james"]names.each do |x|	puts "Hello #{x.capitalize}"endpreferred syntaxnam""joe", "john", "james"]names.each do |x|	puts "Hello #{x.capitalize}"endpreferred syntaxnam""oe", "john", "james"]names.each do |x|	puts "Hello #{x.capitalize}"endpreferred syntax""e", "john", "james"]names.each do |x|	puts "Hello #{x.capitalize}"endpreferred synta""", "john", "james"]names.each do |x|	puts "Hello #{x.capitalize}"endpreferred synt"", "john", "james"]names.each do |x|	puts "Hello #{x.capitalize}"endpreferred synt"" "john", "james"]names.each do |x|	puts "Hello #{x.capitalize}"endpreferred sy"""john", "james"]names.each do |x|	puts "Hello #{x.capitalize}"endpreferred s""john", "james"]names.each do |x|	puts "Hello #{x.capitalize}"endpreferred s""ohn", "james"]names.each do |x|	puts "Hello #{x.capitalize}"endpreferr""hn", "james"]names.each do |x|	puts "Hello #{x.capitalize}"endpref""n", "james"]names.each do |x|	puts "Hello #{x.capitalize}"endpr""", "james"]names.each do |x|	puts "Hello #{x.capitalize}"endp"", "james"]names.each do |x|	puts "Hello #{x.capitalize}"endp"" "james"]names.each do |x|	puts "Hello #{x.capitalize}"end"""james"]names.each do |x|	puts "Hello #{x.capitalize}"end""james"]names.each do |x|	puts "Hello #{x.capitalize}"end""ames"]names.each do |x|	puts "Hello #{x.capitalize}""mes"]names.each do |x|	puts "Hello #{x.capital""es"]names.each do |x|	puts "Hello #{x.capi""s"]names.each do |x|	puts "Hello #{x.ca"""]names.each do |x|	puts "Hello #{x.c""]names.each do |x|	puts "Hello #{x.c""names.eac".each Iterator,"odds = [1,3,5,7,9]odds.each do |odds|    print odds * 2end".each w/ hash (ex. 1),for loop,(best used to iterate within array)for loop: simple (ex. 1),"y = [0,1,2,3]for x in y puts "Hi"end"" = [0,1"for loop: range to array (ex. 2),"y = (0..99).to_afor x in yputs "Hi"end"" = (0.."for loop: for range (ex. 3),"y = [0,1,2,3]for x in 0..3	puts y[x]end",for loop,"for i in 1..20  puts i end"while loop,(best used when frequency unknown)while loop: .length,"y = [0,1,2,3]i=0while i < y.length	puts y[i]	i+=1end"while loop,"i=0 while i<20  i=i+1   puts i end"until loop,until loop,"i=0 until i==20  i+=1   puts i end",unless,unless,"problem = falseprint "Good to go!" unless problem""roblem = falseprint "Good ""oblem"The One-Line Unless,"puts "Hello!" unless falseorunless false  puts "Hello!"end""uts "Hello!" unless falseorunless false  puts "Hello!""ts "Hello!" unless falseorunless false  puts "He""s "Hello!" unless falseorunless false  puts "" "Hello!" unless falseorunless false  put"""Hello!" unless falseorunless false  pu""Hello!" unless falseorunless false  pu""ello!" unless falseorunless fals""llo!" unless falseorunless""lo!" unless falseorun""o!" unless falseor""!" unless falseo""" unless false"" unless false".times,.times Iterator,"10.times do    print "This is fun!"end""0.times do    pr"iterators and blocks,"i = 20loop do  i -= 1  print "#{i}"  break if i == 0end"" = 20loop do  i -= 1  pr"Ex 9. repeat (#.times {puts code},"20.times {puts “Hi”}20.times {puts 10}"Arrays,array,"my_array = ["blue", "red", "white", "orange", "green"]""y_array = ["blue", "red", "white", "orang""_array = ["blue", "red", "whi""array = ["blue", """rray = ["Access by Index,"demo_array = [100, 200, 300, 400, 500]print  demo_array[2]"Sorting With Blocks,"my_array = [3, 4, 8, 7, 1, 6, 5, 9, 2]my_array.sort!print my_array"Concat two arrays into third.,"arr1 = [1,2,3,4]arr2 = [5,6,7,8]arr3 = arr1.concat(arr2).reverse# puts arr3[0..3]arr3.each {|x| puts "This is the number #{x}."}""rr1 = [1,2,3,4]arr2 = [5,"Array of an Array,"b = [[0,1,2,3], ["Adam", "GaHee", "Melissa", "Jamey"], ["blue", "red", "white", "pink"]]b[1][1]"" = [[0,1,2,3], ["Adam", "GaHee", "Melissa", "Jamey"], ["blue", "red", "white", ""= [[0,1,2,3], ["Adam", "GaHee", "Melissa", "Jamey"], ["blue", "" [[0,1,2,3], ["Adam", "GaHee", "Melissa", "Jam""[[0,1,2,3], ["Adam", "GaHee", """[0,1,2,3], ["Adam""0,1,"Array of an Array,"b = [[0,1,2,3], ["Adam", "GaHee", "Melissa", "Jamey"], ["blue", "red", "white", "pink"]]new = []b.each {|item| new.concat(item)}puts "#{new}"puts new.include?("Adam")"" = [[0,1,2,3], ["Adam", "GaHee", "Melissa", "Jamey"], ["blue", "red", "white", "pink"]]new = []b.each {|item| new.concat(item)}puts "#{new}"puts new""= [[0,1,2,3], ["Adam", "GaHee", "Melissa", "Jamey"], ["blue", "red", "white", "pink"]]new = []b.each {|item| new.concat(item)}puts "#"" [[0,1,2,3], ["Adam", "GaHee", "Melissa", "Jamey"], ["blue", "red", "white", "pink"]]new = []b.each {|item| new.concat(""[[0,1,2,3], ["Adam", "GaHee", "Melissa", "Jamey"], ["blue", "red", "white", "pink"]]new = []b.each {|ite""[0,1,2,3], ["Adam", "GaHee", "Melissa", "Jamey"], ["blue", "red", "white", "pink"]]new = []""0,1,2,3], ["Adam", "GaHee", "Melissa", "Jamey"], ["blue", "red", "white", "pink"]"",1,2,3], ["Adam", "GaHee", "Melissa", "Jamey"], ["blue", "red", "whit""1,2,3], ["Adam", "GaHee", "Melissa", "Jamey"], ["blue", "r"",2,3], ["Adam", "GaHee", "Melissa", "Jamey"], ["""2,3], ["Adam", "GaHee", "Melissa", "Jam"",3], ["Adam", "GaHee", "Melissa""3], ["Adam", "GaHee", "M""], ["Adam", "GaHee"", ["Adam", "G"" ["Adam",""["Adam"""Ada""Ada"Iterating Over Arrays,"languages = ["HTML", "CSS", "JavaScript", "Python", "Ruby"]languages.each { |x| puts x }""anguages = ["HTML", "CSS", "JavaScript", "Python", "Ruby"]languages.each {""nguages = ["HTML", "CSS", "JavaScript", "Python", "Ruby"]lang""guages = ["HTML", "CSS", "JavaScript", "Python", "R""uages = ["HTML", "CSS", "JavaScript", "P""ages = ["HTML", "CSS", "JavaSc""ges = ["HTML", "CSS",""es = ["HTML",""s = [""""Hashes,"Create hash called my_details, elements within { }:","my_details = {'name' => 'mashrur', 'favcolor' => 'red'}"Access value and notify what favcolor is:,"my_details["favcolor"]""y_details[""Alternate syntax to create key, value pairs in hash:","myhash = {a: 1, b: 2, c: 3, d: 4}"Access the value for key c above:,myhash[:c]Symbol Example 2,"array2 = {name: "Ted", dob: 1980, nationality: "usa"}array2[:name]""rray2 = {name: "Ted", dob: 1980, nationality: "usa""ray2 = {name: "Ted", dob: 1980, na""ay2 = {name: "Ted",""y2 = ","Iterate through hash w/ .each method, print value:","myhash.each { |somekey, somevalue| puts somevalue }array2.each { |key, value| puts value }""Iterate through hash w/ .each method, print key - value:","myhash.each { |somekey, somevalue| puts "The key is #{somekey} and the value is #{somevalue}" }array2.each { |key, value| puts "The key is #{key} and the value is #{value}" }""yhash.each { |somekey, somevalue| puts "The key is #{somekey} and the value is #{somevalue}" }array2.each { |key, value| puts "The ke""hash.each { |somekey, somevalue| puts "The key is #{somekey} and the value is #{somevalue}" }""ash.each { |somekey, somevalue| puts "The key is #{somek""sh.each { |somekey"Use select method to display items only if value of item is odd:,"myhash.select { |k, v| v.odd? }"Hashes,"my_hash = { "name" => "Eric",  "age" => 26,  "hungry?" => true}puts my_hash["name"]puts my_hash["age"]puts my_hash["hungry?"]""y_hash = { "name" => "Eric",  "age" => 26,  "hungry?" => true}puts my_hash["name"]puts my_hash["age"]puts my_has""_hash = { "name" => "Eric",  "age" => 26,  "hungry?" => true}puts my_hash["name"]puts my_hash["age"]""hash = { "name" => "Eric",  "age" => 26,  "hungry?" => true}puts my_hash["name"]puts my_ha""ash = { "name" => "Eric",  "age" => 26,  "hungry?" => true}puts my_hash["name"]p""sh = { "name" => "Eric",  "age" => 26,  "hungry?" => true}puts my_hash["""h = { "name" => "Eric",  "age" => 26,  "hungry?" => true}puts my"" = { "name" => "Eric",  "age" => 26,  "hungry?" => true}p""= { "name" => "Eric",  "age" => 26,  "hungry?" => true"" { "name" => "Eric",  "age" => 26,  "hungry?" => ""{ "name" => "Eric",  "age" => 26,  "hungry?" "" "name" => "Eric",  "age" => 26,  "hungry?"""name" => "Eric",  "age" => 26,  "hungry""name" => "Eric",  "age" => 26,  "hungry""ame" => "Eric",  "age" => 26,  "hu""me" => "Eric",  "age" => 26,  ""e" => "Eric",  "age" => 26,""" => "Eric",  "age" => 26,"" => "Eric",  "age" => 26,""=> "Eric",  "age" =>""> "Eric",  "age""" "Eric",  "ag"""Eric",  "a""Eric",  "a""ric",""ic"Iterating Over a Hash,"lunch_order = {  "Ryan" => "wonton soup",  "Eric" => "hamburger",  "Jimmy" => "sandwich",  "Sasha" => "salad",  "Cole" => "taco"}lunch_order.each do |key, value|    puts "#{value}"end""unch_order = {  "Ryan" => "wonton soup",  "Eric" => "hamburger",  "Jimmy" => "sandwich",  "Sasha" => "salad",  "Cole" => "taco"}lunch_order.each do |key, value|    p""nch_order = {  "Ryan" => "wonton soup",  "Eric" => "hamburger",  "Jimmy" => "sandwich",  "Sasha" => "salad",  "Cole" => "taco"}lunch_order.each do |""ch_order = {  "Ryan" => "wonton soup",  "Eric" => "hamburger",  "Jimmy" => "sandwich",  "Sasha" => "salad",  "Cole" => "taco"}lunch""h_order = {  "Ryan" => "wonton soup",  "Eric" => "hamburger",  "Jimmy" => "sandwich",  "Sasha" => "salad",  "Cole" => ""_order = {  "Ryan" => "wonton soup",  "Eric" => "hamburger",  "Jimmy" => "sandwich",  "Sasha" => "salad"""order = {  "Ryan" => "wonton soup",  "Eric" => "hamburger",  "Jimmy" => "sandwich",  "Sash""rder = {  "Ryan" => "wonton soup",  "Eric" => "hamburger",  "Jimmy" => "sandwi""der = {  "Ryan" => "wonton soup",  "Eric" => "hamburger",  "Jimmy"""er = {  "Ryan" => "wonton soup",  "Eric" => "hamburger",""r = {  "Ryan" => "wonton soup",  "Eric" => "ha"" = {  "Ryan" => "wonton soup",  "Eric""= {  "Ryan" => "wonton soup","" {  "Ryan" => "wonton s""{  "Ryan" => "won""  "Ryan" => ""  "Ryan" "" "Ryan"""Rya""Rya"Hash Projects,Hash Project 1 - Area Codes (Full),"directory = {	"chicago" => "312",	"flossmoor" => "708",	"niles" => "847",	"naperville" => "630"}def cities(hash)	hash.each { |k, v| puts k }enddef get_area_code(hash, key)	hash[key]endloop do	puts "Do you want to lookup an area code based on a city name? (y/n)"		answer = gets.chomp		if answer != "y"		breakendputs "Which city do you want the area code for?”cities(directory)puts "Enter your selection”prompt = gets.chompif directory.include?(prompt)	puts "The area code for #{prompt} is #{get_area_code(directory, prompt)}"else	puts "You entered a city name not in the directory."endend""irectory = {	"chicago" => "312",	"flossmoor" => "708",	"niles" => "847",	"naperville" => "630"}def cities(hash)	hash.each { |k, v| puts k }enddef get_area_code(hash, key)	hash[key]endloop do	puts "Do you want to lookup an area code based on a city name? (y/n)"		answer = gets.chomp		if answer != "y"		breakendputs "Which city do you want the area code for?”cities(directory)puts "Enter your selection”prompt = gets.chompif directory.include?(prompt)	puts "The area code for #{prompt} is #{get_area_code(directory, prompt)}"else	puts "You entered a city name not in the dire""rectory = {	"chicago" => "312",	"flossmoor" => "708",	"niles" => "847",	"naperville" => "630"}def cities(hash)	hash.each { |k, v| puts k }enddef get_area_code(hash, key)	hash[key]endloop do	puts "Do you want to lookup an area code based on a city name? (y/n)"		answer = gets.chomp		if answer != "y"		breakendputs "Which city do you want the area code for?”cities(directory)puts "Enter your selection”prompt = gets.chompif directory.include?(prompt)	puts "The area code for #{prompt} is #{get_area_code(directory, prompt)}"else	puts "You entered a city name n""ectory = {	"chicago" => "312",	"flossmoor" => "708",	"niles" => "847",	"naperville" => "630"}def cities(hash)	hash.each { |k, v| puts k }enddef get_area_code(hash, key)	hash[key]endloop do	puts "Do you want to lookup an area code based on a city name? (y/n)"		answer = gets.chomp		if answer != "y"		breakendputs "Which city do you want the area code for?”cities(directory)puts "Enter your selection”prompt = gets.chompif directory.include?(prompt)	puts "The area code for #{prompt} is #{get_area_code(directory, prompt)}"else	puts "You entered ""ctory = {	"chicago" => "312",	"flossmoor" => "708",	"niles" => "847",	"naperville" => "630"}def cities(hash)	hash.each { |k, v| puts k }enddef get_area_code(hash, key)	hash[key]endloop do	puts "Do you want to lookup an area code based on a city name? (y/n)"		answer = gets.chomp		if answer != "y"		breakendputs "Which city do you want the area code for?”cities(directory)puts "Enter your selection”prompt = gets.chompif directory.include?(prompt)	puts "The area code for #{prompt} is #{get_area_code(directory, prompt)}"else	puts """tory = {	"chicago" => "312",	"flossmoor" => "708",	"niles" => "847",	"naperville" => "630"}def cities(hash)	hash.each { |k, v| puts k }enddef get_area_code(hash, key)	hash[key]endloop do	puts "Do you want to lookup an area code based on a city name? (y/n)"		answer = gets.chomp		if answer != "y"		breakendputs "Which city do you want the area code for?”cities(directory)puts "Enter your selection”prompt = gets.chompif directory.include?(prompt)	puts "The area code for #{prompt} is #{get_area_code(directory, prompt)}"e""ory = {	"chicago" => "312",	"flossmoor" => "708",	"niles" => "847",	"naperville" => "630"}def cities(hash)	hash.each { |k, v| puts k }enddef get_area_code(hash, key)	hash[key]endloop do	puts "Do you want to lookup an area code based on a city name? (y/n)"		answer = gets.chomp		if answer != "y"		breakendputs "Which city do you want the area code for?”cities(directory)puts "Enter your selection”prompt = gets.chompif directory.include?(prompt)	puts "The area code for #{prompt} is #{get_area_code(directory, p""ry = {	"chicago" => "312",	"flossmoor" => "708",	"niles" => "847",	"naperville" => "630"}def cities(hash)	hash.each { |k, v| puts k }enddef get_area_code(hash, key)	hash[key]endloop do	puts "Do you want to lookup an area code based on a city name? (y/n)"		answer = gets.chomp		if answer != "y"		breakendputs "Which city do you want the area code for?”cities(directory)puts "Enter your selection”prompt = gets.chompif directory.include?(prompt)	puts "The area code for #{prompt} is #{get_area_code(dir""y = {	"chicago" => "312",	"flossmoor" => "708",	"niles" => "847",	"naperville" => "630"}def cities(hash)	hash.each { |k, v| puts k }enddef get_area_code(hash, key)	hash[key]endloop do	puts "Do you want to lookup an area code based on a city name? (y/n)"		answer = gets.chomp		if answer != "y"		breakendputs "Which city do you want the area code for?”cities(directory)puts "Enter your selection”prompt = gets.chompif directory.include?(prompt)	puts "The area code for #{prompt} is #{get_area_"" = {	"chicago" => "312",	"flossmoor" => "708",	"niles" => "847",	"naperville" => "630"}def cities(hash)	hash.each { |k, v| puts k }enddef get_area_code(hash, key)	hash[key]endloop do	puts "Do you want to lookup an area code based on a city name? (y/n)"		answer = gets.chomp		if answer != "y"		breakendputs "Which city do you want the area code for?”cities(directory)puts "Enter your selection”prompt = gets.chompif directory.include?(prompt)	puts "The area code for #{prompt} is #{ge""= {	"chicago" => "312",	"flossmoor" => "708",	"niles" => "847",	"naperville" => "630"}def cities(hash)	hash.each { |k, v| puts k }enddef get_area_code(hash, key)	hash[key]endloop do	puts "Do you want to lookup an area code based on a city name? (y/n)"		answer = gets.chomp		if answer != "y"		breakendputs "Which city do you want the area code for?”cities(directory)puts "Enter your selection”prompt = gets.chompif directory.include?(prompt)	puts "The area code for #{prompt} i"" {	"chicago" => "312",	"flossmoor" => "708",	"niles" => "847",	"naperville" => "630"}def cities(hash)	hash.each { |k, v| puts k }enddef get_area_code(hash, key)	hash[key]endloop do	puts "Do you want to lookup an area code based on a city name? (y/n)"		answer = gets.chomp		if answer != "y"		breakendputs "Which city do you want the area code for?”cities(directory)puts "Enter your selection”prompt = gets.chompif directory.include?(prompt)	puts "The area code for #{prom""{	"chicago" => "312",	"flossmoor" => "708",	"niles" => "847",	"naperville" => "630"}def cities(hash)	hash.each { |k, v| puts k }enddef get_area_code(hash, key)	hash[key]endloop do	puts "Do you want to lookup an area code based on a city name? (y/n)"		answer = gets.chomp		if answer != "y"		breakendputs "Which city do you want the area code for?”cities(directory)puts "Enter your selection”prompt = gets.chompif directory.include?(prompt)	puts "The area code for #{""	"chicago" => "312",	"flossmoor" => "708",	"niles" => "847",	"naperville" => "630"}def cities(hash)	hash.each { |k, v| puts k }enddef get_area_code(hash, key)	hash[key]endloop do	puts "Do you want to lookup an area code based on a city name? (y/n)"		answer = gets.chomp		if answer != "y"		breakendputs "Which city do you want the area code for?”cities(directory)puts "Enter your selection”prompt = gets.chompif directory.include?(prompt)	puts "The area code for""	"chicago" => "312",	"flossmoor" => "708",	"niles" => "847",	"naperville" => "630"}def cities(hash)	hash.each { |k, v| puts k }enddef get_area_code(hash, key)	hash[key]endloop do	puts "Do you want to lookup an area code based on a city name? (y/n)"		answer = gets.chomp		if answer != "y"		breakendputs "Which city do you want the area code for?”cities(directory)puts "Enter your selection”prompt = gets.chompif directory.include?(prompt)	puts "The area code f"""chicago" => "312",	"flossmoor" => "708",	"niles" => "847",	"naperville" => "630"}def cities(hash)	hash.each { |k, v| puts k }enddef get_area_code(hash, key)	hash[key]endloop do	puts "Do you want to lookup an area code based on a city name? (y/n)"		answer = gets.chomp		if answer != "y"		breakendputs "Which city do you want the area code for?”cities(directory)puts "Enter your selection”prompt = gets.chompif directory.include?(prompt)	puts "The area code ""chicago" => "312",	"flossmoor" => "708",	"niles" => "847",	"naperville" => "630"}def cities(hash)	hash.each { |k, v| puts k }enddef get_area_code(hash, key)	hash[key]endloop do	puts "Do you want to lookup an area code based on a city name? (y/n)"		answer = gets.chomp		if answer != "y"		breakendputs "Which city do you want the area code for?”cities(directory)puts "Enter your selection”prompt = gets.chompif directory.include?(prompt)	puts "The area code ""hicago" => "312",	"flossmoor" => "708",	"niles" => "847",	"naperville" => "630"}def cities(hash)	hash.each { |k, v| puts k }enddef get_area_code(hash, key)	hash[key]endloop do	puts "Do you want to lookup an area code based on a city name? (y/n)"		answer = gets.chomp		if answer != "y"		breakendputs "Which city do you want the area code for?”cities(directory)puts "Enter your selection”prompt = gets.chompif directory.include?(prompt)	puts "The are""icago" => "312",	"flossmoor" => "708",	"niles" => "847",	"naperville" => "630"}def cities(hash)	hash.each { |k, v| puts k }enddef get_area_code(hash, key)	hash[key]endloop do	puts "Do you want to lookup an area code based on a city name? (y/n)"		answer = gets.chomp		if answer != "y"		breakendputs "Which city do you want the area code for?”cities(directory)puts "Enter your selection”prompt = gets.chompif directory.include?(prompt)	puts "T""cago" => "312",	"flossmoor" => "708",	"niles" => "847",	"naperville" => "630"}def cities(hash)	hash.each { |k, v| puts k }enddef get_area_code(hash, key)	hash[key]endloop do	puts "Do you want to lookup an area code based on a city name? (y/n)"		answer = gets.chomp		if answer != "y"		breakendputs "Which city do you want the area code for?”cities(directory)puts "Enter your selection”prompt = gets.chompif directory.include?(prompt)	pu""ago" => "312",	"flossmoor" => "708",	"niles" => "847",	"naperville" => "630"}def cities(hash)	hash.each { |k, v| puts k }enddef get_area_code(hash, key)	hash[key]endloop do	puts "Do you want to lookup an area code based on a city name? (y/n)"		answer = gets.chomp		if answer != "y"		breakendputs "Which city do you want the area code for?”cities(directory)puts "Enter your selection”prompt = gets.chompif directory.include?(prompt)""go" => "312",	"flossmoor" => "708",	"niles" => "847",	"naperville" => "630"}def cities(hash)	hash.each { |k, v| puts k }enddef get_area_code(hash, key)	hash[key]endloop do	puts "Do you want to lookup an area code based on a city name? (y/n)"		answer = gets.chomp		if answer != "y"		breakendputs "Which city do you want the area code for?”cities(directory)puts "Enter your selection”prompt = gets.chompif directory.include?(prom""o" => "312",	"flossmoor" => "708",	"niles" => "847",	"naperville" => "630"}def cities(hash)	hash.each { |k, v| puts k }enddef get_area_code(hash, key)	hash[key]endloop do	puts "Do you want to lookup an area code based on a city name? (y/n)"		answer = gets.chomp		if answer != "y"		breakendputs "Which city do you want the area code for?”cities(directory)puts "Enter your selection”prompt = gets.chompif directory.include?(pr""" => "312",	"flossmoor" => "708",	"niles" => "847",	"naperville" => "630"}def cities(hash)	hash.each { |k, v| puts k }enddef get_area_code(hash, key)	hash[key]endloop do	puts "Do you want to lookup an area code based on a city name? (y/n)"		answer = gets.chomp		if answer != "y"		breakendputs "Which city do you want the area code for?”cities(directory)puts "Enter your selection”prompt = gets.chompif directory.include?(p"" => "312",	"flossmoor" => "708",	"niles" => "847",	"naperville" => "630"}def cities(hash)	hash.each { |k, v| puts k }enddef get_area_code(hash, key)	hash[key]endloop do	puts "Do you want to lookup an area code based on a city name? (y/n)"		answer = gets.chomp		if answer != "y"		breakendputs "Which city do you want the area code for?”cities(directory)puts "Enter your selection”prompt = gets.chompif directory.include?(p""=> "312",	"flossmoor" => "708",	"niles" => "847",	"naperville" => "630"}def cities(hash)	hash.each { |k, v| puts k }enddef get_area_code(hash, key)	hash[key]endloop do	puts "Do you want to lookup an area code based on a city name? (y/n)"		answer = gets.chomp		if answer != "y"		breakendputs "Which city do you want the area code for?”cities(directory)puts "Enter your selection”prompt = gets.chompif directory.includ""> "312",	"flossmoor" => "708",	"niles" => "847",	"naperville" => "630"}def cities(hash)	hash.each { |k, v| puts k }enddef get_area_code(hash, key)	hash[key]endloop do	puts "Do you want to lookup an area code based on a city name? (y/n)"		answer = gets.chomp		if answer != "y"		breakendputs "Which city do you want the area code for?”cities(directory)puts "Enter your selection”prompt = gets.chompif directory.inc"" "312",	"flossmoor" => "708",	"niles" => "847",	"naperville" => "630"}def cities(hash)	hash.each { |k, v| puts k }enddef get_area_code(hash, key)	hash[key]endloop do	puts "Do you want to lookup an area code based on a city name? (y/n)"		answer = gets.chomp		if answer != "y"		breakendputs "Which city do you want the area code for?”cities(directory)puts "Enter your selection”prompt = gets.chompif directory.i"""312",	"flossmoor" => "708",	"niles" => "847",	"naperville" => "630"}def cities(hash)	hash.each { |k, v| puts k }enddef get_area_code(hash, key)	hash[key]endloop do	puts "Do you want to lookup an area code based on a city name? (y/n)"		answer = gets.chomp		if answer != "y"		breakendputs "Which city do you want the area code for?”cities(directory)puts "Enter your selection”prompt = gets.chompif directory.""312",	"flossmoor" => "708",	"niles" => "847",	"naperville" => "630"}def cities(hash)	hash.each { |k, v| puts k }enddef get_area_code(hash, key)	hash[key]endloop do	puts "Do you want to lookup an area code based on a city name? (y/n)"		answer = gets.chomp		if answer != "y"		breakendputs "Which city do you want the area code for?”cities(directory)puts "Enter your selection”prompt = gets.chompif directory.""12",	"flossmoor" => "708",	"niles" => "847",	"naperville" => "630"}def cities(hash)	hash.each { |k, v| puts k }enddef get_area_code(hash, key)	hash[key]endloop do	puts "Do you want to lookup an area code based on a city name? (y/n)"		answer = gets.chomp		if answer != "y"		breakendputs "Which city do you want the area code for?”cities(directory)puts "Enter your selection”prompt = gets.chompif directo""2",	"flossmoor" => "708",	"niles" => "847",	"naperville" => "630"}def cities(hash)	hash.each { |k, v| puts k }enddef get_area_code(hash, key)	hash[key]endloop do	puts "Do you want to lookup an area code based on a city name? (y/n)"		answer = gets.chomp		if answer != "y"		breakendputs "Which city do you want the area code for?”cities(directory)puts "Enter your selection”prompt = gets.chompif direc""",	"flossmoor" => "708",	"niles" => "847",	"naperville" => "630"}def cities(hash)	hash.each { |k, v| puts k }enddef get_area_code(hash, key)	hash[key]endloop do	puts "Do you want to lookup an area code based on a city name? (y/n)"		answer = gets.chomp		if answer != "y"		breakendputs "Which city do you want the area code for?”cities(directory)puts "Enter your selection”prompt = gets.chompif dire"",	"flossmoor" => "708",	"niles" => "847",	"naperville" => "630"}def cities(hash)	hash.each { |k, v| puts k }enddef get_area_code(hash, key)	hash[key]endloop do	puts "Do you want to lookup an area code based on a city name? (y/n)"		answer = gets.chomp		if answer != "y"		breakendputs "Which city do you want the area code for?”cities(directory)puts "Enter your selection”prompt = gets.chompif dire""	"flossmoor" => "708",	"niles" => "847",	"naperville" => "630"}def cities(hash)	hash.each { |k, v| puts k }enddef get_area_code(hash, key)	hash[key]endloop do	puts "Do you want to lookup an area code based on a city name? (y/n)"		answer = gets.chomp		if answer != "y"		breakendputs "Which city do you want the area code for?”cities(directory)puts "Enter your selection”prompt = gets.chompif d""	"flossmoor" => "708",	"niles" => "847",	"naperville" => "630"}def cities(hash)	hash.each { |k, v| puts k }enddef get_area_code(hash, key)	hash[key]endloop do	puts "Do you want to lookup an area code based on a city name? (y/n)"		answer = gets.chomp		if answer != "y"		breakendputs "Which city do you want the area code for?”cities(directory)puts "Enter your selection”prompt = gets.chompif"""flossmoor" => "708",	"niles" => "847",	"naperville" => "630"}def cities(hash)	hash.each { |k, v| puts k }enddef get_area_code(hash, key)	hash[key]endloop do	puts "Do you want to lookup an area code based on a city name? (y/n)"		answer = gets.chomp		if answer != "y"		breakendputs "Which city do you want the area code for?”cities(directory)puts "Enter your selection”prompt = gets.chompi""flossmoor" => "708",	"niles" => "847",	"naperville" => "630"}def cities(hash)	hash.each { |k, v| puts k }enddef get_area_code(hash, key)	hash[key]endloop do	puts "Do you want to lookup an area code based on a city name? (y/n)"		answer = gets.chomp		if answer != "y"		breakendputs "Which city do you want the area code for?”cities(directory)puts "Enter your selection”prompt = gets.chompi""lossmoor" => "708",	"niles" => "847",	"naperville" => "630"}def cities(hash)	hash.each { |k, v| puts k }enddef get_area_code(hash, key)	hash[key]endloop do	puts "Do you want to lookup an area code based on a city name? (y/n)"		answer = gets.chomp		if answer != "y"		breakendputs "Which city do you want the area code for?”cities(directory)puts "Enter your selection”prompt = gets""ossmoor" => "708",	"niles" => "847",	"naperville" => "630"}def cities(hash)	hash.each { |k, v| puts k }enddef get_area_code(hash, key)	hash[key]endloop do	puts "Do you want to lookup an area code based on a city name? (y/n)"		answer = gets.chomp		if answer != "y"		breakendputs "Which city do you want the area code for?”cities(directory)puts "Enter your selection”promp""ssmoor" => "708",	"niles" => "847",	"naperville" => "630"}def cities(hash)	hash.each { |k, v| puts k }enddef get_area_code(hash, key)	hash[key]endloop do	puts "Do you want to lookup an area code based on a city name? (y/n)"		answer = gets.chomp		if answer != "y"		breakendputs "Which city do you want the area code for?”cities(directory)puts "Enter your selection”""smoor" => "708",	"niles" => "847",	"naperville" => "630"}def cities(hash)	hash.each { |k, v| puts k }enddef get_area_code(hash, key)	hash[key]endloop do	puts "Do you want to lookup an area code based on a city name? (y/n)"		answer = gets.chomp		if answer != "y"		breakendputs "Which city do you want the area code for?”cities(directory)puts "Enter your sele""moor" => "708",	"niles" => "847",	"naperville" => "630"}def cities(hash)	hash.each { |k, v| puts k }enddef get_area_code(hash, key)	hash[key]endloop do	puts "Do you want to lookup an area code based on a city name? (y/n)"		answer = gets.chomp		if answer != "y"		breakendputs "Which city do you want the area code for?”cities(directory)puts "Enter your""oor" => "708",	"niles" => "847",	"naperville" => "630"}def cities(hash)	hash.each { |k, v| puts k }enddef get_area_code(hash, key)	hash[key]endloop do	puts "Do you want to lookup an area code based on a city name? (y/n)"		answer = gets.chomp		if answer != "y"		breakendputs "Which city do you want the area code for?”cities(directory)puts "Enter ""or" => "708",	"niles" => "847",	"naperville" => "630"}def cities(hash)	hash.each { |k, v| puts k }enddef get_area_code(hash, key)	hash[key]endloop do	puts "Do you want to lookup an area code based on a city name? (y/n)"		answer = gets.chomp		if answer != "y"		breakendputs "Which city do you want the area code for?”cities(directory)puts "Ent""r" => "708",	"niles" => "847",	"naperville" => "630"}def cities(hash)	hash.each { |k, v| puts k }enddef get_area_code(hash, key)	hash[key]endloop do	puts "Do you want to lookup an area code based on a city name? (y/n)"		answer = gets.chomp		if answer != "y"		breakendputs "Which city do you want the area code for?”cities(directory)puts "E""" => "708",	"niles" => "847",	"naperville" => "630"}def cities(hash)	hash.each { |k, v| puts k }enddef get_area_code(hash, key)	hash[key]endloop do	puts "Do you want to lookup an area code based on a city name? (y/n)"		answer = gets.chomp		if answer != "y"		breakendputs "Which city do you want the area code for?”cities(directory)puts """ => "708",	"niles" => "847",	"naperville" => "630"}def cities(hash)	hash.each { |k, v| puts k }enddef get_area_code(hash, key)	hash[key]endloop do	puts "Do you want to lookup an area code based on a city name? (y/n)"		answer = gets.chomp		if answer != "y"		breakendputs "Which city do you want the area code for?”cities(directory)puts """=> "708",	"niles" => "847",	"naperville" => "630"}def cities(hash)	hash.each { |k, v| puts k }enddef get_area_code(hash, key)	hash[key]endloop do	puts "Do you want to lookup an area code based on a city name? (y/n)"		answer = gets.chomp		if answer != "y"		breakendputs "Which city do you want the area code for?”cities(directory)pu""> "708",	"niles" => "847",	"naperville" => "630"}def cities(hash)	hash.each { |k, v| puts k }enddef get_area_code(hash, key)	hash[key]endloop do	puts "Do you want to lookup an area code based on a city name? (y/n)"		answer = gets.chomp		if answer != "y"		breakendputs "Which city do you want the area code for?”cities(directory)"" "708",	"niles" => "847",	"naperville" => "630"}def cities(hash)	hash.each { |k, v| puts k }enddef get_area_code(hash, key)	hash[key]endloop do	puts "Do you want to lookup an area code based on a city name? (y/n)"		answer = gets.chomp		if answer != "y"		breakendputs "Which city do you want the area code for?”cities(directory"""708",	"niles" => "847",	"naperville" => "630"}def cities(hash)	hash.each { |k, v| puts k }enddef get_area_code(hash, key)	hash[key]endloop do	puts "Do you want to lookup an area code based on a city name? (y/n)"		answer = gets.chomp		if answer != "y"		breakendputs "Which city do you want the area code for?”cities(director""708",	"niles" => "847",	"naperville" => "630"}def cities(hash)	hash.each { |k, v| puts k }enddef get_area_code(hash, key)	hash[key]endloop do	puts "Do you want to lookup an area code based on a city name? (y/n)"		answer = gets.chomp		if answer != "y"		breakendputs "Which city do you want the area code for?”cities(director""08",	"niles" => "847",	"naperville" => "630"}def cities(hash)	hash.each { |k, v| puts k }enddef get_area_code(hash, key)	hash[key]endloop do	puts "Do you want to lookup an area code based on a city name? (y/n)"		answer = gets.chomp		if answer != "y"		breakendputs "Which city do you want the area code for?”cities(direc""8",	"niles" => "847",	"naperville" => "630"}def cities(hash)	hash.each { |k, v| puts k }enddef get_area_code(hash, key)	hash[key]endloop do	puts "Do you want to lookup an area code based on a city name? (y/n)"		answer = gets.chomp		if answer != "y"		breakendputs "Which city do you want the area code for?”cities(dir""",	"niles" => "847",	"naperville" => "630"}def cities(hash)	hash.each { |k, v| puts k }enddef get_area_code(hash, key)	hash[key]endloop do	puts "Do you want to lookup an area code based on a city name? (y/n)"		answer = gets.chomp		if answer != "y"		breakendputs "Which city do you want the area code for?”cities(di"",	"niles" => "847",	"naperville" => "630"}def cities(hash)	hash.each { |k, v| puts k }enddef get_area_code(hash, key)	hash[key]endloop do	puts "Do you want to lookup an area code based on a city name? (y/n)"		answer = gets.chomp		if answer != "y"		breakendputs "Which city do you want the area code for?”cities(di""	"niles" => "847",	"naperville" => "630"}def cities(hash)	hash.each { |k, v| puts k }enddef get_area_code(hash, key)	hash[key]endloop do	puts "Do you want to lookup an area code based on a city name? (y/n)"		answer = gets.chomp		if answer != "y"		breakendputs "Which city do you want the area code for?”cities""	"niles" => "847",	"naperville" => "630"}def cities(hash)	hash.each { |k, v| puts k }enddef get_area_code(hash, key)	hash[key]endloop do	puts "Do you want to lookup an area code based on a city name? (y/n)"		answer = gets.chomp		if answer != "y"		breakendputs "Which city do you want the area code for?”citi"""niles" => "847",	"naperville" => "630"}def cities(hash)	hash.each { |k, v| puts k }enddef get_area_code(hash, key)	hash[key]endloop do	puts "Do you want to lookup an area code based on a city name? (y/n)"		answer = gets.chomp		if answer != "y"		breakendputs "Which city do you want the area code for?”cit""niles" => "847",	"naperville" => "630"}def cities(hash)	hash.each { |k, v| puts k }enddef get_area_code(hash, key)	hash[key]endloop do	puts "Do you want to lookup an area code based on a city name? (y/n)"		answer = gets.chomp		if answer != "y"		breakendputs "Which city do you want the area code for?”cit""iles" => "847",	"naperville" => "630"}def cities(hash)	hash.each { |k, v| puts k }enddef get_area_code(hash, key)	hash[key]endloop do	puts "Do you want to lookup an area code based on a city name? (y/n)"		answer = gets.chomp		if answer != "y"		breakendputs "Which city do you want the area code for?”""les" => "847",	"naperville" => "630"}def cities(hash)	hash.each { |k, v| puts k }enddef get_area_code(hash, key)	hash[key]endloop do	puts "Do you want to lookup an area code based on a city name? (y/n)"		answer = gets.chomp		if answer != "y"		breakendputs "Which city do you want the area code f""es" => "847",	"naperville" => "630"}def cities(hash)	hash.each { |k, v| puts k }enddef get_area_code(hash, key)	hash[key]endloop do	puts "Do you want to lookup an area code based on a city name? (y/n)"		answer = gets.chomp		if answer != "y"		breakendputs "Which city do you want the area cod""s" => "847",	"naperville" => "630"}def cities(hash)	hash.each { |k, v| puts k }enddef get_area_code(hash, key)	hash[key]endloop do	puts "Do you want to lookup an area code based on a city name? (y/n)"		answer = gets.chomp		if answer != "y"		breakendputs "Which city do you want the area c""" => "847",	"naperville" => "630"}def cities(hash)	hash.each { |k, v| puts k }enddef get_area_code(hash, key)	hash[key]endloop do	puts "Do you want to lookup an area code based on a city name? (y/n)"		answer = gets.chomp		if answer != "y"		breakendputs "Which city do you want the area "" => "847",	"naperville" => "630"}def cities(hash)	hash.each { |k, v| puts k }enddef get_area_code(hash, key)	hash[key]endloop do	puts "Do you want to lookup an area code based on a city name? (y/n)"		answer = gets.chomp		if answer != "y"		breakendputs "Which city do you want the area ""=> "847",	"naperville" => "630"}def cities(hash)	hash.each { |k, v| puts k }enddef get_area_code(hash, key)	hash[key]endloop do	puts "Do you want to lookup an area code based on a city name? (y/n)"		answer = gets.chomp		if answer != "y"		breakendputs "Which city do you want the a""> "847",	"naperville" => "630"}def cities(hash)	hash.each { |k, v| puts k }enddef get_area_code(hash, key)	hash[key]endloop do	puts "Do you want to lookup an area code based on a city name? (y/n)"		answer = gets.chomp		if answer != "y"		breakendputs "Which city do you want th"" "847",	"naperville" => "630"}def cities(hash)	hash.each { |k, v| puts k }enddef get_area_code(hash, key)	hash[key]endloop do	puts "Do you want to lookup an area code based on a city name? (y/n)"		answer = gets.chomp		if answer != "y"		breakendputs "Which city do you want """847",	"naperville" => "630"}def cities(hash)	hash.each { |k, v| puts k }enddef get_area_code(hash, key)	hash[key]endloop do	puts "Do you want to lookup an area code based on a city name? (y/n)"		answer = gets.chomp		if answer != "y"		breakendputs "Which city do you want""847",	"naperville" => "630"}def cities(hash)	hash.each { |k, v| puts k }enddef get_area_code(hash, key)	hash[key]endloop do	puts "Do you want to lookup an area code based on a city name? (y/n)"		answer = gets.chomp		if answer != "y"		breakendputs "Which city do you want""47",	"naperville" => "630"}def cities(hash)	hash.each { |k, v| puts k }enddef get_area_code(hash, key)	hash[key]endloop do	puts "Do you want to lookup an area code based on a city name? (y/n)"		answer = gets.chomp		if answer != "y"		breakendputs "Which city do you w""7",	"naperville" => "630"}def cities(hash)	hash.each { |k, v| puts k }enddef get_area_code(hash, key)	hash[key]endloop do	puts "Do you want to lookup an area code based on a city name? (y/n)"		answer = gets.chomp		if answer != "y"		breakendputs "Which city do you""",	"naperville" => "630"}def cities(hash)	hash.each { |k, v| puts k }enddef get_area_code(hash, key)	hash[key]endloop do	puts "Do you want to lookup an area code based on a city name? (y/n)"		answer = gets.chomp		if answer != "y"		breakendputs "Which city do yo"",	"naperville" => "630"}def cities(hash)	hash.each { |k, v| puts k }enddef get_area_code(hash, key)	hash[key]endloop do	puts "Do you want to lookup an area code based on a city name? (y/n)"		answer = gets.chomp		if answer != "y"		breakendputs "Which city do yo""	"naperville" => "630"}def cities(hash)	hash.each { |k, v| puts k }enddef get_area_code(hash, key)	hash[key]endloop do	puts "Do you want to lookup an area code based on a city name? (y/n)"		answer = gets.chomp		if answer != "y"		breakendputs "Which city do""	"naperville" => "630"}def cities(hash)	hash.each { |k, v| puts k }enddef get_area_code(hash, key)	hash[key]endloop do	puts "Do you want to lookup an area code based on a city name? (y/n)"		answer = gets.chomp		if answer != "y"		breakendputs "Which city """naperville" => "630"}def cities(hash)	hash.each { |k, v| puts k }enddef get_area_code(hash, key)	hash[key]endloop do	puts "Do you want to lookup an area code based on a city name? (y/n)"		answer = gets.chomp		if answer != "y"		breakendputs "Which city""naperville" => "630"}def cities(hash)	hash.each { |k, v| puts k }enddef get_area_code(hash, key)	hash[key]endloop do	puts "Do you want to lookup an area code based on a city name? (y/n)"		answer = gets.chomp		if answer != "y"		breakendputs "Which city""aperville" => "630"}def cities(hash)	hash.each { |k, v| puts k }enddef get_area_code(hash, key)	hash[key]endloop do	puts "Do you want to lookup an area code based on a city name? (y/n)"		answer = gets.chomp		if answer != "y"		breakendputs """perville" => "630"}def cities(hash)	hash.each { |k, v| puts k }enddef get_area_code(hash, key)	hash[key]endloop do	puts "Do you want to lookup an area code based on a city name? (y/n)"		answer = gets.chomp		if answer != "y"		breaken""erville" => "630"}def cities(hash)	hash.each { |k, v| puts k }enddef get_area_code(hash, key)	hash[key]endloop do	puts "Do you want to lookup an area code based on a city name? (y/n)"		answer = gets.chomp		if answer != "y"		""rville" => "630"}def cities(hash)	hash.each { |k, v| puts k }enddef get_area_code(hash, key)	hash[key]endloop do	puts "Do you want to lookup an area code based on a city name? (y/n)"		answer = gets.chomp		if answer !=""ville" => "630"}def cities(hash)	hash.each { |k, v| puts k }enddef get_area_code(hash, key)	hash[key]endloop do	puts "Do you want to lookup an area code based on a city name? (y/n)"		answer = gets.chomp		if ans""ille" => "630"}def cities(hash)	hash.each { |k, v| puts k }enddef get_area_code(hash, key)	hash[key]endloop do	puts "Do you want to lookup an area code based on a city name? (y/n)"		answer = gets.chomp		i""lle" => "630"}def cities(hash)	hash.each { |k, v| puts k }enddef get_area_code(hash, key)	hash[key]endloop do	puts "Do you want to lookup an area code based on a city name? (y/n)"		answer = gets.chomp""le" => "630"}def cities(hash)	hash.each { |k, v| puts k }enddef get_area_code(hash, key)	hash[key]endloop do	puts "Do you want to lookup an area code based on a city name? (y/n)"		answer = gets.cho""e" => "630"}def cities(hash)	hash.each { |k, v| puts k }enddef get_area_code(hash, key)	hash[key]endloop do	puts "Do you want to lookup an area code based on a city name? (y/n)"		answer = gets.c""" => "630"}def cities(hash)	hash.each { |k, v| puts k }enddef get_area_code(hash, key)	hash[key]endloop do	puts "Do you want to lookup an area code based on a city name? (y/n)"		answer = gets."" => "630"}def cities(hash)	hash.each { |k, v| puts k }enddef get_area_code(hash, key)	hash[key]endloop do	puts "Do you want to lookup an area code based on a city name? (y/n)"		answer = gets.""=> "630"}def cities(hash)	hash.each { |k, v| puts k }enddef get_area_code(hash, key)	hash[key]endloop do	puts "Do you want to lookup an area code based on a city name? (y/n)"		answer = g""> "630"}def cities(hash)	hash.each { |k, v| puts k }enddef get_area_code(hash, key)	hash[key]endloop do	puts "Do you want to lookup an area code based on a city name? (y/n)"		answer "" "630"}def cities(hash)	hash.each { |k, v| puts k }enddef get_area_code(hash, key)	hash[key]endloop do	puts "Do you want to lookup an area code based on a city name? (y/n)"		answe"""630"}def cities(hash)	hash.each { |k, v| puts k }enddef get_area_code(hash, key)	hash[key]endloop do	puts "Do you want to lookup an area code based on a city name? (y/n)"		answ""630"}def cities(hash)	hash.each { |k, v| puts k }enddef get_area_code(hash, key)	hash[key]endloop do	puts "Do you want to lookup an area code based on a city name? (y/n)"		answ""30"}def cities(hash)	hash.each { |k, v| puts k }enddef get_area_code(hash, key)	hash[key]endloop do	puts "Do you want to lookup an area code based on a city name? (y/n)"		a""0"}def cities(hash)	hash.each { |k, v| puts k }enddef get_area_code(hash, key)	hash[key]endloop do	puts "Do you want to lookup an area code based on a city name? (y/n)"	"""}def cities(hash)	hash.each { |k, v| puts k }enddef get_area_code(hash, key)	hash[key]endloop do	puts "Do you want to lookup an area code based on a city name? (y/n)"	""}def cities(hash)	hash.each { |k, v| puts k }enddef get_area_code(hash, key)	hash[key]endloop do	puts "Do you want to lookup an area code based on a city name? (y/n)"	""}def cities(hash)	hash.each { |k, v| puts k }enddef get_are"Hash Project 2a - Basic Contacts: Create Hash in Array (Basic),"contacts = [	{		fn:"adam",		ln:"smith"	},		{		fn:"ted",		ln:"stevens"	}	]	contacts.each{|x| puts x}""ontacts = [	{		fn:"adam",		ln:"smith"	},		{		fn:"ted",		ln:"stevens"	}	]	cont""ntacts = [	{		fn:"adam",		ln:"smith"	},		{		fn:"ted",		ln:"st""tacts = [	{		fn:"adam",		ln:"smith"	},		{	""acts = [	{		fn:"adam",		ln:""cts = [	{	"Hash Project 2b - Basic Contacts:  Create Search,"contacts = [  {    fname:"tony",    lname:"smith"  },  {    fname:"jane",    lname:"jones"  }]puts "Search by last name:"answer = gets.chompcontacts.each{|x|  if answer == x["lname".to_sym]  puts xend}""ontacts = [  {    fname:"tony",    lname:"smith"  },  {    fname:"jane",    lname:"jones"  }]puts "Search by last name:"answer = gets.chompcontacts.each{|x|  if answer == x["ln""ntacts = [  {    fname:"tony",    lname:"smith"  },  {    fname:"jane",    lname:"jones"  }]puts "Search by last name:"answer = gets.chompcontacts.eac""tacts = [  {    fname:"tony",    lname:"smith"  },  {    fname:"jane",    lname:"jones"  }]puts "Search by last name:"answer =""acts = [  {    fname:"tony",    lname:"smith"  },  {    fname:"jane",    lname:"jones"  }]puts "Search""cts = [  {    fname:"tony",    lname:"smith"  },  {    fname:"jane",    lname:"jon""ts = [  {    fname:"tony",    lname:"smith"  },  {    fname:""s = [  {    fname:"tony",    lname:"smith""" = [  {    fname:"tony""= ["Hash Project 3a - Advanced Contacts:  Hash in Array & Formatting,"contacts = [  {    fname:"steve",    lname:"jobs",    street:"4321 mystreet rd",    city:"naperville",    state: "il",    zip: 60563,    phone: "312-123-4567",    email: "abcd@gmail.com"  }, {    fname:"donald",    lname:"trump",    street:"123 main st",    city:"anytown",    state: "il",    zip: 60563,    phone: "630-123-4567",    email: "1234@yahoo.com"  }]def display(hash)  hash.each { |key, value|    case key.to_s    when "fname"      key = "First Name".to_sym      value.capitalize!    when "lname"      key = "Last Name".to_sym      value.capitalize!    when "city"      key = key.to_s.capitalize!.to_sym   	  value.capitalize!    when "street"      key = key.to_s.capitalize!.to_sym    	arr = value.split(" ")    	arr.each { |x|   			x.capitalize!   	}   	  value = arr.join(" ")    when "state"      key = key.to_s.capitalize!.to_sym   	  value.upcase!    else      key = key.to_s.capitalize!.to_sym    end    puts "#{key}: #{value}"  }end""ontacts = [  {    fname:"steve",    lname:"jobs",    street:"4321 mystreet rd",    city:"naperville",    state: "il",    zip: 60563,    phone: "312-123-4567",    email: "abcd@gmail.com"  }, {    fname:"donald",    lname:"trump",    street:"123 main st",    city:"anytown",    state: "il",    zip: 60563,    phone: "630-123-4567",    email: "1234@yahoo.com"  }]def display(hash)  hash.each { |key, value|    case key.to_s    when "fname"      key = "First Name".to_sym      value.capitalize!    when "lname"      key = "Last Name".to_sym      value.capitalize!    when "city"      key = key.to_s.capitalize!.to_sym   	  value.capitalize!    when "street"      key = key.to_s.capitalize!.to_sym    	arr = value.split(" ")    	arr.each { |x|   			x.capitalize!   	}   	  value = arr.join(" ")    when "state"      key = key.to_s.capitalize!.to_sym   	  value.upcase!    else      key = key.to_s.capitalize!.to_sym    end    puts""ntacts = [  {    fname:"steve",    lname:"jobs",    street:"4321 mystreet rd",    city:"naperville",    state: "il",    zip: 60563,    phone: "312-123-4567",    email: "abcd@gmail.com"  }, {    fname:"donald",    lname:"trump",    street:"123 main st",    city:"anytown",    state: "il",    zip: 60563,    phone: "630-123-4567",    email: "1234@yahoo.com"  }]def display(hash)  hash.each { |key, value|    case key.to_s    when "fname"      key = "First Name".to_sym      value.capitalize!    when "lname"      key = "Last Name".to_sym      value.capitalize!    when "city"      key = key.to_s.capitalize!.to_sym   	  value.capitalize!    when "street"      key = key.to_s.capitalize!.to_sym    	arr = value.split(" ")    	arr.each { |x|   			x.capitalize!   	}   	  value = arr.join(" ")    when "state"      key = key.to_s.capitalize!.to_sym   	  value.upcase!    else      key = key.to_s.capitalize""tacts = [  {    fname:"steve",    lname:"jobs",    street:"4321 mystreet rd",    city:"naperville",    state: "il",    zip: 60563,    phone: "312-123-4567",    email: "abcd@gmail.com"  }, {    fname:"donald",    lname:"trump",    street:"123 main st",    city:"anytown",    state: "il",    zip: 60563,    phone: "630-123-4567",    email: "1234@yahoo.com"  }]def display(hash)  hash.each { |key, value|    case key.to_s    when "fname"      key = "First Name".to_sym      value.capitalize!    when "lname"      key = "Last Name".to_sym      value.capitalize!    when "city"      key = key.to_s.capitalize!.to_sym   	  value.capitalize!    when "street"      key = key.to_s.capitalize!.to_sym    	arr = value.split(" ")    	arr.each { |x|   			x.capitalize!   	}   	  value = arr.join(" ")    when "state"      key = key.to_s.capitalize!.to_sym   	  value.upcase!    else      ""acts = [  {    fname:"steve",    lname:"jobs",    street:"4321 mystreet rd",    city:"naperville",    state: "il",    zip: 60563,    phone: "312-123-4567",    email: "abcd@gmail.com"  }, {    fname:"donald",    lname:"trump",    street:"123 main st",    city:"anytown",    state: "il",    zip: 60563,    phone: "630-123-4567",    email: "1234@yahoo.com"  }]def display(hash)  hash.each { |key, value|    case key.to_s    when "fname"      key = "First Name".to_sym      value.capitalize!    when "lname"      key = "Last Name".to_sym      value.capitalize!    when "city"      key = key.to_s.capitalize!.to_sym   	  value.capitalize!    when "street"      key = key.to_s.capitalize!.to_sym    	arr = value.split(" ")    	arr.each { |x|   			x.capitalize!   	}   	  value = arr.join(" ")    when "state"      key = key.to_s.capitalize!.to_sym   	  value""cts = [  {    fname:"steve",    lname:"jobs",    street:"4321 mystreet rd",    city:"naperville",    state: "il",    zip: 60563,    phone: "312-123-4567",    email: "abcd@gmail.com"  }, {    fname:"donald",    lname:"trump",    street:"123 main st",    city:"anytown",    state: "il",    zip: 60563,    phone: "630-123-4567",    email: "1234@yahoo.com"  }]def display(hash)  hash.each { |key, value|    case key.to_s    when "fname"      key = "First Name".to_sym      value.capitalize!    when "lname"      key = "Last Name".to_sym      value.capitalize!    when "city"      key = key.to_s.capitalize!.to_sym   	  value.capitalize!    when "street"      key = key.to_s.capitalize!.to_sym    	arr = value.split(" ")    	arr.each { |x|   			x.capitalize!   	}   	  value = arr.join(" ")    when "state"      key = key.to_s.capital""ts = [  {    fname:"steve",    lname:"jobs",    street:"4321 mystreet rd",    city:"naperville",    state: "il",    zip: 60563,    phone: "312-123-4567",    email: "abcd@gmail.com"  }, {    fname:"donald",    lname:"trump",    street:"123 main st",    city:"anytown",    state: "il",    zip: 60563,    phone: "630-123-4567",    email: "1234@yahoo.com"  }]def display(hash)  hash.each { |key, value|    case key.to_s    when "fname"      key = "First Name".to_sym      value.capitalize!    when "lname"      key = "Last Name".to_sym      value.capitalize!    when "city"      key = key.to_s.capitalize!.to_sym   	  value.capitalize!    when "street"      key = key.to_s.capitalize!.to_sym    	arr = value.split(" ")    	arr.each { |x|   			x.capitalize!   	}   	  value = arr.join(" ")    when "state"      ""s = [  {    fname:"steve",    lname:"jobs",    street:"4321 mystreet rd",    city:"naperville",    state: "il",    zip: 60563,    phone: "312-123-4567",    email: "abcd@gmail.com"  }, {    fname:"donald",    lname:"trump",    street:"123 main st",    city:"anytown",    state: "il",    zip: 60563,    phone: "630-123-4567",    email: "1234@yahoo.com"  }]def display(hash)  hash.each { |key, value|    case key.to_s    when "fname"      key = "First Name".to_sym      value.capitalize!    when "lname"      key = "Last Name".to_sym      value.capitalize!    when "city"      key = key.to_s.capitalize!.to_sym   	  value.capitalize!    when "street"      key = key.to_s.capitalize!.to_sym    	arr = value.split(" ")    	arr.each { |x|   			x.capitalize!   	}   	  value = arr.join(" ")  "" = [  {    fname:"steve",    lname:"jobs",    street:"4321 mystreet rd",    city:"naperville",    state: "il",    zip: 60563,    phone: "312-123-4567",    email: "abcd@gmail.com"  }, {    fname:"donald",    lname:"trump",    street:"123 main st",    city:"anytown",    state: "il",    zip: 60563,    phone: "630-123-4567",    email: "1234@yahoo.com"  }]def display(hash)  hash.each { |key, value|    case key.to_s    when "fname"      key = "First Name".to_sym      value.capitalize!    when "lname"      key = "Last Name".to_sym      value.capitalize!    when "city"      key = key.to_s.capitalize!.to_sym   	  value.capitalize!    when "street"      key = key.to_s.capitalize!.to_sym    	arr = value.split(" ")    	arr.each { |x|   			x.capitalize!   	}   	  valu""= [  {    fname:"steve",    lname:"jobs",    street:"4321 mystreet rd",    city:"naperville",    state: "il",    zip: 60563,    phone: "312-123-4567",    email: "abcd@gmail.com"  }, {    fname:"donald",    lname:"trump",    street:"123 main st",    city:"anytown",    state: "il",    zip: 60563,    phone: "630-123-4567",    email: "1234@yahoo.com"  }]def display(hash)  hash.each { |key, value|    case key.to_s    when "fname"      key = "First Name".to_sym      value.capitalize!    when "lname"      key = "Last Name".to_sym      value.capitalize!    when "city"      key = key.to_s.capitalize!.to_sym   	  value.capitalize!    when "street"      key = key.to_s.capitalize!.to_sym    	arr = value.split(" ")    	arr.each { |x|   			x.capitaliz"" [  {    fname:"steve",    lname:"jobs",    street:"4321 mystreet rd",    city:"naperville",    state: "il",    zip: 60563,    phone: "312-123-4567",    email: "abcd@gmail.com"  }, {    fname:"donald",    lname:"trump",    street:"123 main st",    city:"anytown",    state: "il",    zip: 60563,    phone: "630-123-4567",    email: "1234@yahoo.com"  }]def display(hash)  hash.each { |key, value|    case key.to_s    when "fname"      key = "First Name".to_sym      value.capitalize!    when "lname"      key = "Last Name".to_sym      value.capitalize!    when "city"      key = key.to_s.capitalize!.to_sym   	  value.capitalize!    when "street"      key = key.to_s.capitalize!.to_sym    	arr = value.split(" ")    	arr.each { |x|""[  {    fname:"steve",    lname:"jobs",    street:"4321 mystreet rd",    city:"naperville",    state: "il",    zip: 60563,    phone: "312-123-4567",    email: "abcd@gmail.com"  }, {    fname:"donald",    lname:"trump",    street:"123 main st",    city:"anytown",    state: "il",    zip: 60563,    phone: "630-123-4567",    email: "1234@yahoo.com"  }]def display(hash)  hash.each { |key, value|    case key.to_s    when "fname"      key = "First Name".to_sym      value.capitalize!    when "lname"      key = "Last Name".to_sym      value.capitalize!    when "city"      key = key.to_s.capitalize!.to_sym   	  value.capitalize!    when "street"      key = key.to_s.capitalize!.to_sym    	arr = value.split(" ")  ""  {    fname:"steve",    lname:"jobs",    street:"4321 mystreet rd",    city:"naperville",    state: "il",    zip: 60563,    phone: "312-123-4567",    email: "abcd@gmail.com"  }, {    fname:"donald",    lname:"trump",    street:"123 main st",    city:"anytown",    state: "il",    zip: 60563,    phone: "630-123-4567",    email: "1234@yahoo.com"  }]def display(hash)  hash.each { |key, value|    case key.to_s    when "fname"      key = "First Name".to_sym      value.capitalize!    when "lname"      key = "Last Name".to_sym      value.capitalize!    when "city"      key = key.to_s.capitalize!.to_sym   	  value.capitalize!    when "street"      key = key.to_s.capitalize!.to_sym    	arr = val""  {    fname:"steve",    lname:"jobs",    street:"4321 mystreet rd",    city:"naperville",    state: "il",    zip: 60563,    phone: "312-123-4567",    email: "abcd@gmail.com"  }, {    fname:"donald",    lname:"trump",    street:"123 main st",    city:"anytown",    state: "il",    zip: 60563,    phone: "630-123-4567",    email: "1234@yahoo.com"  }]def display(hash)  hash.each { |key, value|    case key.to_s    when "fname"      key = "First Name".to_sym      value.capitalize!    when "lname"      key = "Last Name".to_sym      value.capitalize!    when "city"      key = key.to_s.capitalize!.to_sym   	  value.capitalize!    when "street"      key = key.to_s.capitalize!.to_sym"" {    fname:"steve",    lname:"jobs",    street:"4321 mystreet rd",    city:"naperville",    state: "il",    zip: 60563,    phone: "312-123-4567",    email: "abcd@gmail.com"  }, {    fname:"donald",    lname:"trump",    street:"123 main st",    city:"anytown",    state: "il",    zip: 60563,    phone: "630-123-4567",    email: "1234@yahoo.com"  }]def display(hash)  hash.each { |key, value|    case key.to_s    when "fname"      key = "First Name".to_sym      value.capitalize!    when "lname"      key = "Last Name".to_sym      value.capitalize!    when "city"      key = key.to_s.capitalize!.to_sym   	  value.capitalize!    when "street"      key = key.to_s.capi""{    fname:"steve",    lname:"jobs",    street:"4321 mystreet rd",    city:"naperville",    state: "il",    zip: 60563,    phone: "312-123-4567",    email: "abcd@gmail.com"  }, {    fname:"donald",    lname:"trump",    street:"123 main st",    city:"anytown",    state: "il",    zip: 60563,    phone: "630-123-4567",    email: "1234@yahoo.com"  }]def display(hash)  hash.each { |key, value|    case key.to_s    when "fname"      key = "First Name".to_sym      value.capitalize!    when "lname"      key = "Last Name".to_sym      value.capitalize!    when "city"      key = key.to_s.capitalize!.to_sym   	  value.capitalize!    when "street"      key = ""    fname:"steve",    lname:"jobs",    street:"4321 mystreet rd",    city:"naperville",    state: "il",    zip: 60563,    phone: "312-123-4567",    email: "abcd@gmail.com"  }, {    fname:"donald",    lname:"trump",    street:"123 main st",    city:"anytown",    state: "il",    zip: 60563,    phone: "630-123-4567",    email: "1234@yahoo.com"  }]def display(hash)  hash.each { |key, value|    case key.to_s    when "fname"      key = "First Name".to_sym      value.capitalize!    when "lname"      key = "Last Name".to_sym      value.capitalize!    when "city"      key = key.to_s.capitalize!.to_sym   	  value.capitalize!    when "street"""    fname:"steve",    lname:"jobs",    street:"4321 mystreet rd",    city:"naperville",    state: "il",    zip: 60563,    phone: "312-123-4567",    email: "abcd@gmail.com"  }, {    fname:"donald",    lname:"trump",    street:"123 main st",    city:"anytown",    state: "il",    zip: 60563,    phone: "630-123-4567",    email: "1234@yahoo.com"  }]def display(hash)  hash.each { |key, value|    case key.to_s    when "fname"      key = "First Name".to_sym      value.capitalize!    when "lname"      key = "Last Name".to_sym      value.capitalize!    when "city"      key = key.to_s.capitalize!.to_sym   	  value.capitalize!    whe""   fname:"steve",    lname:"jobs",    street:"4321 mystreet rd",    city:"naperville",    state: "il",    zip: 60563,    phone: "312-123-4567",    email: "abcd@gmail.com"  }, {    fname:"donald",    lname:"trump",    street:"123 main st",    city:"anytown",    state: "il",    zip: 60563,    phone: "630-123-4567",    email: "1234@yahoo.com"  }]def display(hash)  hash.each { |key, value|    case key.to_s    when "fname"      key = "First Name".to_sym      value.capitalize!    when "lname"      key = "Last Name".to_sym      value.capitalize!    when "city"      key = key.to_s.capitalize!.to_sym   	  value.capitaliz""  fname:"steve",    lname:"jobs",    street:"4321 mystreet rd",    city:"naperville",    state: "il",    zip: 60563,    phone: "312-123-4567",    email: "abcd@gmail.com"  }, {    fname:"donald",    lname:"trump",    street:"123 main st",    city:"anytown",    state: "il",    zip: 60563,    phone: "630-123-4567",    email: "1234@yahoo.com"  }]def display(hash)  hash.each { |key, value|    case key.to_s    when "fname"      key = "First Name".to_sym      value.capitalize!    when "lname"      key = "Last Name".to_sym      value.capitalize!    when "city"      key = key.to_s.capitalize!.to_sym   	  value."" fname:"steve",    lname:"jobs",    street:"4321 mystreet rd",    city:"naperville",    state: "il",    zip: 60563,    phone: "312-123-4567",    email: "abcd@gmail.com"  }, {    fname:"donald",    lname:"trump",    street:"123 main st",    city:"anytown",    state: "il",    zip: 60563,    phone: "630-123-4567",    email: "1234@yahoo.com"  }]def display(hash)  hash.each { |key, value|    case key.to_s    when "fname"      key = "First Name".to_sym      value.capitalize!    when "lname"      key = "Last Name".to_sym      value.capitalize!    when "city"      key = key.to_s.capitalize!.to_sym   	""fname:"steve",    lname:"jobs",    street:"4321 mystreet rd",    city:"naperville",    state: "il",    zip: 60563,    phone: "312-123-4567",    email: "abcd@gmail.com"  }, {    fname:"donald",    lname:"trump",    street:"123 main st",    city:"anytown",    state: "il",    zip: 60563,    phone: "630-123-4567",    email: "1234@yahoo.com"  }]def display(hash)  hash.each { |key, value|    case key.to_s    when "fname"      key = "First Name".to_sym      value.capitalize!    when "lname"      key = "Last Name".to_sym      value.capitalize!    when "city"      key = key.to_s.capitalize!.to_s""name:"steve",    lname:"jobs",    street:"4321 mystreet rd",    city:"naperville",    state: "il",    zip: 60563,    phone: "312-123-4567",    email: "abcd@gmail.com"  }, {    fname:"donald",    lname:"trump",    street:"123 main st",    city:"anytown",    state: "il",    zip: 60563,    phone: "630-123-4567",    email: "1234@yahoo.com"  }]def display(hash)  hash.each { |key, value|    case key.to_s    when "fname"      key = "First Name".to_sym      value.capitalize!    when "lname"      key = "Last Name".to_sym      value.capitalize!    when "city"      key = key.to_s.capitalize""ame:"steve",    lname:"jobs",    street:"4321 mystreet rd",    city:"naperville",    state: "il",    zip: 60563,    phone: "312-123-4567",    email: "abcd@gmail.com"  }, {    fname:"donald",    lname:"trump",    street:"123 main st",    city:"anytown",    state: "il",    zip: 60563,    phone: "630-123-4567",    email: "1234@yahoo.com"  }]def display(hash)  hash.each { |key, value|    case key.to_s    when "fname"      key = "First Name".to_sym      value.capitalize!    when "lname"      key = "Last Name".to_sym      value.capitalize!    when "city"      key = key.to_s.capit""me:"steve",    lname:"jobs",    street:"4321 mystreet rd",    city:"naperville",    state: "il",    zip: 60563,    phone: "312-123-4567",    email: "abcd@gmail.com"  }, {    fname:"donald",    lname:"trump",    street:"123 main st",    city:"anytown",    state: "il",    zip: 60563,    phone: "630-123-4567",    email: "1234@yahoo.com"  }]def display(hash)  hash.each { |key, value|    case key.to_s    when "fname"      key = "First Name".to_sym      value.capitalize!    when "lname"      key = "Last Name".to_sym      value.capitalize!    when "city"      key = key.to_s.c""e:"steve",    lname:"jobs",    street:"4321 mystreet rd",    city:"naperville",    state: "il",    zip: 60563,    phone: "312-123-4567",    email: "abcd@gmail.com"  }, {    fname:"donald",    lname:"trump",    street:"123 main st",    city:"anytown",    state: "il",    zip: 60563,    phone: "630-123-4567",    email: "1234@yahoo.com"  }]def display(hash)  hash.each { |key, value|    case key.to_s    when "fname"      key = "First Name".to_sym      value.capitalize!    when "lname"      key = "Last Name".to_sym      value.capitalize!    when "city"      key = key.to_"":"steve",    lname:"jobs",    street:"4321 mystreet rd",    city:"naperville",    state: "il",    zip: 60563,    phone: "312-123-4567",    email: "abcd@gmail.com"  }, {    fname:"donald",    lname:"trump",    street:"123 main st",    city:"anytown",    state: "il",    zip: 60563,    phone: "630-123-4567",    email: "1234@yahoo.com"  }]def display(hash)  hash.each { |key, value|    case key.to_s    when "fname"      key = "First Name".to_sym      value.capitalize!    when "lname"      key = "Last Name".to_sym      value.capitalize!    when "city"      key = key.t"""steve",    lname:"jobs",    street:"4321 mystreet rd",    city:"naperville",    state: "il",    zip: 60563,    phone: "312-123-4567",    email: "abcd@gmail.com"  }, {    fname:"donald",    lname:"trump",    street:"123 main st",    city:"anytown",    state: "il",    zip: 60563,    phone: "630-123-4567",    email: "1234@yahoo.com"  }]def display(hash)  hash.each { |key, value|    case key.to_s    when "fname"      key = "First Name".to_sym      value.capitalize!    when "lname"      key = "Last Name".to_sym      value.capitalize!    when "city"      key = key.""steve",    lname:"jobs",    street:"4321 mystreet rd",    city:"naperville",    state: "il",    zip: 60563,    phone: "312-123-4567",    email: "abcd@gmail.com"  }, {    fname:"donald",    lname:"trump",    street:"123 main st",    city:"anytown",    state: "il",    zip: 60563,    phone: "630-123-4567",    email: "1234@yahoo.com"  }]def display(hash)  hash.each { |key, value|    case key.to_s    when "fname"      key = "First Name".to_sym      value.capitalize!    when "lname"      key = "Last Name".to_sym      value.capitalize!    when "city"      key = key.""teve",    lname:"jobs",    street:"4321 mystreet rd",    city:"naperville",    state: "il",    zip: 60563,    phone: "312-123-4567",    email: "abcd@gmail.com"  }, {    fname:"donald",    lname:"trump",    street:"123 main st",    city:"anytown",    state: "il",    zip: 60563,    phone: "630-123-4567",    email: "1234@yahoo.com"  }]def display(hash)  hash.each { |key, value|    case key.to_s    when "fname"      key = "First Name".to_sym      value.capitalize!    when "lname"      key = "Last Name".to_sym      value.capitalize!    when "city"      key =""eve",    lname:"jobs",    street:"4321 mystreet rd",    city:"naperville",    state: "il",    zip: 60563,    phone: "312-123-4567",    email: "abcd@gmail.com"  }, {    fname:"donald",    lname:"trump",    street:"123 main st",    city:"anytown",    state: "il",    zip: 60563,    phone: "630-123-4567",    email: "1234@yahoo.com"  }]def display(hash)  hash.each { |key, value|    case key.to_s    when "fname"      key = "First Name".to_sym      value.capitalize!    when "lname"      key = "Last Name".to_sym      value.capitalize!    when "city"      k""ve",    lname:"jobs",    street:"4321 mystreet rd",    city:"naperville",    state: "il",    zip: 60563,    phone: "312-123-4567",    email: "abcd@gmail.com"  }, {    fname:"donald",    lname:"trump",    street:"123 main st",    city:"anytown",    state: "il",    zip: 60563,    phone: "630-123-4567",    email: "1234@yahoo.com"  }]def display(hash)  hash.each { |key, value|    case key.to_s    when "fname"      key = "First Name".to_sym      value.capitalize!    when "lname"      key = "Last Name".to_sym      value.capitalize!    when "city"    ""e",    lname:"jobs",    street:"4321 mystreet rd",    city:"naperville",    state: "il",    zip: 60563,    phone: "312-123-4567",    email: "abcd@gmail.com"  }, {    fname:"donald",    lname:"trump",    street:"123 main st",    city:"anytown",    state: "il",    zip: 60563,    phone: "630-123-4567",    email: "1234@yahoo.com"  }]def display(hash)  hash.each { |key, value|    case key.to_s    when "fname"      key = "First Name".to_sym      value.capitalize!    when "lname"      key = "Last Name".to_sym      value.capitalize!    when "city"  """,    lname:"jobs",    street:"4321 mystreet rd",    city:"naperville",    state: "il",    zip: 60563,    phone: "312-123-4567",    email: "abcd@gmail.com"  }, {    fname:"donald",    lname:"trump",    street:"123 main st",    city:"anytown",    state: "il",    zip: 60563,    phone: "630-123-4567",    email: "1234@yahoo.com"  }]def display(hash)  hash.each { |key, value|    case key.to_s    when "fname"      key = "First Name".to_sym      value.capitalize!    when "lname"      key = "Last Name".to_sym      value.capitalize!    when "city" "",    lname:"jobs",    street:"4321 mystreet rd",    city:"naperville",    state: "il",    zip: 60563,    phone: "312-123-4567",    email: "abcd@gmail.com"  }, {    fname:"donald",    lname:"trump",    street:"123 main st",    city:"anytown",    state: "il",    zip: 60563,    phone: "630-123-4567",    email: "1234@yahoo.com"  }]def display(hash)  hash.each { |key, value|    case key.to_s    when "fname"      key = "First Name".to_sym      value.capitalize!    when "lname"      key = "Last Name".to_sym      value.capitalize!    when "city" ""    lname:"jobs",    street:"4321 mystreet rd",    city:"naperville",    state: "il",    zip: 60563,    phone: "312-123-4567",    email: "abcd@gmail.com"  }, {    fname:"donald",    lname:"trump",    street:"123 main st",    city:"anytown",    state: "il",    zip: 60563,    phone: "630-123-4567",    email: "1234@yahoo.com"  }]def display(hash)  hash.each { |key, value|    case key.to_s    when "fname"      key = "First Name".to_sym      value.capitalize!    when "lname"      key = "Last Name".to_sym      value.capitalize!    w""    lname:"jobs",    street:"4321 mystreet rd",    city:"naperville",    state: "il",    zip: 60563,    phone: "312-123-4567",    email: "abcd@gmail.com"  }, {    fname:"donald",    lname:"trump",    street:"123 main st",    city:"anytown",    state: "il",    zip: 60563,    phone: "630-123-4567",    email: "1234@yahoo.com"  }]def display(hash)  hash.each { |key, value|    case key.to_s    when "fname"      key = "First Name".to_sym      value.capitalize!    when "lname"      key = "Last Name".to_sym      value.capita""   lname:"jobs",    street:"4321 mystreet rd",    city:"naperville",    state: "il",    zip: 60563,    phone: "312-123-4567",    email: "abcd@gmail.com"  }, {    fname:"donald",    lname:"trump",    street:"123 main st",    city:"anytown",    state: "il",    zip: 60563,    phone: "630-123-4567",    email: "1234@yahoo.com"  }]def display(hash)  hash.each { |key, value|    case key.to_s    when "fname"      key = "First Name".to_sym      value.capitalize!    when "lname"      key = "Last Name".to_sym      va""  lname:"jobs",    street:"4321 mystreet rd",    city:"naperville",    state: "il",    zip: 60563,    phone: "312-123-4567",    email: "abcd@gmail.com"  }, {    fname:"donald",    lname:"trump",    street:"123 main st",    city:"anytown",    state: "il",    zip: 60563,    phone: "630-123-4567",    email: "1234@yahoo.com"  }]def display(hash)  hash.each { |key, value|    case key.to_s    when "fname"      key = "First Name".to_sym      value.capitalize!    when "lname"      key = "Last Name".to_sym"" lname:"jobs",    street:"4321 mystreet rd",    city:"naperville",    state: "il",    zip: 60563,    phone: "312-123-4567",    email: "abcd@gmail.com"  }, {    fname:"donald",    lname:"trump",    street:"123 main st",    city:"anytown",    state: "il",    zip: 60563,    phone: "630-123-4567",    email: "1234@yahoo.com"  }]def display(hash)  hash.each { |key, value|    case key.to_s    when "fname"      key = "First Name".to_sym      value.capitalize!    when "lname"      key = "Last Name""lname:"jobs",    street:"4321 mystreet rd",    city:"naperville",    state: "il",    zip: 60563,    phone: "312-123-4567",    email: "abcd@gmail.com"  }, {    fname:"donald",    lname:"trump",    street:"123 main st",    city:"anytown",    state: "il",    zip: 60563,    phone: "630-123-4567",    email: "1234@yahoo.com"  }]def display(hash)  hash.each { |key, value|    case key.to_s    when "fname"      key = "First Name".to_sym      value.capitalize!    when "lname"      key = "La""name:"jobs",    street:"4321 mystreet rd",    city:"naperville",    state: "il",    zip: 60563,    phone: "312-123-4567",    email: "abcd@gmail.com"  }, {    fname:"donald",    lname:"trump",    street:"123 main st",    city:"anytown",    state: "il",    zip: 60563,    phone: "630-123-4567",    email: "1234@yahoo.com"  }]def display(hash)  hash.each { |key, value|    case key.to_s    when "fname"      key = "First Name".to_sym      value.capitalize!    when "lname"      key""ame:"jobs",    street:"4321 mystreet rd",    city:"naperville",    state: "il",    zip: 60563,    phone: "312-123-4567",    email: "abcd@gmail.com"  }, {    fname:"donald",    lname:"trump",    street:"123 main st",    city:"anytown",    state: "il",    zip: 60563,    phone: "630-123-4567",    email: "1234@yahoo.com"  }]def display(hash)  hash.each { |key, value|    case key.to_s    when "fname"      key = "First Name".to_sym      value.capitalize!    when "lname"    ""me:"jobs",    street:"4321 mystreet rd",    city:"naperville",    state: "il",    zip: 60563,    phone: "312-123-4567",    email: "abcd@gmail.com"  }, {    fname:"donald",    lname:"trump",    street:"123 main st",    city:"anytown",    state: "il",    zip: 60563,    phone: "630-123-4567",    email: "1234@yahoo.com"  }]def display(hash)  hash.each { |key, value|    case key.to_s    when "fname"      key = "First Name".to_sym      value.capitalize!    when "lname"""e:"jobs",    street:"4321 mystreet rd",    city:"naperville",    state: "il",    zip: 60563,    phone: "312-123-4567",    email: "abcd@gmail.com"  }, {    fname:"donald",    lname:"trump",    street:"123 main st",    city:"anytown",    state: "il",    zip: 60563,    phone: "630-123-4567",    email: "1234@yahoo.com"  }]def display(hash)  hash.each { |key, value|    case key.to_s    when "fname"      key = "First Name".to_sym      value.capitalize!    when "lnam"":"jobs",    street:"4321 mystreet rd",    city:"naperville",    state: "il",    zip: 60563,    phone: "312-123-4567",    email: "abcd@gmail.com"  }, {    fname:"donald",    lname:"trump",    street:"123 main st",    city:"anytown",    state: "il",    zip: 60563,    phone: "630-123-4567",    email: "1234@yahoo.com"  }]def display(hash)  hash.each { |key, value|    case key.to_s    when "fname"      key = "First Name".to_sym      value.capitalize!    when "ln"""jobs",    street:"4321 mystreet rd",    city:"naperville",    state: "il",    zip: 60563,    phone: "312-123-4567",    email: "abcd@gmail.com"  }, {    fname:"donald",    lname:"trump",    street:"123 main st",    city:"anytown",    state: "il",    zip: 60563,    phone: "630-123-4567",    email: "1234@yahoo.com"  }]def display(hash)  hash.each { |key, value|    case key.to_s    when "fname"      key = "First Name".to_sym      value.capitalize!    when "l""jobs",    street:"4321 mystreet rd",    city:"naperville",    state: "il",    zip: 60563,    phone: "312-123-4567",    email: "abcd@gmail.com"  }, {    fname:"donald",    lname:"trump",    street:"123 main st",    city:"anytown",    state: "il",    zip: 60563,    phone: "630-123-4567",    email: "1234@yahoo.com"  }]def display(hash)  hash.each { |key, value|    case key.to_s    when "fname"      key = "First Name".to_sym      value.capitalize!    when "l""obs",    street:"4321 mystreet rd",    city:"naperville",    state: "il",    zip: 60563,    phone: "312-123-4567",    email: "abcd@gmail.com"  }, {    fname:"donald",    lname:"trump",    street:"123 main st",    city:"anytown",    state: "il",    zip: 60563,    phone: "630-123-4567",    email: "1234@yahoo.com"  }]def display(hash)  hash.each { |key, value|    case key.to_s    when "fname"      key = "First Name".to_sym      value.capitalize!    whe""bs",    street:"4321 mystreet rd",    city:"naperville",    state: "il",    zip: 60563,    phone: "312-123-4567",    email: "abcd@gmail.com"  }, {    fname:"donald",    lname:"trump",    street:"123 main st",    city:"anytown",    state: "il",    zip: 60563,    phone: "630-123-4567",    email: "1234@yahoo.com"  }]def display(hash)  hash.each { |key, value|    case key.to_s    when "fname"      key = "First Name".to_sym      value.capitalize!    ""s",    street:"4321 mystreet rd",    city:"naperville",    state: "il",    zip: 60563,    phone: "312-123-4567",    email: "abcd@gmail.com"  }, {    fname:"donald",    lname:"trump",    street:"123 main st",    city:"anytown",    state: "il",    zip: 60563,    phone: "630-123-4567",    email: "1234@yahoo.com"  }]def display(hash)  hash.each { |key, value|    case key.to_s    when "fname"      key = "First Name".to_sym      value.capitalize!  """,    street:"4321 mystreet rd",    city:"naperville",    state: "il",    zip: 60563,    phone: "312-123-4567",    email: "abcd@gmail.com"  }, {    fname:"donald",    lname:"trump",    street:"123 main st",    city:"anytown",    state: "il",    zip: 60563,    phone: "630-123-4567",    email: "1234@yahoo.com"  }]def display(hash)  hash.each { |key, value|    case key.to_s    when "fname"      key = "First Name".to_sym      value.capitalize! "",    street:"4321 mystreet rd",    city:"naperville",    state: "il",    zip: 60563,    phone: "312-123-4567",    email: "abcd@gmail.com"  }, {    fname:"donald",    lname:"trump",    street:"123 main st",    city:"anytown",    state: "il",    zip: 60563,    phone: "630-123-4567",    email: "1234@yahoo.com"  }]def display(hash)  hash.each { |key, value|    case key.to_s    when "fname"      key = "First Name".to_sym      value.capitalize! ""    street:"4321 mystreet rd",    city:"naperville",    state: "il",    zip: 60563,    phone: "312-123-4567",    email: "abcd@gmail.com"  }, {    fname:"donald",    lname:"trump",    street:"123 main st",    city:"anytown",    state: "il",    zip: 60563,    phone: "630-123-4567",    email: "1234@yahoo.com"  }]def display(hash)  hash.each { |key, value|    case key.to_s    when "fname"      key = "First Name".to_sym      value.""    street:"4321 mystreet rd",    city:"naperville",    state: "il",    zip: 60563,    phone: "312-123-4567",    email: "abcd@gmail.com"  }, {    fname:"donald",    lname:"trump",    street:"123 main st",    city:"anytown",    state: "il",    zip: 60563,    phone: "630-123-4567",    email: "1234@yahoo.com"  }]def display(hash)  hash.each { |key, value|    case key.to_s    when "fname"      key = "First Name".to_sym""   street:"4321 mystreet rd",    city:"naperville",    state: "il",    zip: 60563,    phone: "312-123-4567",    email: "abcd@gmail.com"  }, {    fname:"donald",    lname:"trump",    street:"123 main st",    city:"anytown",    state: "il",    zip: 60563,    phone: "630-123-4567",    email: "1234@yahoo.com"  }]def display(hash)  hash.each { |key, value|    case key.to_s    when "fname"      key = "First Na""  street:"4321 mystreet rd",    city:"naperville",    state: "il",    zip: 60563,    phone: "312-123-4567",    email: "abcd@gmail.com"  }, {    fname:"donald",    lname:"trump",    street:"123 main st",    city:"anytown",    state: "il",    zip: 60563,    phone: "630-123-4567",    email: "1234@yahoo.com"  }]def display(hash)  hash.each { |key, value|    case key.to_s    when "fname"      key ="" street:"4321 mystreet rd",    city:"naperville",    state: "il",    zip: 60563,    phone: "312-123-4567",    email: "abcd@gmail.com"  }, {    fname:"donald",    lname:"trump",    street:"123 main st",    city:"anytown",    state: "il",    zip: 60563,    phone: "630-123-4567",    email: "1234@yahoo.com"  }]def display(hash)  hash.each { |key, value|    case key.to_s    when "fname"  ""street:"4321 mystreet rd",    city:"naperville",    state: "il",    zip: 60563,    phone: "312-123-4567",    email: "abcd@gmail.com"  }, {    fname:"donald",    lname:"trump",    street:"123 main st",    city:"anytown",    state: "il",    zip: 60563,    phone: "630-123-4567",    email: "1234@yahoo.com"  }]def display(hash)  hash.each { |key, value|    case key.to_s    when "f""treet:"4321 mystreet rd",    city:"naperville",    state: "il",    zip: 60563,    phone: "312-123-4567",    email: "abcd@gmail.com"  }, {    fname:"donald",    lname:"trump",    street:"123 main st",    city:"anytown",    state: "il",    zip: 60563,    phone: "630-123-4567",    email: "1234@yahoo.com"  }]def display(hash)  hash.each { |key, value|    case key.to_s    ""reet:"4321 mystreet rd",    city:"naperville",    state: "il",    zip: 60563,    phone: "312-123-4567",    email: "abcd@gmail.com"  }, {    fname:"donald",    lname:"trump",    street:"123 main st",    city:"anytown",    state: "il",    zip: 60563,    phone: "630-123-4567",    email: "1234@yahoo.com"  }]def display(hash)  hash.each { |key, value|    case key.to_""eet:"4321 mystreet rd",    city:"naperville",    state: "il",    zip: 60563,    phone: "312-123-4567",    email: "abcd@gmail.com"  }, {    fname:"donald",    lname:"trump",    street:"123 main st",    city:"anytown",    state: "il",    zip: 60563,    phone: "630-123-4567",    email: "1234@yahoo.com"  }]def display(hash)  hash.each { |key, value|    case ke""et:"4321 mystreet rd",    city:"naperville",    state: "il",    zip: 60563,    phone: "312-123-4567",    email: "abcd@gmail.com"  }, {    fname:"donald",    lname:"trump",    street:"123 main st",    city:"anytown",    state: "il",    zip: 60563,    phone: "630-123-4567",    email: "1234@yahoo.com"  }]def display(hash)  hash.each { |key, value|    cas""t:"4321 mystreet rd",    city:"naperville",    state: "il",    zip: 60563,    phone: "312-123-4567",    email: "abcd@gmail.com"  }, {    fname:"donald",    lname:"trump",    street:"123 main st",    city:"anytown",    state: "il",    zip: 60563,    phone: "630-123-4567",    email: "1234@yahoo.com"  }]def display(hash)  hash.each { |key, value|    "":"4321 mystreet rd",    city:"naperville",    state: "il",    zip: 60563,    phone: "312-123-4567",    email: "abcd@gmail.com"  }, {    fname:"donald",    lname:"trump",    street:"123 main st",    city:"anytown",    state: "il",    zip: 60563,    phone: "630-123-4567",    email: "1234@yahoo.com"  }]def display(hash)  hash.each { |key, value|  """4321 mystreet rd",    city:"naperville",    state: "il",    zip: 60563,    phone: "312-123-4567",    email: "abcd@gmail.com"  }, {    fname:"donald",    lname:"trump",    street:"123 main st",    city:"anytown",    state: "il",    zip: 60563,    phone: "630-123-4567",    email: "1234@yahoo.com"  }]def display(hash)  hash.each { |key, value| ""4321 mystreet rd",    city:"naperville",    state: "il",    zip: 60563,    phone: "312-123-4567",    email: "abcd@gmail.com"  }, {    fname:"donald",    lname:"trump",    street:"123 main st",    city:"anytown",    state: "il",    zip: 60563,    phone: "630-123-4567",    email: "1234@yahoo.com"  }]def display(hash)  hash.each { |key, value| ""321 mystreet rd",    city:"naperville",    state: "il",    zip: 60563,    phone: "312-123-4567",    email: "abcd@gmail.com"  }, {    fname:"donald",    lname:"trump",    street:"123 main st",    city:"anytown",    state: "il",    zip: 60563,    phone: "630-123-4567",    email: "1234@yahoo.com"  }]def display(hash)  hash.each ""21 mystreet rd",    city:"naperville",    state: "il",    zip: 60563,    phone: "312-123-4567",    email: "abcd@gmail.com"  }, {    fname:"donald",    lname:"trump",    street:"123 main st",    city:"anytown",    state: "il",    zip: 60563,    phone: "630-123-4567",    email: "1234@yahoo.com"  }]def display(has""1 mystreet rd",    city:"naperville",    state: "il",    zip: 60563,    phone: "312-123-4567",    email: "abcd@gmail.com"  }, {    fname:"donald",    lname:"trump",    street:"123 main st",    city:"anytown",    state: "il",    zip: 60563,    phone: "630-123-4567",    email: "1234@yahoo.com"  }]d"" mystreet rd",    city:"naperville",    state: "il",    zip: 60563,    phone: "312-123-4567",    email: "abcd@gmail.com"  }, {    fname:"donald",    lname:"trump",    street:"123 main st",    city:"anytown",    state: "il",    zip: 60563,    phone: "630-123-4567",    email: "1234@yahoo.""mystreet rd",    city:"naperville",    state: "il",    zip: 60563,    phone: "312-123-4567",    email: "abcd@gmail.com"  }, {    fname:"donald",    lname:"trump",    street:"123 main st",    city:"anytown",    state: "il",    zip: 60563,    phone: "630-123-4567",    email: ""ystreet rd",    city:"naperville",    state: "il",    zip: 60563,    phone: "312-123-4567",    email: "abcd@gmail.com"  }, {    fname:"donald",    lname:"trump",    street:"123 main st",    city:"anytown",    state: "il",    zip: 60563,    phone: "630-123-4567",""street rd",    city:"naperville",    state: "il",    zip: 60563,    phone: "312-123-4567",    email: "abcd@gmail.com"  }, {    fname:"donald",    lname:"trump",    street:"123 main st",    city:"anytown",    state: "il",    zip: 60563,    phone: "630-1""treet rd",    city:"naperville",    state: "il",    zip: 60563,    phone: "312-123-4567",    email: "abcd@gmail.com"  }, {    fname:"donald",    lname:"trump",    street:"123 main st",    city:"anytown",    state: "il",    zip: 60563,    phon""reet rd",    city:"naperville",    state: "il",    zip: 60563,    phone: "312-123-4567",    email: "abcd@gmail.com"  }, {    fname:"donald",    lname:"trump",    street:"123 main st",    city:"anytown",    state: "il",    zip: 60563,""eet rd",    city:"naperville",    state: "il",    zip: 60563,    phone: "312-123-4567",    email: "abcd@gmail.com"  }, {    fname:"donald",    lname:"trump",    street:"123 main st",    city:"anytown",    state: "il",    zip: ""et rd",    city:"naperville",    state: "il",    zip: 60563,    phone: "312-123-4567",    email: "abcd@gmail.com"  }, {    fname:"donald",    lname:"trump",    street:"123 main st",    city:"anytown",    state: "il",   ""t rd",    city:"naperville",    state: "il",    zip: 60563,    phone: "312-123-4567",    email: "abcd@gmail.com"  }, {    fname:"donald",    lname:"trump",    street:"123 main st",    city:"anytown",    state: "il""" rd",    city:"naperville",    state: "il",    zip: 60563,    phone: "312-123-4567",    email: "abcd@gmail.com"  }, {    fname:"donald",    lname:"trump",    street:"123 main st",    city:"anytown",    state: ""rd",    city:"naperville",    state: "il",    zip: 60563,    phone: "312-123-4567",    email: "abcd@gmail.com"  }, {    fname:"donald",    lname:"trump",    street:"123 main st",    city:"anytown",    stat""d",    city:"naperville",    state: "il",    zip: 60563,    phone: "312-123-4567",    email: "abcd@gmail.com"  }, {    fname:"donald",    lname:"trump",    street:"123 main st",    city:"anytown",    st""",    city:"naperville",    state: "il",    zip: 60563,    phone: "312-123-4567",    email: "abcd@gmail.com"  }, {    fname:"donald",    lname:"trump",    street:"123 main st",    city:"anytown",    s"",    city:"naperville",    state: "il",    zip: 60563,    phone: "312-123-4567",    email: "abcd@gmail.com"  }, {    fname:"donald",    lname:"trump",    street:"123 main st",    city:"anytown",    s""    city:"naperville",    state: "il",    zip: 60563,    phone: "312-123-4567",    email: "abcd@gmail.com"  }, {    fname:"donald",    lname:"trump",    street:"123 main st",    city:"anyt""    city:"naperville",    state: "il",    zip: 60563,    phone: "312-123-4567",    email: "abcd@gmail.com"  }, {    fname:"donald",    lname:"trump",    street:"123 main st",    ""   city:"naperville",    state: "il",    zip: 60563,    phone: "312-123-4567",    email: "abcd@gmail.com"  }, {    fname:"donald",    lname:"trump",    street:"123 main ""  city:"naperville",    state: "il",    zip: 60563,    phone: "312-123-4567",    email: "abcd@gmail.com"  }, {    fname:"donald",    lname:"trump",    street:"1"" city:"naperville",    state: "il",    zip: 60563,    phone: "312-123-4567",    email: "abcd@gmail.com"  }, {    fname:"donald",    lname:"trump",    st""city:"naperville",    state: "il",    zip: 60563,    phone: "312-123-4567",    email: "abcd@gmail.com"  }, {    fname:"donald",    lname:"trump",""ity:"naperville",    state: "il",    zip: 60563,    phone: "312-123-4567",    email: "abcd@gmail.com"  }, {    fname:"donald",    lname:"tru""ty:"naperville",    state: "il",    zip: 60563,    phone: "312-123-4567",    email: "abcd@gmail.com"  }, {    fname:"donald",    lname:""y:"naperville",    state: "il",    zip: 60563,    phone: "312-123-4567",    email: "abcd@gmail.com"  }, {    fname:"donald",    lna"":"naperville",    state: "il",    zip: 60563,    phone: "312-123-4567",    email: "abcd@gmail.com"  }, {    fname:"donald",    l"""naperville",    state: "il",    zip: 60563,    phone: "312-123-4567",    email: "abcd@gmail.com"  }, {    fname:"donald",    ""naperville",    state: "il",    zip: 60563,    phone: "312-123-4567",    email: "abcd@gmail.com"  }, {    fname:"donald",    ""aperville",    state: "il",    zip: 60563,    phone: "312-123-4567",    email: "abcd@gmail.com"  }, {    fname:"don""perville",    state: "il",    zip: 60563,    phone: "312-123-4567",    email: "abcd@gmail.com"  }, {    f""erville",    state: "il",    zip: 60563,    phone: "312-123-4567",    email: "abcd@gmail.com"  },""rville",    state: "il",    zip: 60563,    phone: "312-123-4567",    email: "abcd@gmail.com""ville",    state: "il",    zip: 60563,    phone: "312-123-4567",    email: "abcd@gma""ille",    state: "il",    zip: 60563,    phone: "312-123-4567",    email: "abc""lle",    state: "il",    zip: 60563,    phone: "312-123-4567",    email: ""le",    state: "il",    zip: 60563,    phone: "312-123-4567",    emai""e",    state: "il",    zip: 60563,    phone: "312-123-4567",    em""",    state: "il",    zip: 60563,    phone: "312-123-4567",    e"",    state: "il",    zip: 60563,    phone: "312-123-4567",    e""    state: "il",    zip: 60563,    phone: "312-123""    state: "il",    zip: 60563,    pho""   state: "il",    zip: 605""  state: "il",  "" state:"Hash Project 3b - Advanced Contacts:  Exact Search,"puts "Please enter last name of who you're trying to search:"search = gets.chompcontacts.each { |hash|  if search == hash["lname".to_sym]    display(hash)  end}""uts "Please enter last name of who you're trying to search:"search = gets.chompcontacts.each { |hash|  if search == hash["lname".to_sym]    display(hash)  ""ts "Please enter last name of who you're trying to search:"search = gets.chompcontacts.each { |hash|  if search == hash["lname".to_sym]    display(hash""s "Please enter last name of who you're trying to search:"search = gets.chompcontacts.each { |hash|  if search == hash["lname".to_sym]    display(h"" "Please enter last name of who you're trying to search:"search = gets.chompcontacts.each { |hash|  if search == hash["lname".to_sym]    display"""Please enter last name of who you're trying to search:"search = gets.chompcontacts.each { |hash|  if search == hash["lname".to_sym]    displa""Please enter last name of who you're trying to search:"search = gets.chompcontacts.each { |hash|  if search == hash["lname".to_sym]    displa""lease enter last name of who you're trying to search:"search = gets.chompcontacts.each {""ease enter last name of who you're tr",Procs,Proc Examples,"p = Proc.new { |x| puts x*2 }[1,2,3].each(&p)              # The '&' tells ruby to turn the proc into a block proc = Proc.new { puts "Hello World" }proc.call                     # The body of the Proc object gets executed when calledp.call  # prints 'Hello World'p.class # returns 'Proc'a = p   # a now equals p, a Proc instancep       # returns a proc object '#<Proc:0x007f96b1a60eb0@(irb):46>'"" = Proc.new { |x| puts x*2 }[1,2,3].each(&p)              # The '&' tells ruby to turn the proc into a block proc = Proc.new { puts "Hello World" }proc.call                     # The body of the Proc object gets executed when calledp.call  # prints 'Hello World""= Proc.new { |x| puts x*2 }[1,2,3].each(&p)              # The '&' tells ruby to turn the proc into a block proc = Proc.new { pu"Pass multiple procs to methods.,"def multiple_procs(proc1, proc2)  proc1.call  proc2.callenda = Proc.new { puts "First proc" }b = Proc.new { puts "Second proc" }multiple_procs(a,b)""ef multiple_procs(proc1, proc2)  proc1.call  proc2.callenda = Pro"Props and Lambdas both Proc objects.,"proc = Proc.new { puts "Hello world" }proc.class # returns ‘Proc'proc   # returns '#<Proc:0x007f96b1032d30@(irb):75>'""roc = Proc.new { puts "Hello world" }proc.class # returns ‘Proc'proc   # returns '#<Proc:0x00""oc = Proc.new { puts "Hello world" }proc.class # returns ‘Proc'proc   ""c = Proc.new { puts "Hello world" }proc.class # r"" = Proc.new { puts "Hello wor""= Proc.ne"Procs don’t care if they are passed the wrong number of arguments.,"proc = Proc.new { |x| puts x } # creates a proc that takes 1 argumentproc.call(2)                   # prints out 2proc.call                      # returns nilproc.call(1,2,3)               # prints out 1 and forgets about the extra arguments"Lambdas and procs treat the ‘return’ keyword differently,"def proc_test  proc = Proc.new { return }  proc.call  puts "Hello world"endproc_test                 # calling proc_test prints nothing""ef proc_test  proc = Proc.new { return }  proc.call  puts "Hello world"end""f proc_test  pr"what is a closure?,"Example of Proc objects preserving local contextdef counter  n = 0  return Proc.new { n+= 1 }enda = countera.call            # returns 1a.call            # returns 2b = counterb.call            # returns 1a.call            # returns 3",,,,,,lambda,Lambda Examples,"lam = lambda { |x| puts x*2 }[1,2,3].each(&lam)lam = lambda { puts "Hello World" }lam.call""am = lambda { |x| puts "Props and Lambdas both Proc objects.,"lam = lambda { puts "Hello World" }lam.class  # returns ‘Proc'lam    # returns '<Proc:0x007f96b1b41938@(irb):76 (lambda)>'""am = lambda { puts "Hello World" }lam.class  # returns ‘Proc'lam    # returns '<Proc:0x007f96b1b41938""m = lambda { puts "Hello World" }lam.class  # returns ‘Proc'lam    # returns '<Pr"" = lambda { puts "Hello World" }lam.class  # returns ‘Proc'lam""= lambda { puts "Hello World" }lam.class  # r"" lambda { puts "Hello World" ""lambda { puts"Lambdas check the number of arguments,"lam = lambda { |x| puts x }    # creates a lambda that takes 1 argumentlam.call(2)                    # prints out 2lam.call                       # ArgumentError: wrong number of arguments (0 for 1)lam.call(1,2,3)                # ArgumentError: wrong number of arguments (3 for 1)"Lambdas and procs treat the ‘return’ keyword differently,"def lambda_test  lam = lambda { return }  lam.call  puts "Hello world"endlambda_test                 # calling lambda_test prints 'Hello World'""ef lambda_test  lam = lambda { return }  lam.call  puts "Hello world"endlambda_tes""f lambda_test  lam = lambda",,,,,1,Inbox_booth.j.adam@gmail.com2,inbox_onetravelbee@yahoo.com3,inbox_adamsageresume@gmail.com4,inbox_twotravelbees@gmail.com5,inbox_ab2011gh@gmail.com6,inbox_adam100booth@gmail.com7,inbox_booth.adam@icloud.com8,Inbox_,Inbox_,,,,,,,Symbols,,Bloc RoR,,,,,,,,3. RSpec,describe / it,"describe "greet" do it "says hello to someone" do        greeting = greet("Annie", "Oakley")expect(greeting).to eq("Hello Annie Oakley.") end end""escribe "greet" do it "says hello to someone" do        greeting = greet("Annie", "Oakley")expect(greeting).to eq("Hello Annie Oakley.")""scribe "greet" do it "says hello to someone" do        greeting = greet("Annie", "Oakley")expect(greeting).to eq("Hello Annie O""cribe "greet" do it "says hello to someone" do        greeting = greet("Annie", "Oakley")expect(greeting).to eq("Hello ""ribe "greet" do it "says hello to someone" do        greeting = greet("Annie", "Oakley")expect(greeting).to eq("""ibe "greet" do it "says hello to someone" do        greeting = greet("Annie", "Oakley")expect(greeting).to""be "greet" do it "says hello to someone" do        greeting = greet("Annie", "Oakley")expect(greeting""e "greet" do it "says hello to someone" do        greeting = greet("Annie", "Oakley")expect(greet"" "greet" do it "says hello to someone" do        greeting = greet("Annie", "Oakley")expect(gre"""greet" do it "says hello to someone" do        greeting = greet("Annie", "Oakley")expect(gr""greet" do it "says hello to someone" do        greeting = greet("Annie", "Oakley")expect(gr""reet" do it "says hello to someone" do        greeting = greet("Annie", "Oakley")expe""eet" do it "says hello to someone" do        greeting = greet("Annie", "Oakley")""et" do it "says hello to someone" do        greeting = greet("Annie", "Oakley""t" do it "says hello to someone" do        greeting = greet("Annie", "Oakl""" do it "says hello to someone" do        greeting = greet("Annie", "Oak"" do it "says hello to someone" do        greeting = greet("Annie", "Oak""do it "says hello to someone" do        greeting = greet("Annie""o it "says hello to someone" do        greeting = greet("" it "says hello to someone" do        greeting = g""it "says hello to someone" do        greeting""t "says hello to someone" do        greet"" "says hello to someone" do        gre"""says hello to someone" do        gr""says hello to someone" do        gr""ays hello to s"Test-Driven Development,"describe "multiply" do it "multiplies its two arguments" do        product = multiply(5, 3)expect(product).to eq(15) end end""escribe "multiply" do it "multiplies its two arguments" do        product = multiply(5, 3)expect(product).to eq(15)""scribe "multiply" do it "multiplies its two arguments" do        product = multiply(5, 3)expect(product).t""cribe "multiply" do it "multiplies its two arguments" do        product = multiply(5, 3)expect(pro""ribe "multiply" do it "multiplies its two arguments" do        product = multiply(5, 3)expe""ibe "multiply" do it "multiplies its two arguments" do        product = multiply(5, 3)""be "multiply" do it "multiplies its two arguments" do        product = multiply(5""e "multiply" do it "multiplies its two arguments" do        product = multipl"" "multiply" do it "multiplies its two arguments" do        product = multi"""multiply" do it "multiplies its two arguments" do        product = mult""multiply" do it "multiplies its two arguments" do        product = mult""ultiply" do it "multiplies its two arguments" do        produc""ltiply" do it "multiplies its two arguments" do       ""tiply" do it "multiplies its two arguments" do ""iply" do it "multiplies its two arguments"""ply" do it "multiplies its two argume""ly" do it "multiplies its two arg""y" do it "multiplies its two a""" do it "multiplies its two "" do it "multiplies its two ""do it "multiplies i""o it "multip"" it "m""i",,4. Debugging,"Debugging Thought Process: This method returns: "06/01/14" , so it returned the next year's date, the first of June 2014, but not the day of the week. Where did we go wrong? Break this method down: 1. We defined a next_birthday method which takes one argument - birthday . 2. Within the method, we assigned the value of birthday.next_year to a variable called a_year_off . 3. We called strftime("%D") on a_year_off . You might be tempted to read about next_year to figure out what's going wrong, but first, let's narrow down the problem.""ebugging Thought Process: This method returns: "06/01/14" , so it returned the next year's date, the first of June 2014, but not the day of the week. Where did we go wrong? Break this method down: 1. We defined a next_birthday method which takes one argument - birthday . 2. Within the method, we assigned the value of birthday.next_year to a variable called a_year_off . 3. We called strftime("%D") on a_year_off . You might be tempted to read about next_year to figure out what's going ""bugging Thought Process: This method returns: "06/01/14" , so it returned the next year's date, the first of June 2014, but not the day of the week. Where did we go wrong? Break this method down: 1. We defined a next_birthday method which takes one argument - birthday . 2. Within the method, we assigned the value of birthday.next_year to a variable called a_year_off . 3. We called strftime("%D") on a_year_off . You might be tempted to r""ugging Thought Process: This method returns: "06/01/14" , so it returned the next year's date, the first of June 2014, but not the day of the week. Where did we go wrong? Break this method down: 1. We defined a next_birthday method which takes one argument - birthday . 2. Within the method, we assigned the value of birthday.next_year to a variable called a_year_off . 3. We called strftime("%""gging Thought Process: This method returns: "06/01/14" , so it returned the next year's date, the first of June 2014, but not the day of the week. Where did we go wrong? Break this method down: 1. We defined a next_birthday method which takes one argument - birthday . 2. Within the method, we assigned the value of birthday.next_year to a variable ""ging Thought Process: This method returns: "06/01/14" , so it returned the next year's date, the first of June 2014, but not the day of the week. Where did we go wrong? Break this method down: 1. We defined a next_birthday method which takes one argument - birthday . 2. Within the method, we assigned th""ing Thought Process: This method returns: "06/01/14" , so it returned the next year's date, the first of June 2014, but not the day of the week. Where did we go wrong? Break this method down: 1. We defined a next_birthday method which takes one argument - birt""ng Thought Process: This method returns: "06/01/14" , so it returned the next year's date, the first of June 2014, but not the day of the week. Where did we go wrong? Break this method down: 1. We defined a next_birth""g Thought Process: This method returns: "06/01/14" , so it returned the next year's date, the first of June 2014, but not the day of the week. Where did we go wrong? Break this"" Thought Process: This method returns: "06/01/14" , so it returned the next year's date, the first of June 2014, but not the day of the""Thought Process: This method returns: "06/01/14" , so it returned the next year's date, the fir""hought Process: This method returns: "06/01/14" , so it ""ought Process: Thi","require 'date' # Makes Ruby's date library available to our code def next_birthday(birthday) a_year_off = birthday.next_year a_year_off.strftime("%D") end    next_birthday(Date.new(2013, 6, 1))""equire 'date' # Makes Ruby's date library availab",,,5. Conditionals,if / elsie / else,"def can_buy_apple_with?(money) if money > 1_000        "have an Apple computer"elsif money > 5 "have an apple" elsif money == 5 "have some gum" else        "get out of my store"end end    # call the method, passing in a 2_000can_buy_apple_with?(2_000) #=> "have an Apple computer"    # call the method, passing in a 6can_buy_apple_with?(6) #=> "have an apple"    # call the method, passing in a 5can_buy_apple_with?(5) #=> "have some gum"    # call the method, passing in a 4can_buy_apple_with?(4) #=> "get out of my store"""ef can_buy_apple_with?(money) if money > 1_000        "have an Apple computer"elsif money > 5 "have an apple" elsif money == 5 "have some gum" else        "get out of my store"end end    # call the method, passing in a 2_000can_buy_apple_with?(2_000) #=> "have an Apple computer"    # call the method, passing in a 6can_buy_apple_with?(6) #=> "have an apple"    # call the method, passing in a 5can_buy_apple_with?(5) #=> "have some gum"    # call the method, passing""f can_buy_apple_with?(money) if money > 1_000        "have an Apple computer"elsif money > 5 "have an apple" elsif money == 5 "have some gum" else        "get out of my store"end end    # call the method, passing in a 2_000can_buy_apple_with?(2_000) #=> "have an Apple computer"    # call the method, passing in a 6can_buy_apple_with?(6) #=> "have an apple"    # call the method, passing in a 5can_buy_apple_with"" can_buy_apple_with?(money) if money > 1_000        "have an Apple computer"elsif money > 5 "have an apple" elsif money == 5 "have some gum" else        "get out of my store"end end    # call the method, passing in a 2_000can_buy_apple_with?(2_000) #=> "have an Apple computer"    # call the method, passing in a 6can_buy_apple_with?(6) #=> "have an apple"  ""can_buy_apple_with?(money) if money > 1_000        "have an Apple computer"elsif money > 5 "have an apple" elsif money == 5 "have some gum" else        "get out of my store"end end    # call the method, passing in a 2_000can_buy_apple_with?(2_000) #=> "have an Apple computer"    # call the method, passing""an_buy_apple_with?(money) if money > 1_000        "have an Apple computer"elsif money > 5 "have an apple" elsif money == 5 "have some gum" else        "get out of my store"end end    # call the method, passing in a 2_000can_buy_apple_with?(2_000) #=> "ha""n_buy_apple_with?(money) if money > 1_000        "have an Apple computer"elsif money > 5 "have an apple" elsif money == 5 "have some gum" else        "get out of my store"end end    # call the method, pa""_buy_apple_with?(money) if money > 1_000        "have an Apple computer"elsif money > 5 "have an apple" elsif money == 5 "have some gum" else        "get ""buy_apple_with?(money) if money > 1_000        "have an Apple computer"elsif money > 5 "have an apple" els""uy_apple_with?(money) if money > 1_000        "have an Appl""y_apple_with"unless and !,"def can_buy_apple_with?(money) if !(money < 1_000)        "have an Apple computer"else        "have an apple"end end""ef can_buy_apple_with?(money) if !(money < 1_000)        "h""f"One Line Conditionals,"gets_discount = true price *= 0.8 if gets_discount skip_tax = true price += price * 0.1 unless skip_tax","number = rand(25) - 10 if number < 0 puts "The number is negative." elsif number < 10 if number <= 5 puts "The number is between 0 and 5, inclusive." else puts "The number is between 5 and 10, exclusive." end else puts "The number is greater than or equal to 10." end""umber = rand(25) - 10 if number < 0 puts "The number is negative." elsif number < 10 if number <= 5 puts "The number is between 0 and 5, inclusive." else puts "The number is between 5 and 10, exclusive." end else puts "The ""mber = rand(25) - 10 if number < 0 puts "The number is negative." elsif number < 10 if number <= 5 puts "The number is between 0 and 5, inclusive." else puts "The number is between 5""ber = rand(25) - 10 if number < 0 puts "The number is negative." elsif number < 10 if number <= 5 puts "The number is between 0 and 5, inclusi""er = rand(25) - 10 if number < 0 puts "The number is negative." elsif number < 10 if number <= 5 puts""r = rand(25) - 10 if number < 0 puts "The number is negative.""" = rand(25) - 10 if numb",,6. Arrays,"position (or "index")""osition","fruits = ["apple", "banana", "orange"]   fruits[0]#=> "apple" fruits[2] #=> "orange"""ruits = ["apple", "banana", "orange"]   fruits[0]#=> "apple" fruits[2] #=""uits = ["apple", "banana", "orange"]   fruits[0]#=> "apple" fru""its = ["apple", "banana", "orange"]   fruits[0]#=> "app""ts = ["apple", "banana", "orange"]   fruits[0]#""s = ["apple", "banana", "orange"]   fruit"" = ["apple", "banana", "orange"]   ""= ["apple", "banana", "orange"]"" ["apple", "banana", "orang""["apple", "banana", "ora"""apple", "banana", "or""apple", "banana", "or""pple", "banana"""ple", "ban""le", """e",""""""last element,"fruits = ["apple", "banana", "orange"]   fruits.last#=> "orange"    fruits.first#=> “apple”""ruits = ["apple", "banana", "orange"]   fruits.last#=> "orange"    fruits.first#""uits = ["apple", "banana", "orange"]   fruits.last#=> "orange"    fruit""its = ["apple", "banana", "orange"]   fruits.last#=> "orange" ""ts = ["apple", "banana", "orange"]   fruits.last#=> "or""s = ["apple", "banana", "orange"]   fruits.last#"" = ["apple", "banana", "orange"]   fruits.l""= ["apple", "banana", "orange"]   frui"" ["apple", "banana", "orange"]   f""["apple", "banana", "orange"]  """apple", "banana", "orange"] ""apple", "banana", "orange"] ""pple", "banana", "orang""ple", "banana", "o""le", "banana",""e", "banana""", "banan"", "banan"" "ban"""ba""ba"assign elements to an array one at a time,"fruits = ["apple"]   fruits[1] = "banana"   fruits[2] = "orange"fruits    #=> ["apple", "banana", "orange"]""ruits = ["apple"]   fruits[1] = "banana"   fruits[2] = "orange"fruits    #=> ["apple", "banana",""uits = ["apple"]   fruits[1] = "banana"   fruits[2] = "orange"fruits    #=> ["apple", ""its = ["apple"]   fruits[1] = "banana"   fruits[2] = "orange"fruits    #=> ["""ts = ["apple"]   fruits[1] = "banana"   fruits[2] = "orange"fruits   ""s = ["apple"]   fruits[1] = "banana"   fruits[2] = "orange"frui"" = ["apple"]   fruits[1] = "banana"   fruits[2] = "orange"""= ["apple"]   fruits[1] = "banana"   fruits[2] = "ora"" ["apple"]   fruits[1] = "banana"   fruits[2] = """["apple"]   fruits[1] = "banana"   fruits[2] ="""apple"]   fruits[1] = "banana"   fruits[2] ""apple"]   fruits[1] = "banana"   fruits[2] ""pple"]   fruits[1] = "banana"   fruit""ple"]   fruits[1] = "banana"   f""le"]   fruits[1] = "banana" ""e"]   fruits[1] = "banana""""]   fruits[1] = "banana""]   fruits[1] = "banana""   fr"""shovel" operator ( << ) to add an element to the end of an array.""shovel" operator ( << ) to add an element to the end of an array.""hovel" operator ( << ) to add an element to the end of an ""ovel" operator ( << ) to add an element to the end o""vel" operator ( << ) to add an element to the e""el" operator ( << ) to add an element to th""l" operator ( << ) to add an element to """ operator ( << ) to add an element to"" operator ( << ) to add an element to","numbers = [1]   numbers << 2numbers #=> [1,2]"Arrays can mix object types,"multi_object_collection = []   multi_object_collection[0] = "apple"   multi_object_collection[1] = 17   multi_object_collection << ["hello", 3]   multi_object_collection   #=> ["apple", 17, ["hello", 3]]""ulti_object_collection = []   multi_object_collection[0] = "apple"   multi_object_collection[1] = 17   multi_object_collection << ["hello", 3]""lti_object_collection = []   multi_object_collection[0] = "apple"   multi_object_co""ti_object_collection = []""%w syntaxPercent Strings syntaxPercent Strings like %w are followed with opening and closing symbols (usually {} , but others like [] or !! work). Strings inside are delimited with a space: ","fruits = %w{apple banana orange} #=> ["apple", "banana", "orange"]""ruits = %w{apple banana ora"This syntax creates only strings (not numbers or other types) inside the array: ,"integers = [1, 2, 3] #=> [1, 2, 3] strings = ["1", "2", "3"] #=> ["1", "2", "3"] integers_or_strings = %w{1 2 3} #=> ["1", "2", "3"] ""ntegers = [1, 2, 3] #=> [1, 2, 3] strings = ["1", "2", "3"] #=> ["1", "2", "3"] intege""tegers = [1, 2, 3] #=> [1, 2, 3] strings""When capitalized, %W processes interpolation:","%w{10 20 #{10+20}} #=> ["10", "20", "\#{10+20}"] %W{10 20 #{10+20}} #=> ["10", "20", "30"]""w{10 20 #{10+20}} #=> ["10", "20", "\#{10+20}"] %W{10 20 #{10+20}""{10 20 #{10+20}} #=> ["10", "20", "\#{10+""10 20 #{10+20}} #=""Negative Indexesretrieve elements from right to left.","fruits = ["apple", "banana", "orange"]   fruits[-1]#=> "orange" fruits[-2] #=> "banana" fruits[-3] #=> "apple"""ruits = ["apple", "banana", "orange"]   fruits[-1]#=> "orange" fruits[-2] #=> "banana" fruits[-3] #""uits = ["apple", "banana", "orange"]   fruits[-1]#=> "orange" fruits[-2] #=> "banana" fru""its = ["apple", "banana", "orange"]   fruits[-1]#=> "orange" fruits[-2] #=> "bana""ts = ["apple", "banana", "orange"]   fruits[-1]#=> "orange" fruits[-2] #=""s = ["apple", "banana", "orange"]   fruits[-1]#=> "orange" fruits["" = ["apple", "banana", "orange"]   fruits[-1]#=> "orange" fr""= ["apple", "banana", "orange"]   fruits[-1]#=> "orange""" ["apple", "banana", "orange"]   fruits[-1]#=> "oran""["apple", "banana", "orange"]   fruits[-1]#=> "or"""apple", "banana", "orange"]   fruits[-1]#=> "o""apple", "banana", "orange"]   fruits[-1]#=> "o""pple", "banana", "orange"]   fruits[-1]#""ple", "banana", "orange"]   fruits[-""le", "banana", "orange"]   fruit""e", "banana", "orange"]   fru""", "banana", "orange"]   fr"", "banana", "orange"]   fr"" "banana", "orange"]   """banana", "orange"]  ""banana", "orange"]  ""anana", "orang""nana", """ana"Ranges,"(1..5) ("a".."e")""1..5) ("create an Array from a Range using the to_a,"(1..5).to_a    #=> [1, 2, 3, 4, 5]("a".."e").to_a #=> ["a", "b", "c", "d", "e"]""1..5).to_a    #=> [1, 2, 3, 4, 5]("a".."e""..5).t"index multiple Array elements with a Range :,"fictional_cats = ['Cheshire Cat', 'Garfield', 'Catwoman', 'The Cat in the Hat'] fictional_cats[1..3] #=> ["Garfield", "Catwoman", "The Cat in the Hat"]""ictional_cats = ['Cheshire Cat', 'Garfield',"negative indexes in ranges,"fictional_cats = ['Cheshire Cat', 'Garfield', 'Catwoman', 'The Cat in the Hat']fictional_cats[-2..-1] #=> ["Catwoman", "The Cat in the Hat"]""ictional_cats = ['Cheshire Cat',"7. Intro to Classes Part 1,object-oriented (OO) programming language,"numbers = [1,2,3] numbers.length #=> 3"numbers and names arrays are different objects,"numbers = [1,2,3] numbers.length #=> 3 names = ["Arya", "Sansa"] names.length #=> 2""umbers = [1,2,3] numbers.length #=""Class InstancesThe numbers and names arrays are objects, and they are also instances of the Array class.Define a Person class and then create an instance of it named arya_stark.","class Person end    arya_stark = Person.new"each instance is unique,"class Person end arya_stark = Person.new p arya_stark #=> #<Person:0x104375690> arya_stark = Person.new p arya_stark #=> #<Person:0x104375618>""Instance MethodsWhen we have an instance of the Person class, we can call instance methods on this instance.","class Person def eat "nom nom nom" end end arya_stark = Person.new arya_stark.eat #=> "nom nom nom" sansa_stark = Person.new sansa_stark.eat #=> "nom nom nom"""lass Person def eat "nom nom nom" end end arya_stark = Person.new arya_stark.eat #=> "nom nom nom" sansa_stark = Person.new sansa_stark""ass Person def eat "nom nom nom" end end arya_stark = Person.new arya_stark.eat #=> "nom nom nom" sansa_stark = P""ss Person def eat "nom nom nom" end end arya_stark = Person.new arya_stark.eat #=> "nom nom n""s Person def eat "nom nom nom" end end arya_stark = Person.new arya_stark"" Person def eat "nom nom nom" end end arya_stark = Per""Person def eat "nom nom nom" end end ""erson def eat "nom no""rson d""Attributes and Instance VariableThe name of a person would therefore be an attribute of a Person instance.name=("Michelle") # or without parentheses name= "Michelle" # Ruby even allows us to add a space before = name = "Michelle"""ttributes and Instance VariableThe name of a person would therefore be an attribute of a Person instance.name=("""","class Person def name=(full_name) @full_name = full_name end def name @full_name end end first_lady = Person.new first_lady.name=("Michelle Obama") p "My name is #{first_lady.name}" #=> "My name is Michelle Obama" presidential_candidate = Person.new presidential_candidate.name=("Hillary Clinton") p "My name is #{presidential_candidate.name}" #=> "My name is Hillary Clinton"""lass Person def name=(full_name) @full_name = full_name end def name @full_name end end first_lady = Person.new first_lady.name=("Michelle Obama") p "My name is #{first_lady.name}" #=> "My name is Michelle Obama" presidential_candidate = Per""ass Person def name=(full_name) @full_name = full_name end def name @full_name end end first_lady = Person.n""If we didn't make @full_name an instance variable, it would not be accessible outside of the name= method.","#... def name @full_name end end""Stack Overflow 	1.	define a class with a single method","class ArgumentEchoer def echo_argument(argument)  p "You just inputted a value: " + argument end  end""lass ArgumentEchoer def echo_argument(argument) ""	.	Then call that method: **You will get an ERROR!","instance = ArgumentEchoer.newinstance.echo_argument(5)"8. Intro to Classes Part 2,Getter and setter methods can be used for accessing the attributes of a class???,"Initializers Ruby has a standard method named initialize that is executed when you create a new class instance.","class President def initialize p "Hello, I'm an instance of the President class!" end end    President.new   #=> "Hello, I'm an instance of the President class!"""lass President def initialize p "Hello, I'm an instance of the President class!" end end    President.new   #=> "Hello, I'm an""ass President def initialize p "Hello, I'm an instance of the President class!" end end    Pr""ss President def initialize p "Hello, I'm an instance of the P""s President def initialize p """""Let's add an attr_accessor declaration, so that we can access an attribute when we initialize : Remember, attr_accessor dynamically creates getter and setter methods for the given symbol (e.g. :age). ","# => Rigid Methodclass President  attr_accessor :age # => "age attribute"  def initialize    @age = 55  endend  pres = President.new # => "pres instance"  p pres.age"" => Rigid Methodclass President  attr_accessor :age # => "age attribute"  def initialize    @age = 55  ende""=> Rigid Methodclass President  attr_accessor :age #"allow the age value to be set when a new instance of President is created: ,"# Flexible Methodclass President  attr_accessor :age # age instance variable  def initialize(years) # initialize method takes argument "years."        @age = years  endendpres1 = President.new(49) # .new methodpres2 = President.new(55)p pres1.agep pres2.age"" Flexible Methodclass President  attr_accessor :age # age instance variable  def initialize(years) # initialize method takes ar"Access two attributes,"# Access two attributesclass President  attr_accessor :age, :party  def initialize(years, party)    @age, @party = years, party  endendpres = President.new(49, "Independent")p "The President is #{pres.age} years old and is a member of the #{pres.party} party.""" Access two attributesclass President  attr_accessor :age, :party  def initialize(years, party)""Class MethodThe methods we have written in classes up to this point are instance methods. That is, they are called on a unique instance of a class. There's another type of method that can be written in a class. Class methods pertain to the class itself, rather than a unique instance of the class. Let's modify our President class to demonstrate this. We'll make our class slightly more specific and rename it UnitedStatesPresident : ","The methods we have written in classes up to this point are instance methods. That is, they are called on a unique instance of a class. There's another type of method that can be written in a class. Class methods pertain to the class itself, rather than a unique instance of the class. Let's modify our President class to demonstrate this. We'll make our class slightly more specific and rename it UnitedStatesPresident : *When defining class methods, you must put self. in front of the method so that Ruby recognizes it as a class method. ""To fully grasp the difference between class and instance methods, let's talk through the citizenship example in plain English. Our class, which is named UnitedStatesPresident could possibly share some attributes with other President-based classes. For example, we could also have GermanyPresident and FrancePresident classes as well. Some attributes would be unique to specific instances of these classes, like age , party and name . But the citizenship of a country's President applies to the class itself. All instances of UnitedStatesPresident have citizenship in the United States of America. In other words, you could say that citizenship applies to any and all instances of one these aforementioned classes. For example: ","class UnitedStatesPresident  attr_accessor :age, :party  def initialize(years, party)    @age, @party = years, party  end  def self.citizenship    "United States of America"  endendclass GermanyPresident  attr_accessor :age, :party  def initialize(years, party)    @age, @party = years, party  end  def self.citizenship    "Germany"  endendclass FrancePresident  attr_accessor :age, :party  def initialize(years, party)    @age, @party = years, party  end  def self.citizenship    "France"endendus_pres = UnitedStatesPresident.new(49, "rep")p "The President is #{us_pres.age} years old and is a member of the #{us_pres.party} party.  He is also a #{us_pres.citizenship} citizen."#How to put the citizenship?""lass UnitedStatesPresident  attr_accessor :age, :party  def initialize(years, party)    @age, @party = years, party  end  def self.citizenship    "United States of America"  endendclass GermanyPresident  attr_accessor :age, :party  def initialize(years, party)    @age, @party = years, party  end  def self.citizenship    "Germany"  endendclass FrancePresident  attr_accessor :age, :party  def initialize(years, party)    @age, @party = years, party  end  def self.citizenship    "France"endendus_pres = UnitedStatesPresident.new(49, "rep")p "The Presid""ass UnitedStatesPresident  attr_accessor :age, :party  def initialize(years, party)    @age, @party = years, party  end  def self.citizenship    "United States of America"  endendclass GermanyPresident  attr_accessor :age, :party  def initialize(years, party)    @age, @party = years, party  end  def self.citizenship    "Germany"  endendclass FrancePresident  attr_accessor :age, :party  def initialize(years""ss UnitedStatesPresident  attr_accessor :age, :party  def initialize(years, party)    @age, @party = years, party  end  def self.citizenship    "United States of America"  endendclass GermanyPresident  attr_accessor :age, :party  def initialize(years, party)    @age""s UnitedStatesPresident  attr_accessor :age, :party  def initialize(years, party)    @age, @party = years, party  end  def"My Class President Project,"puts "Enter the name of the presidential candidate you want to learn more about."gets_name = gets.chompclass President  attr_accessor :name, :country, :age, :party  def initialize(name,country,age, party)    @name, @country, @age, @party = name, country, age, party  end  def about    puts "The next #{country} President could be #{name}  who is #{age} years old and a member of the #{party} party."  endendpresident_trump = President.new("Donald Trump","American", 70, "Republican")president_clinton = President.new("Hillary Clinton", "American", 68, "Democrat")if gets_name == "trump"  p president_trump.aboutelsif gets_name == "clinton"  p president_clinton.aboutend""uts "Enter the name of the presidential candidate you want to learn more about."gets_name = gets.chompclass President  attr_accessor :name, :country, :age, :party  def initialize(name,country,age, party)    @name, @country, @age, @party = name, country, age, party  end  def about    puts "The next #{country} President could be #{name}  who is #{age} years old and a member of the #{party} party."  endendpresident_trump = President.new("Donald Trump","American", 70, "Republican")president_clinton = President.new("Hillary Clinton", "American", 68, "Democrat")if gets_name == "trump"  p president_trump.aboutelsif gets_name == "clinton"  p president_clinton.abou""ts "Enter the name of the presidential candidate you want to learn more about."gets_name = gets.chompclass President  attr_accessor :name, :country, :age, :party  def initialize(name,country,age, party)    @name, @country, @age, @party = name, country, age, party  end  def about    puts "The next #{country} President could be #{name}  who is #{age} years old and a member of the #{party} party."  endendpresident_trump = President.new("Donald Trump","American", 70, "Republican")president_clinton = President.new("Hillary Clinton", "American", 68, "Democrat")if gets_name == "trump"  p president_trump.aboutelsif gets_name == "clinton"  p president_clinton.""s "Enter the name of the presidential candidate you want to learn more about."gets_name = gets.chompclass President  attr_accessor :name, :country, :age, :party  def initialize(name,country,age, party)    @name, @country, @age, @party = name, country, age, party  end  def about    puts "The next #{country} President could be #{name}  who is #{age} years old and a member of the #{party} party."  endendpresident_trump = President.new("Donald Trump","American", 70, "Republican")president_clinton = President.new("Hillary Clinton", "American", 68, "Democrat")if gets_name == "trump"  p president_trump.aboutelsif gets_name == "clinton"  p president_clint"" "Enter the name of the presidential candidate you want to learn more about."gets_name = gets.chompclass President  attr_accessor :name, :country, :age, :party  def initialize(name,country,age, party)    @name, @country, @age, @party = name, country, age, party  end  def about    puts "The next #{country} President could be #{name}  who is #{age} years old and a member of the #{party} party."  endendpresident_trump = President.new("Donald Trump","American", 70, "Republican")president_clinton = President.new("Hillary Clinton", "American", 68, "Democrat")if gets_name == "trump"  p president_trump.aboutelsif gets_name == "clinton"  p president_cli"""Enter the name of the presidential candidate you want to learn more about."gets_name = gets.chompclass President  attr_accessor :name, :country, :age, :party  def initialize(name,country,age, party)    @name, @country, @age, @party = name, country, age, party  end  def about    puts "The next #{country} President could be #{name}  who is #{age} years old and a member of the #{party} party."  endendpresident_trump = President.new("Donald Trump","American", 70, "Republican")president_clinton = President.new("Hillary Clinton", "American", 68, "Democrat")if gets_name == "trump"  p president_trump.aboutelsif gets_name == "clinton"  p president_cl""Enter the name of the presidential candidate you want to learn more about."gets_name = gets.chompclass President  attr_accessor :name, :country, :age, :party  def initialize(name,country,age, party)    @name, @country, @age, @party = name, country, age, party  end  def about    puts "The next #{country} President could be #{name}  who is #{age} years old and a member of the #{party} party."  endendpresident_trump = President.new("Donald Trump","American", 70, "Republican")president_clinton = President.new("Hillary Clinton", "American", 68, "Democrat")if gets_name == "trump"  p president_trump.aboutelsif gets_name == "clinton"  p president_cl""nter the name of the presidential candidate you want to learn more about."gets_name = gets.chompclass President  attr_accessor :name, :country, :age, :party  def initialize(name,country,age, party)    @name, @country, @age, @party = name, country, age, party  end  def about    puts "The next #{country} President could be #{name}  who is #{age} years old and a member of the #{party} party."  endendpresident_trump = President.new("Donald Trump","American", 70, "Republican")president_clinton = President.new("Hillary Clinton", "American", 68, "Democrat")if gets_name == "trum""ter the name of the presidential candidate you want to learn more about."gets_name = gets.chompclass President  attr_accessor :name, :country, :age, :party  def initialize(name,country,age, party)    @name, @country, @age, @party = name, country, age, party  end  def about    puts "The next #{country} President could be #{name}  who is #{age} years old and a member of the #{party} party."  endendpresident_trump = President.new("Donald Trump","American", 70, "Republican")president_clinton = President.""er the name of the presidential candidate you want to learn more about."gets_name = gets.chompclass President  attr_accessor :name, :country, :age, :party  def initialize(name,country,age, party)    @name, @country, @age, @party = name, country, age, party  end  def about    puts "The next #{country} President could be #{name}  who is #{age} years old and a member of the #{party} party."  endendpresident_trump = President.new("Don""r the name of the presidential candidate you want to learn more about."gets_name = gets.chompclass President  attr_accessor :name, :country, :age, :party  def initialize(name,country,age, party)    @name, @country, @age, @party = name, country, age, party  end  def about    puts "The next #{country} President could be #{name}  who is #{age} years old and a member "" the name of the presidential candidate you want to learn more about."gets_name = gets.chompclass President  attr_accessor :name, :country, :age, :party  def initialize(name,country,age, party)    @name, @country, @age, @party = name, country, age, party  end  def about    puts "The next #{coun""the name of the presidential candidate you want to learn more about."gets_name = gets.chompclass President  attr_accessor :name, :country, :age, :party  def initialize(name,country,age, party)    @name, @country, @age, @party = n""he name of the presidential candidate you want to learn more about."gets_name = gets.chompclass President  attr_accessor :name, :country, :age, :party  def initi""e name of the presidential candidate you want to learn more about."gets_name = gets.chompclass P"" name of the presidential candid"9. Loops,Each,"a = [2, 4, 6, 8] a.each do |num| p "We're on number: #{num}" end"" = [2, 4, 6, 8] a.each do |n""Each in Rails Each is frequently used in Rails to iterate through "model" objects (instances of classes representing data) and display their attributes on a page. ""ach in Rails Each is frequently used in Rails to iterate through "model" objects (instances of ""ch in Rails Each is frequent","class User attr_accessor :name def initialize(name) @name = name end def email # You'll get a chance to use `join` and `split` in the exercises "#{name.split(' ').join('')}@email.com" end end    users = [User.new('Harry Potter'), User.new('Hermione Granger'), User.new('He Who Shallusers.each do |user| p "This user's name is #{user.name}, and their email is #{user.email}." end""lass User attr_accessor :name def initialize(name) @name = name end def email # You'll get a chance to use `join` and `split` in the exercises "#{name.split(' ').join('')}@email.com" end end    users = [User.new('Harry Potter'), Use""ass User attr_accessor :name def initialize(name) @name = name end def email # You'll g"Mixing Classes and Loops,"# User class defined aboveclass UserIterator attr_accessor :user_array def initialize(user_array) @user_array = user_array end def print_names_and_emails user_array.each do |user| p "This user's name is #{user.name}, and their email is #{user.email}" end end end    users = [User.new('Harry Potter'), User.new('Hermione Granger'), User.new('He Who Shall   UserIterator.new(users).print_names_and_emails"" User class defined aboveclass UserIterator attr_accessor :user_array def initialize(user_array) @user_array = user_array end def print_names_and_emails user_array.each do |user| p "This user's name is #{user.name}, a""User class defined aboveclass User",10,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,