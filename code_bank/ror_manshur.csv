,,Install Rails - Follow Directions,www.installrails.com Rails Main Guide,http://guides.rubyonrails.org/getting_started.html Command Line Crash Course, http://cli.learncodethehardway.org/book/ Help from Mashrur Hossain,http://www.mashrurhossain.com/ ,print working directory,$ pwdchange directory,$ cd directorynamechange directory: parent,$ cd ..list directories and files:,$ lslist directories and files (hidden files):,$ ls -amake new directory,$ mkdir directorynameDelete directory (if empty),$ rmdir directorynameDelete directory (if not empty),$ rm -rf directorynameclears the command line,$ clear,Check rails version,$ rails -vCheck ruby version,$ ruby -vRVM (Ruby Version Manager),https://github.com/rbenv/rbenv  Check rbenv versions available,$ rbenv versionsChange (global) default rbenv version,$ rbenv global 2.2.1Change (local) default rbenv version,$ rbenv local 2.2.1Confirm rbenv default version,$ rbenv versions,Check rails version,$ rails -vCheck ruby version,$ ruby -vCheck RVM versions available,$ rvm listChange (global) default RVM version,$ rvm use ruby-2.3.0,,C9 Tree View Setup: *Gear Settings in File Tree:,"1. Check: Show Home in Favorites2. Uncheck: Show Root File System""Follow Official Guide, starting at 3.2",http://guides.rubyonrails.org/getting_started.html,3.2 Creating the Blog Application,"C9: Go to Home Directory: /home/ubuntu$ pwd (Where are you?)$ cd .. (Change to Parent Directory, if need be.)Local: Go to Desktop Directory: $ cd ~/Desktop"Create new directory,$ mkdir workspace2 (directoryname)Switch into new directory,"C9: $ cd workspace2 (directory name)Local: $ cd ~/Desktop/workspace2 (directory name)"Create new rails app,$ rails new blog (rails app name)Switch into new app,"$ ls (is blog [new rails app] listed?)$ cd blog (rails app name)$ ls (are rails directories listed?)",4.1 Starting up the Web Server (cloud 9),$ rails server -b $IP -p $PORT (ignore: $ bin/rails server)4.1 Starting up the Web Server (nitrous),$ rails s -b 0.0.0.0 (ignore: $ bin/rails server)4.1 Starting up the Web Server (local),$ rails server"Copy generated link and visit.If local: http://localhost:3000 ",Note the version and data info.,"4.2 Say "Hello", Rails"".2 Say "Hello""2 Say",Open new Terminal Window,"New TerminalBe sure you’re in blog directory (rails application/project). Use $ pwd, $ ls, $ cd .. until you reach::~/blog (or location/name of new rails project/application)"Generate welcome controller & index,"$ rails generate controller welcome indexVerify Controller: Go to app/controllers/welcome_controllerVerify View: Go to app/views/welcome/index.html.erb"Create Custom Message,"Open the app/views/welcome/index.html.erbDelete everything.Type: <h1>Hello, Rails!<h1>",4.3 Setting the Application Home Page,Modify routes p.1. Navigate:,"Open the file config/routes.rb in your editor.Uncomment: root ‘welcome#index' (remove #)Refresh page.",Create file from terminal,"Navigate to ~/playground$ touch helloworld.rb (file name w/ .rb extension)"helloworld.rb contents:,"puts "Hello World!"""uts "Hello Wo""ts "Hell""s "H"" "Run helloworld.rb from command line:,ruby helloworld.rbShortcut to re-enter,Up Arrow + return,helloworldstring.rb contents (create string),"hello = "Hello World!"puts hello""ello = "Hello World!"pu""llo = "Hello Wor""lo = "Hel""o ="Run helloworldstring.rb from command line:,ruby helloworldstring.rb,helloworldmethod.rb (create method),"def helloputs "Hello World!"endhello [call method]""ef helloputs "Hello World!"endhell""f helloputs "Hello Wor"" hellopu"Run helloworldmethod.rb from command line:,ruby helloworldmethod.rbUpdated hello method:,"def hello(anything) [pass an argument]puts anythingendTo call this method:hello "My name is mashrur"hello "Welcome to the complete ruby on rails developer course"hello "Check it out this prints anything I want"""ef hello(anything) [pass an argument]puts anythingendTo call this method:hello "My name is mashrur"hello "Welcome to the com""f hello(anything) [pass an argument]puts any"Run helloworldmethod.rb from command line:,ruby helloworldmethod.rb,playground.rb (strings),"puts "Adam" + “ “ + "Booth"""uts "Adam" + “ “ + "B""ts "Adam" + “ “ ""s "Adam" + “"" "Adam" +"""Adam" ""Adam" ""d"Run playground.rb from command line:,ruby playground.rbTo start irb console:,irbTo clear screen (in irb):,Ctrl + lTo exit irb console:,exitstring concat,"first_name = “Adam”last_name = “Booth”first_name + “ “ + last_name"Find class object belongs to:,"Variable_name.class1.class (example)"Find methods available to object:,"objectname.methods1.methods (example)"Ex. methods used on objects:,"objectname.nil?objectname.empty?objectname.lengthobjectname.reverse"String interpolation (must be in double quotes):,"name = "Mashrur""My name is #{name}"To escape the evaluation of #{variablename} within a String, prepent with a \:\#{variablename}""ame = "Mashrur""My name is #{name}"To escape the evaluation of #{variablename} within a String, prepent with a \:\#{variab""me = "Mashrur""My name is #{name}"To escape the evaluation of #{variablename} within a String, prepent with a \:\#{""e = "Mashrur""My name is #{name}"To escape the evaluation of #{variablename} within a String, prepent with a \"" = "Mashrur""My name is #{name}"To escape the evaluation of #{variablename} within a String, prepent with""= "Mashrur""My name is #{name}"To escape the evaluation of #{variablename} within a String, prepent w"" "Mashrur""My name is #{name}"To escape the evaluation of #{variablename} within a String, prepent"""Mashrur""My name is #{name}"To escape the evaluation of #{variablename} within a String, prepen""Mashrur""My name is #{name}"To escape the evaluation of #{variablename} within a String, prepen""ashrur""My name is #{name}"To escape the evaluation of #{variablename} within a String,""shrur""My name is #{name}"To escape the evaluation of #{variablename} within a S""hrur""My name is #{name}"To escape the evaluation of #{variablename} withi""rur""My name is #{name}"To escape the evaluation of #{variablename} w""ur""My name is #{name}"To escape the evaluation of #{variablename""r""My name is #{name}"To escape the evaluation of #{variablena""""My name is #{name}"To escape the evaluation of #{variablen"""My name is #{name}"To escape the evaluation of #{variablen"""My name is #{name}"To escape the evaluation of #{variable""My name is #{name}"To escape the evaluation of #{variable""y name is #{name}"To escape the evalua"" name is #{name}"To ""name "Get input from command line: gets.chomp,"puts "Hello.  What's your first name?"first_name = gets.chompputs "Hi #{first_name}.  What’s your last name?"last_name = gets.chompputs "Thank you, Mr. #{last_name}.  It’s nice to meet you."""uts "Hello.  What's your first name?"first_name = gets.chompputs "Hi #{first_name}.  What’s your last name?"last_name = gets.chompputs "Thank you, Mr. #{last_name}.  It’s nice to meet ""ts "Hello.  What's your first name?"first_name = gets.chompputs "Hi #{first_name}.  What’s your last name?"last_name = gets.chompputs "Thank you, Mr. #{last_name}.  It’s nice to m""s "Hello.  What's your first name?"first_name = gets.chompputs "Hi #{first_name}.  What’s your last name?"last_name = gets.chompputs "Thank you, Mr. #{last_name}.  It’s nice t"" "Hello.  What's your first name?"first_name = gets.chompputs "Hi #{first_name}.  What’s your last name?"last_name = gets.chompputs "Thank you, Mr. #{last_name}.  It’s nice"""Hello.  What's your first name?"first_name = gets.chompputs "Hi #{first_name}.  What’s your last name?"last_name = gets.chompputs "Thank you, Mr. #{last_name}.  It’s nic""Hello.  What's your first name?"first_name = gets.chompputs "Hi #{first_name}.  What’s your last name?"last_name = gets.chompputs "Thank you, Mr. #{last_name}.  It’s nic""ello.  What's your first name?"first_name = gets.chompputs "Hi #{first_name}.  What’s your last name?"last_name = gets.chompputs "Thank y""llo.  What's your first name?"first_name = gets.chompputs "Hi #{first_name}.  What’s your last name?"last_n""lo.  What's your first name?"first_name = gets.chompputs "Hi #{first_name}.  W""o.  What's your first name?"first_name = gets.chom"".  What's your first na",Ex 1. simple,"puts 1 + 2puts 3 * 5puts 15/5puts 20/3puts 20/3.to_f (float)puts 20.0/3puts 20/3.0"Ex 2. to float (.to_f),"x = 10y = 22y / xy = y.to_fputs y/x"Ex 3. modulo (%),20 % 3Ex 4 .odd / .even,"23.odd?22.even?"Ex 5. comparisons,"5 < 210 < 1010 <= 1010 == 10x = 12y = 12x = yx == y"Ex 6. random number (rand),"randrand(10)puts rand (10)"Ex 7. to integer (.to_i),"x = 5.0x = x.to_ix * 5"Ex 8. to string (.to_s),"x = 5.0x = x.to_sx * 55 * x"Ex 9. repeat (#.times {puts code},"20.times {puts “Hi”}20.times {puts 10}"Ex 10. gets.chomp w/ numbers,"puts = “Please enter your first number.”num1 = gets.chompputs = “Please enter your second number”num2 = gets.chompputs “The first number times the second number is: #{num1.to_i * num2.to_i}”",Pattern,"if #condition 1    #execute logic 1elsif #condition 2    #execute logic 2else     #execute logic 3end"Example 1,"fn = "Adam"welcome = "Welcome to the funsite!  Please login or register."greeting = "Hi, #{fn}.  Nice to see you again!"if fn != nil	puts greetingelse	puts welcomeend""n = "Adam"welcome = "Welcome to the funsite!  Please login or register."greeting = "Hi, #{fn}.  Nice to see you again!"if fn != nil	puts greetingelse	puts welcom"" = "Adam"welcome = "Welcome to the funsite!  Please login or register."greeting = "Hi, #{fn}.  Nice to see you again!"if fn != nil	puts greetingelse	puts we""= "Adam"welcome = "Welcome to the funsite!  Please login or register."greeting = "Hi, #{fn}.  Nice to see you again!"if fn != nil	puts greetingelse	puts"" "Adam"welcome = "Welcome to the funsite!  Please login or register."greeting = "Hi, #{fn}.  Nice to see you again!"if fn != nil	puts greetingelse	pu"""Adam"welcome = "Welcome to the funsite!  Please login or register."greeting = "Hi, #{fn}.  Nice to see you again!"if fn != nil	puts greetingelse	p""Adam"welcome = "Welcome to the funsite!  Please login or register."greeting = "Hi, #{fn}.  Nice to see you again!"if fn != nil	puts greetingelse	p""dam"welcome = "Welcome to the funsite!  Please login or register."greeting = "Hi, #{fn}.  Nice to see you again!"if fn != nil	puts greetingels""am"welcome = "Welcome to the funsite!  Please login or register."greeting = "Hi, #{fn}.  Nice to see you again!"if fn != nil	puts greeting""m"welcome = "Welcome to the funsite!  Please login or register."greeting = "Hi, #{fn}.  Nice to see you again!"if fn != nil	puts greetin"""welcome = "Welcome to the funsite!  Please login or register."greeting = "Hi, #{fn}.  Nice to see you again!"if fn != nil	puts greeti""welcome = "Welcome to the funsite!  Please login or register."greeting = "Hi, #{fn}.  Nice to see you again!"if fn != nil	puts greeti""welcome = "Welcome to the funsite!  Please login or register."greeting = "Hi, #{fn}.  Nice to see you again!"if fn != nil""welcome = "Welcome to the funsite!  Please login or register."greeting = "Hi, #{fn}.  Nice to see you again!"if""elcome = "Welcome to the funsite!  Please login or register."greeting = "Hi, #{fn}.  Nice to see you ag""lcome = "Welcome to the funsite!  Please login or register."greeting = "Hi, #{fn}.  Nice to s""come = "Welcome to the funsite!  Please login or register."greeting = "Hi, #{fn}.  N""ome = "Welcome to the funsite!  Please login or register."greeting = "Hi, #{""me = "Welcome to the funsite!  Please login or register."greeting = """e = "Welcome to the funsite!  Please login or register."greetin"" = "Welcome to the funsite!  Please login or register."gre""= "Welcome to the funsite!  Please login or register.""" "Welcome to the funsite!  Please login or register."""Welcome to the funsite!  Please login or register""Welcome to the funsite!  Please login or register"Example 2,"meal = ""if meal == "breakfast"	puts "Please enjoy your breakfast."elsif meal == "lunch"	puts "Please enjoy your lunch."elsif meal == "dinner"	puts "Please enjoy your dinner."else	puts "Please choose your meal."end""eal = ""if meal == "breakfast"	puts "Please enjoy your breakfast."elsif meal == "lunch"	puts "Please enjoy your lunch."elsif meal == "dinner"	puts "Please enjoy your dinner."else	puts "Please choose your mea""al = ""if meal == "breakfast"	puts "Please enjoy your breakfast."elsif meal == "lunch"	puts "Please enjoy your lunch."elsif meal == "dinner"	puts "Please enjoy your dinner."else	puts "Please choose yo""l = ""if meal == "breakfast"	puts "Please enjoy your breakfast."elsif meal == "lunch"	puts "Please enjoy your lunch."elsif meal == "dinner"	puts "Please enjoy your dinner."else	puts "Please choo"" = ""if meal == "breakfast"	puts "Please enjoy your breakfast."elsif meal == "lunch"	puts "Please enjoy your lunch."elsif meal == "dinner"	puts "Please enjoy your dinner."else	puts "Please ""= ""if meal == "breakfast"	puts "Please enjoy your breakfast."elsif meal == "lunch"	puts "Please enjoy your lunch."elsif meal == "dinner"	puts "Please enjoy your dinner."else	puts "Plea"" ""if meal == "breakfast"	puts "Please enjoy your breakfast."elsif meal == "lunch"	puts "Please enjoy your lunch."elsif meal == "dinner"	puts "Please enjoy your dinner."else	puts "Pl""""if meal == "breakfast"	puts "Please enjoy your breakfast."elsif meal == "lunch"	puts "Please enjoy your lunch."elsif meal == "dinner"	puts "Please enjoy your dinner."else	puts "P"""if meal == "breakfast"	puts "Please enjoy your breakfast."elsif meal == "lunch"	puts "Please enjoy your lunch."elsif meal == "dinner"	puts "Please enjoy your dinner."else	puts "P""if meal == "breakfast"	puts "Please enjoy your breakfast."elsif meal == "lunch"	puts "Please enjoy your lunch."elsif meal == "dinner"	puts "Please enjoy your dinner."else	puts "P""if meal == "breakfast"	puts "Please enjoy your breakfast."elsif meal == "lunch"	puts "Please enjoy your lunch."elsif meal == "dinner"	puts "Please enjoy your dinner."""if meal == "breakfast"	puts "Please enjoy your breakfast."elsif meal == "lunch"	puts "Please enjoy your lunch."elsif meal == "dinner"	puts "Please enjoy yo""f meal == "breakfast"	puts "Please enjoy your breakfast."elsif meal == "lunch"	puts "Please enjoy your lunch."elsif meal == "dinner"	puts "Plea"" meal == "breakfast"	puts "Please enjoy your breakfast."elsif meal == "lunch"	puts "Please enjoy your lunch."elsif meal == "dinner"	""meal == "breakfast"	puts "Please enjoy your breakfast."elsif meal == "lunch"	puts "Please enjoy your lunch."elsif meal == """eal == "breakfast"	puts "Please enjoy your breakfast."elsif meal == "lunch"	puts "Please enjoy your lunch."elsif m""al == "breakfast"	puts "Please enjoy your breakfast."elsif meal == "lunch"	puts "Please enjoy your lunch."""l == "breakfast"	puts "Please enjoy your breakfast."elsif meal == "lunch"	puts "Please enjoy your lu"" == "breakfast"	puts "Please enjoy your breakfast."elsif meal == "lunch"	puts "Please enjoy yo""== "breakfast"	puts "Please enjoy your breakfast."elsif meal == "lunch"	puts "Please enjo""= "breakfast"	puts "Please enjoy your breakfast."elsif meal == "lunch"	puts "Please e"" "breakfast"	puts "Please enjoy your breakfast."elsif meal == "lunch"	puts "Please"""breakfast"	puts "Please enjoy your breakfast."elsif meal == "lunch"	puts "Pleas""breakfast"	puts "Please enjoy your breakfast."elsif meal == "lunch"	puts "Pleas""reakfast"	puts "Please enjoy your breakfast."elsif meal == "lunch"	pu""eakfast"	puts "Please enjoy your breakfast."elsif meal == "lu""akfast"	puts "Please enjoy your breakfast."elsif meal""kfast"	puts "Please enjoy your breakfast."elsi""fast"	puts "Please enjoy your breakfast."""ast"	puts "Please enjoy your breakfa""st"	puts "Please enjoy your brea""t"	puts "Please enjoy your br"""	puts "Please enjoy your b""	puts "Please enjoy your b""	puts "Please enjoy""puts "Please""uts "P""t",Simple Array,"a = [1,2,3,4,5,6,7,8,9,10]a[1]a.empty?a.reversea.reverse! (bang)a.reverse! (bang - reverse to original)a.shufflea.lengtha.include?(2)"Array of an Array,"b = [[0,1,2,3], ["Adam", "GaHee", "Melissa", "Jamey"], ["blue", "red", "white", "pink"]]b[1][1]"" = [[0,1,2,3], ["Adam", "GaHee", "Melissa", "Jamey"], ["blue", "red", "white", ""= [[0,1,2,3], ["Adam", "GaHee", "Melissa", "Jamey"], ["blue", "" [[0,1,2,3], ["Adam", "GaHee", "Melissa", "Jam""[[0,1,2,3], ["Adam", "GaHee", """[0,1,2,3], ["Adam""0,1,"Array of an Array,"b = [[0,1,2,3], ["Adam", "GaHee", "Melissa", "Jamey"], ["blue", "red", "white", "pink"]]new = []b.each {|item| new.concat(item)}puts "#{new}"puts new.include?("Adam")"" = [[0,1,2,3], ["Adam", "GaHee", "Melissa", "Jamey"], ["blue", "red", "white", "pink"]]new = []b.each {|item| new.concat(item)}puts "#{new}"puts new""= [[0,1,2,3], ["Adam", "GaHee", "Melissa", "Jamey"], ["blue", "red", "white", "pink"]]new = []b.each {|item| new.concat(item)}puts "#"" [[0,1,2,3], ["Adam", "GaHee", "Melissa", "Jamey"], ["blue", "red", "white", "pink"]]new = []b.each {|item| new.concat(""[[0,1,2,3], ["Adam", "GaHee", "Melissa", "Jamey"], ["blue", "red", "white", "pink"]]new = []b.each {|ite""[0,1,2,3], ["Adam", "GaHee", "Melissa", "Jamey"], ["blue", "red", "white", "pink"]]new = []""0,1,2,3], ["Adam", "GaHee", "Melissa", "Jamey"], ["blue", "red", "white", "pink"]"",1,2,3], ["Adam", "GaHee", "Melissa", "Jamey"], ["blue", "red", "whit""1,2,3], ["Adam", "GaHee", "Melissa", "Jamey"], ["blue", "r"",2,3], ["Adam", "GaHee", "Melissa", "Jamey"], ["""2,3], ["Adam", "GaHee", "Melissa", "Jam"",3], ["Adam", "GaHee", "Melissa""3], ["Adam", "GaHee", "M""], ["Adam", "GaHee"", ["Adam", "G"" ["Adam",""["Adam"""Ada""Ada"Convert Range to Array,"(0..25).to_ay = (0..99).to_az = (0..99).to_a.shuffle!x = (0..25).to_ax << 25 (shovel operator)x.push(30)x.unshift(“Adam”)x.(0)x.popxx << 3x << 6 x.uniqxx.uniq!x"iterate / loop through array,"y = (0..99).to_ay.each {#logic}y.each {|i| puts i}"for loop,"y = (0..99).to_afor number in yputs "Hi"endnames = ["joe", "john", "james"]names.each do |food|	puts "Hello #{food}"endnames.each do |food|	puts "Hello #{food.capitalize}"endpreferred syntaxnames.each { |food| puts "Hello #{food.capitalize}" } "" = (0..99).to_afor number in yputs "Hi"endnames = ["joe", "john", "james"]names.each do |food|	puts "Hello #{food}"endnames.each do |food|	puts "Hello #{food.capitalize}"endpreferred syntaxnames.each { |f""= (0..99).to_afor number in yputs "Hi"endnames = ["joe", "john", "james"]names.each do |food|	puts "Hello #{food}"endnames.each do |food|	puts "Hello #{food.capitalize}""" (0..99).to_afor number in yputs "Hi"endnames = ["joe", "john", "james"]names.each do |food|	puts "Hello #{food}"endnames.each do |f""(0..99).to_afor number in yputs "Hi"endnames = ["joe", "john", "james"]names.each do |food|	puts """0..99).to_afor number in yputs "Hi"endnames = ["joe", "john", "ja""..99).to_afor number in yputs "Hi"".9"select method,"y = (0..99).to_ay.select { |number| number.odd?}y.each { |number| print number if number.odd?}"Join,"p = [“my”, “name”, “is”, “Adam”]p.joinp.join(‘ ‘)","Create hash called my_details, elements within { }:","my_details = {'name' => 'mashrur', 'favcolor' => 'red'}"Access value and notify what favcolor is:,"my_details["favcolor"]""y_details[""Alternate syntax to create key, value pairs in hash:","myhash = {a: 1, b: 2, c: 3, d: 4}"Access the value for key c above:,myhash[:c]Symbol Example 2,"array2 = {name: "Adam", dob: 1976, nationality: "usa"}array2[:name]""rray2 = {name: "Adam", dob: 1976, nationality: "usa""ray2 = {name: "Adam", dob: 1976, na""ay2 = {name: "Adam",""y2 = {""Add a key,value pair to hash above:","myhash[:d] = 7myhash[:name] = "Mashrur"""yhash[:d""Delete key,value pair delete key:",myhash.delete(:d)"Iterate through hash w/ .each method, print value:","myhash.each { |somekey, somevalue| puts somevalue }array2.each { |key, value| puts value }""Iterate through hash w/ .each method, print key - value:","myhash.each { |somekey, somevalue| puts "The key is #{somekey} and the value is #{somevalue}" }array2.each { |key, value| puts "The key is #{key} and the value is #{value}" }""yhash.each { |somekey, somevalue| puts "The key is #{somekey} and the value is #{somevalue}" }array2.each { |key, value| puts "The ke""hash.each { |somekey, somevalue| puts "The key is #{somekey} and the value is #{somevalue}" }""ash.each { |somekey, somevalue| puts "The key is #{somek""sh.each { |somekey"Iterate through & delete items from hash based on condition (Ex. if value greater than 3):,"myhash.each { |k, v| myhash.delete(k) if v > 3 }"Use select method to display items only if value of item is odd:,"myhash.select { |k, v| v.odd? }",Text with directions and references,Link for style guide:,github.com/bbatsov/ruby-style-guide Soft tabs:,"2 spaces, convert tabs to spaces"class names:,"CamelCaseThisIsCamelCase"file names:,"snake_casethis_is_snake_case.rb",Solution,"directory = {	"chicago" => "312",	"flossmoor" => "708",	"niles" => "847",	"naperville" => "630"}""irectory = {	"chicago" => "312",	"flossmoor" => "708",	"niles" => "847",	"napervi""rectory = {	"chicago" => "312",	"flossmoor" => "708",	"niles" => "8""ectory = {	"chicago" => "312",	"flossmoor" => "708",	""ctory = {	"chicago" => "312",	"flossmoor"""tory = {	"chicago" => "312",	""ory = {	"chicago" =""ry = {	"c""y""def cities    puts “just chicago”end","def cities(hash)	hash.each { |k, v| puts k }end","def get_area_code(hash, key)	hash[key]end","loop do	puts "Do you want to lookup an area code based on a city name? (y/n)"		answer = gets.chomp		if answer != "y"		breakend""oop do	puts "Do you want to lookup an area code based on a city name? (y/n)"		answer = gets.chomp		if answer != """op do	puts "Do you want to lookup an area code based on a city name? (y/n)"		answer = gets.chomp		i""p do	puts "Do you want to lookup an area code based on a city name? (y/n)"		answer = get"" do	puts "Do you want to lookup an area code based on a city name? (y/n)"		a""do	puts "Do you want to lookup an area code based on a city name? (""o	puts "Do you want to lookup an area code based on a cit""	puts "Do you want to lookup an area code based ""	puts "Do you want to lookup an area code""puts "Do you want to lookup an are""uts "Do you want to lookup a""ts "Do you want to look""s "Do you want to l"" "Do you want to"""Do you want t""Do you want t","puts "Which city do you want the area code for?"""uts "Which city do you want the area code ""ts "Which city do you want the area c""s "Which city do you want the are"" "Which city do you want the a"""Which city do you want the ""Which city do you want the ",cities(directory),"puts "Enter your selection"""uts "Enter your selec""ts "Enter your s""s "Enter you"" "Enter y"""Enter ""Enter ",prompt = gets.chomp,"if directory.include?(prompt)	puts "The area code for #{prompt} is #{get_area_code(directory, prompt)}"else	puts "You entered a city name not in the directory."endend""f directory.include?(prompt)	puts "The area code for #{prompt} is #{get_area_code(directory, prompt)}"else	puts "You entered a city"" directory.include?(prompt)	puts "The area code for #{prompt} is #{get_area_code(directory, promp""directory.include?(prompt)	puts "The area code for #{prompt} i""irectory.include?(prompt)	pu",,,