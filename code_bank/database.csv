,All,Gcse.countDom Result,"Gcse.where(domain_status: "Dom Result").count""cse.where(domain_s"No Auto-Matches,"Gcse.where(domain_status: "No Auto-Matches").count""cse.where(domain_status"All,Core.countImported,"Core.where(bds_status: "Imported").count""ore.where(bds_st"Queue,"Core.where(bds_status: "Queue").count""ore.where(bds"Dom Result,"Core.where(bds_status: "Dom Result").count""ore.where(bds_stat"Matched,"Core.where(bds_status: "Matched").count""ore.where(bds_s"No Matches,"Core.where(bds_status: "No Matches").count""ore.where(bds_stat",Solitary.count,PendingVerification.count,Core.where(bds_status: nil).count,"cores = Core.where(bds_status: nil)cores.each{|core| core.update_attribute(:bds_status, "Imported")}cores.count""ores = Core.where(bds_s","IndexerStaff.where(indexer_status: "Error").count""ndexerStaff.w","IndexerStaff.where(indexer_status: "Error").destroy_all""ndexerStaff.where(i","IndexerLocation.where(indexer_status: "Error").count""ndexerLocatio","IndexerLocation.where(indexer_status: "Error").destroy_all""ndexerLocation.wher","ind = IndexerStaff.where(indexer_status: "Error")""nd = In",IN.count,IN.destroy_all,IN.count,"IN = IndexerLocation.where(indexer_status: "Error")""N = Ind",IN.count,IN.destroy_all,IN.count,"Core.all.each do |core|    gcse = Gcse.find_by(sfdc_id: core.sfdc_id)    status = gcse.domain_status if gcse    core.update_attribute(:domain_status, status)end",Core.where.not(bds_status: nil).count,"Gcse.where(domain_status: "Dom Result").count""cse.where(domain_s",Core.where(bds_status: nil).count,"Gcse.where(in_host_pos: "ford").count""cse.where(in","Gcse.where!(domain_status: "Dom Result").count""cse.where!(domain_","Gcse.where(in_host_pos: "ford").count""cse.where(in",Core.where(matched_root: ).count,"Core.where("sfdc_franchise LIKE ?", "%;%").third.sfdc_franchise""ore.where("sfdc_franchise LIKE ?", "%;%").third.sfd""re.where("sfdc_franchise LIKE ?", "%;%")""e.where("sfdc_franchise LIKE ?"".where("sfdc_franchis""where("sfdc_f""here("""","Core.where("sfdc_franchise LIKE ?", "%;%").second.sfdc_franchise""ore.where("sfdc_franchise LIKE ?", "%;%").second.sfd""re.where("sfdc_franchise LIKE ?", "%;%").""e.where("sfdc_franchise LIKE ?""".where("sfdc_franchise""where("sfdc_fr""here("s""e","Core.where("sfdc_franchise LIKE ?", "%;%").first.sfdc_id""ore.where("sfdc_franchise LIKE ?", "%;%").fi""re.where("sfdc_franchise LIKE ?",""e.where("sfdc_franchise"".where("sfdc_f""where(","Core.where("sfdc_franchise LIKE ?", "%;%").first""ore.where("sfdc_franchise LIKE ?", """re.where("sfdc_franchise ""e.where("sfdc_f"".where","Core.where("sfdc_franchise LIKE ?", "%;%").count""ore.where("sfdc_franchise LIKE ?", """re.where("sfdc_franchise ""e.where("sfdc_f"".where",Core.first.sfdc_franchise,"Core.where("sfdc_franchise LIKE ?", "%ford%").count""ore.where("sfdc_franchise LIKE ?", "%fo""re.where("sfdc_franchise LIK""e.where("sfdc_fran"".where("s""w",Core.where.not(sfdc_franchise: nil).count,"Core.where("sfdc_franchise LIKE ?", "%;%").third.sfdc_franchise""ore.where("sfdc_franchise LIKE ?", "%;%").third.sfd""re.where("sfdc_franchise LIKE ?", "%;%")""e.where("sfdc_franchise LIKE ?"".where("sfdc_franchis""where("sfdc_f""here("""","Gcse.where("domain LIKE ?", "%acura;%").count""cse.where("domain LIKE ?", "%acur""se.where("domain LIKE ""e.where("dom"".wh","Core.where(bds_status: "No Matches").count""ore.where(bds_stat","Gcse.where(domain_status: "No Auto-Matches").count""cse.where(domain_status"unique fields,Location.select(:longitude).map(&:longitude).uniq.countunique fields,"Location.select("DISTINCT(longitude)").count""ocation.select("DISTINCT(lo""cation.sele",Location.countunique | unique fields,"locs = Location.where(source: "CRM")""ocs =",locs.select(:longitude).map(&:longitude).uniq.count,"Location.where.not(source: "CRM").count""ocation.whe","crms = Location.where(source: "CRM")""rms =",crms.count,crms.select(:longitude).map(&:longitude).uniq.countmigrate column to other column,"cores = Core.where.not(template: nil)cores.each { |core| core.update_attribute(:site_template, core.template) }""search "like".  Not exact word.""earch "like".  Not exac""arch "like".  No""rch "like"""ch "l""h","sol_cores = Core.where("sfdc_acct LIKE '%#{brand.term}%' OR  sfdc_acct LIKE '%#{brand.term.capitalize}%' ORsfdc_root LIKE '%#{brand.term}%' ORsfdc_root LIKE '%#{brand.term.capitalize}%'")""ol_cores = Core.where("sfdc_acct LIKE '%#{brand.term}%' OR  sfdc_acct LIKE '%#{brand.term.capitalize}%' ORsfdc_root LIKE '%#{brand.term}%' ORsfdc_root LIKE '%#{bran""l_cores = Core.where("sfdc_acct LIKE '%#{brand.term}%' OR  sfdc_acct LIKE '%#{brand.term.capitalize}%' ORsfdc_root LIKE '%#{brand.term}%' ORs""_cores = Core.where("sfdc_acct LIKE '%#{brand.term}%' OR  sfdc_acct LIKE '%#{brand.term.capitalize}%' ORsfdc_root LIKE '""cores = Core.where("sfdc_acct LIKE '%#{brand.term}%' OR  sfdc_acct LIKE '%#{brand.term.capitalize}%'""ores = Core.where("sfdc_acct LIKE '%#{brand.term}%' OR  sfdc_acct LIKE '%#{brand""res = Core.where("sfdc_acct LIKE '%#{brand.term}%' OR  sfdc_a""es = Core.where("sfdc_acct LIKE '%#{brand.te""s = Core.where("sfdc_acct L"" = Core.wher","sol_cores = Core.where("sfdc_id LIKE '%sol_%'")""ol_cores = Core.where("""","Core.where("sfdc_id LIKE '%sol_%'").count""ore.where("sfdc_id LIKE '%sol""re.where("sfdc_id ""e.where(","IndexerLocation.where("sfdc_id LIKE '%sol_%'").count""ndexerLocation.where("sfdc_id""dexerLo","IndexerStaffs.where("sfdc_id LIKE '%sol_%'").count""ndexerStaffs.where("sfdc_id L""dexerStaf","Locations.where("sfdc_id LIKE '%sol_%'").count""ocations.where("sfdc_id LIKE ""cations.where","Staffers.where("sfdc_id LIKE '%sol_%'").count""taffers.where("sfdc_id LIKE '""affers.where(""""(or) search two status in one,"Core.where("staff_indexer_status = 'Ready' OR staff_indexer_status = 'Verified'").count""ore.where("staff_indexer_status = 'Ready' OR staff_indexer_status = 'Verifi""re.where("staff_indexer_status = 'Ready' OR staff_indexer_status""e.where("staff_indexer_status = 'Ready' OR staff_index"".where("staff_indexer_status = 'Ready' OR sta""where("staff_indexer_status = 'Ready'""here("staff_indexer_status = '""ere("staff_indexer_statu""re("staff_indexer_s""e("staff_indexe""("staff_inde"""staff_ind""staff_ind"(and) search two status in one,"Core.where(staff_indexer_status: "Ready").where(staff_indexer_status: "Verified").count""ore.where(staff_indexer_status: "Ready").where(staff_""re.where(staff_index","locations = Location.where("geo_root = crm_root")""ocations = Location.w","locations = Location.where("geo_root = 'com' OR geo_root = 'org' OR geo_root = 'net'")""ocations = Location.where("geo_root = 'com' OR geo_root = ""cations = Location.where("geo_r""ation","locations = Location.where("geo_root = crm_root").where("address = geo_full_addr").count""ocations = Location.where("geo_root = crm_root").where("addr""cations = Location.where("geo_roo""ations ",Location.where(geo_full_addr: address)[0..20]update record in db from bash.,"locs.first.update_attributes(crm_url: "http://www.miniofpittsburgh.com/", crm_url_redirect: "http://www.miniofpittsburgh.com/")""ocs.first.update_attributes(crm_url: "http://www.miniofpittsburgh.com/", crm_url_redirec""cs.first.update_attributes(crm_url: "http://www.mi""s.first.updat","            webs[1..-1].each do |delete|                counter+=1                puts "#{counter}) Delete"                delete.update_attribute(:sts_duplicate, "Delete")            end""           webs[1..-1].each do |delete|                counter+=1                puts "#{counter}) ""          we","Location.where(acct_name: loc.acct_name).where(address: loc.address).where(crm_url: loc.crm_url).where(crm_source: "Web").where(sts_duplicate: nil).first.update_attribute(:sts_duplicate, "Save")""ocation.where(acct_name: loc.acct_name).where(address: loc.address).where(crm_"," Location.where.not(sts_duplicate: nil).each { |loc| loc.update_attribute(:sts_duplicate, nil) }",,Foo.where(foo: 'bar').or.where(bar: 'bar'),Post.where(column: 'something').or(Post.where(other: 'else')),User.where(first_name: 'James').or(User.where(last_name: 'Scott')),clients = Client.includes(:address).limit(10),"Post.includes(:category, :comments)","Post.includes(:comments).where("comments.visible", true)""ost.includes(:comments).","Client.exists?(1,2,3)","Client.exists?([1,2,3])","Model.where(:column => ["value", "other_value"]""odel.where(:column => ","Model.where("column = ? or other_column = ?", value, other_value)""odel.where("column = ? or other_column = ?", value, ""del.where("column = ? or other_column = ""el.where("column = ? or other""l.where("column = ?"".where("co""wh",Post.where(column: 'something').or(Post.where(other: 'else')),,Indexer.where(raw_url: nil).or(Indexer.where(clean_url: nil)).count,uniq counts,"Indexer.select([:clean_url]).group(:clean_url).having("count(*) > 1").map.countIndexer.select([:clean_url]).group(:clean_url).having("count(*) < 2").map.countIndexer.all.map(&:template).uniqIndexer.all.map(&:clean_url).uniq.countIndexer.where.not(indexer_status: "Archived").count""ndexer.select([:clean_url]).group(:clean_url).having("count(*) > 1").map.countIndexer.select([:clean_url]).group(:clean_url).having("count(*) < 2").map.countIndexer.all.map(&:template).uniqIndexer.all.map(&:clean_url).uniq.cou""dexer.select([:clean_url]).group(:clean_url).having("count(*) > 1").map.countIndexer.select([:clean_url]).group(:clean_url).having("count(*) < 2").map.countIndexer.all.map(&""exer.select([:clean_url]).group(:clean_url).having("count(*) > 1").map.countIndexer.select([:clean_url]).group(:clean_url""xer.select([:clean_url]).group(:clean_url).having("count(*) > 1").map.""er.select([:clean_u",AND,"indexers = Indexer.where(template: ["eBizAutos", "fusionZone"])""ndexers = Indexer.where(te"