REMOVE NON-UTF-8 (METH 1),"string.delete!("^\u{0000}-\u{007F}")""tring.delete!("^\u{0""ring.",REMOVE NON-UTF-8 (METH 2),"string.gsub!(/\P{ASCII}/, '')",,,,,isolate number and text in separate variables.,"addy = " 16450 County Road A, Marathon, WI, 54448"addy_num = addy.gsub(/[^0-9]/, "")addy_text = addy.gsub(/[^A-Za-z]/, "")""ddy = " 16450 County Road A, Marathon, WI, 54448"addy_num = addy.gsub(/[^0-9]/, "")addy_text = addy.gsub(/[^A-Za-z""dy = " 16450 County Road A, Marathon, WI, 54448"addy_num = addy.gsub(/[^0-9]/, "")addy_text = addy.gsub(/[^""y = " 16450 County Road A, Marathon, WI, 54448"addy_num = addy.gsub(/[^0-9]/, "")addy_text = addy.gsu"" = " 16450 County Road A, Marathon, WI, 54448"addy_num = addy.gsub(/[^0-9]/, "")addy_text = addy""= " 16450 County Road A, Marathon, WI, 54448"addy_num = addy.gsub(/[^0-9]/, "")addy_text = a"" " 16450 County Road A, Marathon, WI, 54448"addy_num = addy.gsub(/[^0-9]/, "")addy_text =""" 16450 County Road A, Marathon, WI, 54448"addy_num = addy.gsub(/[^0-9]/, "")addy_text "" 16450 County Road A, Marathon, WI, 54448"addy_num = addy.gsub(/[^0-9]/, "")addy_text ""16450 County Road A, Marathon, WI, 54448"addy""6450 ",removes non numbers,"phone_stripped = phone.gsub(/[^0-9]/, "")""ho",removes words,"words_to_ignore = Hash[%w[the of by bmw gmc ].map{|w| [w, w]}]",Alnum class: removes non alpha-numeric,"string = "6677 Carlisle Pike, Mechanicsburg, PA, 17050"new_string = string.tr('^A-Za-z0-9', '')puts new_string.downcase""tring = "6677 Carlisle Pike, Mechanicsburg, PA, 17050"new_string = string.tr('^A-Za-z0-9', '')puts new_string""ring = "6677 Carlisle Pike, Mechanicsburg, PA, 17050"new_string = string.tr('^A-Za-z0-9', '')puts ne""ing = "6677 Carlisle Pike, Mechanicsburg, PA, 17050"new_string = string.tr('^A-Za-z0-9', '')""ng = "6677 Carlisle Pike, Mechanicsburg, PA, 17050"new_string = string.tr('^A-Za-z0-9'""g = "6677 Carlisle Pike, Mechanicsburg, PA, 17050"new_string = string.tr('^A-Za-"" = "6677 Carlisle Pike, Mechanicsburg, PA, 17050"new_string = string.tr('^A""= "6677 Carlisle Pike, Mechanicsburg, PA, 17050"new_string = string.tr("" "6677 Carlisle Pike, Mechanicsburg, PA, 17050"new_string = string.t"""6677 Carlisle Pike, Mechanicsburg, PA, 17050"new_string = string.""6677 Carlisle Pike, Mechanicsburg, PA, 17050"new_string = string.""677 Carlisle Pike, Me",Ternary Operator,"# test-expression ? if-true-expression : if-false-expressionhappy = "y"happy_greeting = "You are very happy!!!!"unhappy_greeting = "You are unhappy."if happy == "y"  puts "You are happy."else  puts "You are not happy."endhappy == "y" ? puts("You are happy.") : puts("You are not happy.")#speed > 55 ? puts("I can't drive 55!") : puts("I'm a careful driver")happy == "y" ? puts(happy_greeting) : puts(unhappy_greeting)"" test-expression ? if-true-expression : if-false-expressionhappy = "y"happy_greeting = "You are very happy!!!!"unhappy_greeting = "You are unhappy."if happy == "y"  puts "You are happy."else  puts "You are not happy."endhappy == "y" ? puts("You are happy.") : puts("You are not happy.")#speed > 55 ? puts("I can't drive 55!") : puts("I'm a careful ""test-expression ? if-true-expression : if-false-expressionhappy = "y"happy_greeting = "You are very happy!!!!"unhappy_greeting = "You are unhappy."if happy == "y"  puts "You are happy."else  puts "You are not happy."endhappy == "y" ? puts("You are happy.") : puts("You are not hap""est-expression ? if-true-expression : if-false-expressionhappy = "y"happy_greeting = "You are very happy!!!!"unhappy_greeting = "You are unhappy."if happy == "y"  puts "You are happy."else  puts "You are not happy.""st-expression ? if-true-expression : if-false-expressionhappy = "y"happy_greeting = "You are very happy!!!!"unhappy_greeting = "You are unhappy."if h""t-expression ? if-true-expression : if-false-expressionhappy = "y"happy_greeting = "Y""-expression ? if-true-",&& ||,wolves_like_garlic && (vampires_like_sunshine || vampires_like_garlic),&& ||,(wolves_like_garlic && vampires_like_garlic) || wolves_like_sunshine,! (bang operator),!vampires_like_garlic,! (bang operator),!(wolves_like_sunshine && wolves_like_garlic),,,,,Time & Date,"def age_calculator(dob)    current_time = Time.new    current_mo = current_time.month    current_day = current_time.day    dob_mo = dob[0..1].to_i    dob_day = dob[3..4].to_i    dob_yr = dob[6..9].to_i    (current_mo <= dob_mo) && (current_day < dob_day) ? (dob_yr = dob_yr+1) : (dob_yr)    dob_exact = Time.new(dob_yr,dob_mo,dob_day)    return current_time.year - dob_exact.yearend",Error Messages,TypeErrors: indicate that you have used a data type that is not compatible with what you're trying to do.,Error Messages,NoMethodError,Error Messages,ArgumentError,Error Messages,NameError,Error Tips,"Tip1: Test One Theory at a Time* commit your current code to GH w/ debug branch* List out theory, then modify code to theory.* If theory incorrect, revert to previous clean branch version git checkout <BRANCH NAME, FILENAME, OR DIRECTORY NAME>* Otherwise commit code that fixed the bug.",Error Tips,Tip2: Log Your Data and Control Flow,Error Tips,"Tip3: Avoid bugs in the first place* Name your variables well.* Indent your code properly.* Don't pack too much code onto one line. * Read a lot of code.* Test your code frequently.* Commit frequently.",Error Tips,"puts, p, print, #{sum} : Try different methods fro printing.",Array - Loop,"suitcase = []puts "Welcome to the suitcase assistant!"loop do    puts "Enter an item (or type 'exit'):"    input = gets.chomp    break if input == 'exit'    suitcase << inputendputs "Here's your packing list:"puts suitcaseputs "Safe Travels!"""uitcase = []puts "Welcome to the suitcase assistant!"loop do    puts "Enter an item (or type 'exit'):"    input = gets.chomp    break if input == 'exit'    suitcase << inputendputs "Here's your packing list:"puts suitcase""itcase = []puts "Welcome to the suitcase assistant!"loop do    puts "Enter an item (or type 'exit'):"    input = gets.chomp    break if input == 'exit'    suitcase << inputendputs "Here's your packing li""tcase = []puts "Welcome to the suitcase assistant!"loop do    puts "Enter an item (or type 'exit'):"    input = gets.chomp    break if input == 'exit'    suitcase << inputendputs "Here""case = []puts "Welcome to the suitcase assistant!"loop do    puts "Enter an item (or type 'exit'):"    input = gets.chomp    break if input == 'exit'    suitcase << inpu""ase = []puts "Welcome to the suitcase assistant!"loop do    puts "Enter an item (or type 'exit'):"    input = gets.chomp    break if input == 'exit'    ""se = []puts "Welcome to the suitcase assistant!"loop do    puts "Enter an item (or type 'exit'):"    input = gets.chomp    break if input""e = []puts "Welcome to the suitcase assistant!"loop do    puts "Enter an item (or type 'exit'):"    input = gets.chomp    "" = []puts "Welcome to the suitcase assistant!"loop do    puts "Enter an item (or type 'exit'):"    input = ge""= []puts "Welcome to the suitcase assistant!"loop do    puts "Enter an item (or type 'exit'):"  "" []puts "Welcome to the suitcase assistant!"loop do    puts "Enter an item (or type '""[]puts "Welcome to the suitcase assistant!"loop do    puts "Enter an item ""]puts "Welcome to the suitcase assistant!"loop do    puts "Enter""puts "Welcome to the suitcase assistant!"loop do    put""puts "Welcome to the suitcase assistant!"loop do""puts "Welcome to the suitcase assistant!"lo""uts "Welcome to the suitcase assistant!""ts "Welcome to the suitcase assist""s "Welcome to the suitcase ass"" "Welcome to the suitcase a"""Welcome to the suitcase ""Welcome to the suitcase ",Array,array.delete_at(0),Array,array.first,Array,array.last,Array,array[-1],Hashes - Strings,"#String Hashstring_post = {    "date" => "6/10/16",    "title" => "About my Turtle",    "author" => "Tom Greene",    "body" => "I just saw my turtle surfing in the ocean!"}p string_post[:author]string_post[:author] = "Sarah Brady"p string_post[:author]string_post[:likes] = 300p string_post.keysp string_post.valuesp string_post""String Hashstring_post = {    "date" => "6/10/16",    "title" => "About my Turtle",    "author" => "Tom Greene",    "body" => "I just saw my turtle surfing in the ocean!"}p string_post[:author]string_post[:author] = "Sarah Brady"p string_post[:author]string_post[:likes] = 300p string_post.keysp""tring Hashstring_post = {    "date" => "6/10/16",    "title" => "About my Turtle",    "author" => "Tom Greene",    "body" => "I just saw my turtle surfing in the ocean!"}p string_post[:author]string_post[:author] = "Sarah Brady"p string_post[:author]string_post[:li""ring Hashstring_post = {    "date" => "6/10/16",    "title" => "About my Turtle",    "author" => "Tom Greene",    "body" => "I just saw my turtle surfing in the ocean!"}p string_post[:author]string_post[:author] = "Sarah Brady"p strin""ing Hashstring_post = {    "date" => "6/10/16",    "title" => "About my Turtle",    "author" => "Tom Greene",    "body" => "I just saw my turtle surfing in the ocean!"}p string_post[:author]string_post[:a""ng Hashstring_post = {    "date" => "6/10/16",    "title" => "About my Turtle",    "author" => "Tom Greene",    "body" => "I just saw my turtle surfing in the ocean!"}p string""g Hashstring_post = {    "date" => "6/10/16",    "title" => "About my Turtle",    "author" => "Tom Greene",    "body" => "I just saw my turtle surfin"" Hashstring_post = {    "date" => "6/10/16",    "title" => "About my Turtle",    "author" => "Tom Greene",    "body" => """Hashstring_post = {    "date" => "6/10/16",    "title" => "About my Turtle",    "author" => "To""ashstring_post = {    "date" => "6/10/16",    "title" => "About my Tur""shstring_post = {    "date" => "6/10/16",    ""hstring_post = {    "d""",Hashes - Symbols,"symbol_post = {        date: "6/10/16",        title: "About my Turtle",        author: "Tom Greene",        body: "I just saw my turtle surfing in the ocean!"}p symbol_post[:author]symbol_post[:author] = "Sarah Brady"p symbol_post[:author]symbol_post[:likes] = 300p symbol_post.keysp symbol_post.valuesp symbol_post""ymbol_post = {        date: "6/10/16",        title: "About my Turtle",        author: "Tom Greene",        body: "I just saw my turtle surfing in the ocean!"}p symbol_post[:author]symbol_post[:author] = "Sarah Brady"p symbol_post[:author]symbol_post[:likes] = 300p symbol_post.keysp sy""mbol_post = {        date: "6/10/16",        title: "About my Turtle",        author: "Tom Greene",        body: "I just saw my turtle surfing in the ocean!"}p symbol_post[:author]symbol_post[:author] = "Sarah Brady"p symbol_post[:author]symbol_post[:likes] =""bol_post = {        date: "6/10/16",        title: "About my Turtle",        author: "Tom Greene",        body: "I just saw my turtle surfing in the ocean!"}p symbol_post[:author]symbol_post[:author] = "Sarah Brady"p symbol_post[:a""ol_post = {        date: "6/10/16",        title: "About my Turtle",        author: "Tom Greene",        body: "I just saw my turtle surfing in the ocean!"}p symbol_post[:author]symbol_post[:author] = "Sa""l_post = {        date: "6/10/16",        title: "About my Turtle",        author: "Tom Greene",        body: "I just saw my turtle surfing in the ocean!"}p symbol_post[:author]""_post = {        date: "6/10/16",        title: "About my Turtle",        author: "Tom Greene",        body: "I just saw my turtle surfing in the ocean!"}""post = {        date: "6/10/16",        title: "About my Turtle",        author: "Tom Greene",        body: "I just saw my turtle ""ost = {        date: "6/10/16",        title: "About my Turtle",        author: "Tom Greene",        body:""st = {        date: "6/10/16",        title: "About my Turtle",        author: "Tom ""t = {        date: "6/10/16",        title: "About my Turtle","" = {        date: "6/10/16",        title:""= {        date: "6/10/"" {  ",